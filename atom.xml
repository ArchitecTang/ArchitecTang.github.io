<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ArchitecTang Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://architectang.github.io/"/>
  <updated>2019-07-10T06:17:06.650Z</updated>
  <id>https://architectang.github.io/</id>
  
  <author>
    <name>Zhaohu.Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tomcat 安装配置</title>
    <link href="https://architectang.github.io/2019/07/09/tomcat-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://architectang.github.io/2019/07/09/tomcat-安装配置/</id>
    <published>2019-07-09T12:35:17.000Z</published>
    <updated>2019-07-10T06:17:06.650Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><h6 id="tomcat简介"><a href="#tomcat简介" class="headerlink" title="tomcat简介"></a>tomcat简介</h6><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，它早期的名称为catalina，后来由Apache、Sun 和其他一些公司及个人共同开发而成，并更名为Tomcat。Tomcat 是一个小型的轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选，因为Tomcat 技术先进、性能稳定，成为目前比较流行的Web 应用服务器。Tomcat是应用（java）服务器，它只是一个servlet容器，是Apache的扩展，但它是独立运行的。目前最新的版本为Tomcat 8.0.24 Released。</p><p>Tomcat不是一个完整意义上的Jave EE服务器，它甚至都没有提供对哪怕是一个主要Java EE API的实现；但由于遵守apache开源协议，tomcat却又为众多的java应用程序服务器嵌入自己的产品中构建商业的java应用程序服务器，如JBoss和JOnAS。尽管Tomcat对Jave EE API的实现并不完整，然而很企业也在渐渐抛弃使用传统的Java EE技术（如EJB）转而采用一些开源组件来构建复杂的应用。这些开源组件如Structs、Spring和Hibernate，而Tomcat能够对这些组件实现完美的支持。</p><p><a href="http://www.ttlsa.com/tomcat/tomcat-install-and-configure/" target="_blank" rel="noopener">详细请参考-运维生存时间</a></p><h6 id="1、安装环境"><a href="#1、安装环境" class="headerlink" title="1、安装环境:"></a>1、安装环境:</h6><p>Centos 7 tomcat版本: apache-tomcat-8.5.42.tar java版本: java8</p><p><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">官方网站</a></p><p><a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">下载tomcat8</a></p><h6 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h6><p>上传至Linux 服务器</p><p>创建tomcat安装目录</p><pre><code>mkdir /tomcat</code></pre><p>解压tomcat、jdk</p><pre><code>[root@node1 tomcat]# ll总用量 178712-rw-r--r--. 1 root root   9711748 7月   9 10:55 apache-tomcat-8.5.42.tar.gz-rw-r--r--. 1 root root 173281904 7月   9 10:55 jdk-8u51-linux-x64.tar.gz[root@node1 tomcat]# tar xf jdk-8u51-linux-x64.tar.gz [root@node1 tomcat]# tar xf apache-tomcat-8.5.42.tar.gz [root@node1 tomcat]# </code></pre><p><img src="https://i.loli.net/2019/07/09/5d2401ef70aba45222.png" alt="软件列表"></p><h6 id="3、启动脚本配置"><a href="#3、启动脚本配置" class="headerlink" title="3、启动脚本配置"></a>3、启动脚本配置</h6><pre><code>#!/bin/bashsource /etc/sysconfig/i18nexport JAVA_HOME=/tomcat/jdk1.8.0_51export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH   --配置启动javaexport CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jarexport TOMCAT_HOME=/tomcat/apache-tomcat-8.5.42/export PATH=$PATH:$TOMCAT_HOME/bin#export JAVA_OPTS=&quot;$JAVA_OPTS -Xms10000m -Xmx10000m -Xmn4000m -XX:PermSize=256m -XX:MaxPermSize=512m&quot;    -配置程序内存PROG=&quot;tomcat&quot;IP_ADDR=$(/sbin/ifconfig eth0 | grep &quot;inet addr&quot; | awk &apos;{print $2}&apos; | awk -F &quot;:&quot; &apos;{print $2}&apos;)tomcat_start()  ---启动tomcat{        rm -fr /tomcat/apache-tomcat-8.5.42/work/*     ----删除缓存        rm -fr /tomcat/apache-tomcat-8.5.42/temp/*     ----删除临时缓存        echo  $&quot;Starting $IP_ADDR $PROG: &quot;        cd /tomcat/apache-tomcat-8.5.42/bin/        ./startup.sh        echo &quot;tomcat 8 starting......&quot;}tomcat_log()    ---查看程序日志{        echo -n $&quot;ShowLoging $IP_ADDR $PROG log: &quot;        tail -n200 -f /tomcat/apache-tomcat-8.5.42/logs/catalina.out}tomcat_stop()  ---停止tomcat{    echo $&quot;Stopping $IP_ADDR $PROG: &quot;        kill $(ps -ef | grep java | grep -v &quot;grep&quot; | grep &quot;apache-tomcat&quot; |awk -F &apos; &apos; &apos;{print $2}&apos;)        sleep 12        TOMCAT_STATUS1=$(ps -ef | grep java | grep -v &quot;grep&quot;| grep &quot;apache-tomcat&quot;)        if [ -n &quot;$TOMCAT_STATUS1&quot; ];then                echo &quot;Run Kill -9&quot;                kill -9 $(ps -ef | grep java | grep -v &quot;grep&quot; | grep &quot;apache-tomcat&quot; |awk -F &quot; &quot; &apos;{print $2}&apos;)                sleep 2        fi        TOMCAT_STATUS2=$(ps -ef | grep java | grep -v &quot;grep&quot;| grep &quot;apache-tomcat&quot; )        if [ -z &quot;$TOMCAT_STATUS2&quot; ];then                echo &quot;Tomcat Stop ok&quot;        else                exit 1        fi}tomcat_status()   ---查看tomcat程序状态{        ps -ef | grep java | grep -v &quot;grep&quot;| grep &quot;tomcat&quot;}case &quot;$1&quot; instart)        tomcat_start;        ;;stop)        tomcat_stop;        ;;restart)        tomcat_stop;        tomcat_start;        ;;status)                tomcat_status;                ;;log)        tomcat_log;                ;;*)        echo $&quot;Usage: $prog {start | stop | restart | log | status}&quot;        exit 1esac</code></pre><p>tomcat 需要jdk才能运行，上面解压以后我是在tomcat启动脚本里面配置的jdk目录，也可以定义在系统全局变量里面，但是我不会这么做，因为我们的环境经常是运行多个实例且JDK版本要求不同，如果安装多个jdk会造成全局冲突</p><p>全局变量定义方式:</p><pre><code>vim /etc/profile写入以下内容:export JAVA_HOME=/jboss/jdk1.8.0_51export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport JRE_HOME=$JAVA_HOME/jreexport PATH=$PATH:$JAVA_HOME/binsource /etc/profile -- 生效配置验证java[root@node1 ~]# java -versionjava version &quot;1.8.0_51&quot;Java(TM) SE Runtime Environment (build 1.8.0_51-b16)Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)[root@node1 ~]# </code></pre><p><img src="https://i.loli.net/2019/07/09/5d2411d062f9884358.png" alt="jdk.png"></p><h6 id="4、启动tomcat"><a href="#4、启动tomcat" class="headerlink" title="4、启动tomcat"></a>4、启动tomcat</h6><pre><code>[root@node1 ~]# ./tomcat.sh start   ---启动服务Starting  tomcat: Using CATALINA_BASE:   /tomcat/apache-tomcat-8.5.42Using CATALINA_HOME:   /tomcat/apache-tomcat-8.5.42Using CATALINA_TMPDIR: /tomcat/apache-tomcat-8.5.42/tempUsing JRE_HOME:        /jboss/jdk1.8.0_51/jreUsing CLASSPATH:       /tomcat/apache-tomcat-8.5.42/bin/bootstrap.jar:/tomcat/apache-tomcat-8.5.42/bin/tomcat-juli.jarTomcat started.tomcat 8 starting......[root@node1 ~]# ./tomcat.sh statusroot     24103     1  0 11:39 ?        00:00:04 /jboss/jdk1.8.0_51/jre/bin/java -Djava.util.logging.config.file=/tomcat/apache-tomcat-8.5.42/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Xms1000m -Xmx1000m -Xmn400m -XX:PermSize=256m -XX:MaxPermSize=512m -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /tomcat/apache-tomcat-8.5.42/bin/bootstrap.jar:/tomcat/apache-tomcat-8.5.42/bin/tomcat-juli.jar -Dcatalina.base=/tomcat/apache-tomcat-8.5.42 -Dcatalina.home=/tomcat/apache-tomcat-8.5.42 -Djava.io.tmpdir=/tomcat/apache-tomcat-8.5.42/temp org.apache.catalina.startup.Bootstrap start    09-Jul-2019 11:39:42.759 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.5.4209-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Jun 4 2019 20:29:04 UTC09-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.5.42.009-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux09-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-327.el7.x86_6409-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd6409-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /jboss/jdk1.8.0_51/jre09-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_51-b1609-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation09-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /tomcat/apache-tomcat-8.5.4209-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /tomcat/apache-tomcat-8.5.4209-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/tomcat/apache-tomcat-8.5.42/conf/logging.properties09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xms1000m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xmx1000m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xmn400m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -XX:PermSize=256m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -XX:MaxPermSize=512m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=204809-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources09-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=002709-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=09-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/tomcat/apache-tomcat-8.5.4209-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/tomcat/apache-tomcat-8.5.4209-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/tomcat/apache-tomcat-8.5.42/temp09-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib]09-Jul-2019 11:39:43.048 信息 [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;http-nio-8080&quot;]09-Jul-2019 11:39:43.071 信息 [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read09-Jul-2019 11:39:43.095 信息 [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;ajp-nio-8009&quot;]09-Jul-2019 11:39:43.113 信息 [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read09-Jul-2019 11:39:43.124 信息 [main] org.apache.catalina.startup.Catalina.load Initialization processed in 1109 ms09-Jul-2019 11:39:43.158 信息 [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]09-Jul-2019 11:39:43.158 信息 [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.4209-Jul-2019 11:39:43.207 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/ROOT]09-Jul-2019 11:44:19.656 警告 [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [276,003] milliseconds.09-Jul-2019 11:44:19.697 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/ROOT] has finished in [276,491] ms09-Jul-2019 11:44:19.697 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/docs]09-Jul-2019 11:44:19.739 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/docs] has finished in [42] ms09-Jul-2019 11:44:19.739 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/examples]09-Jul-2019 11:44:20.212 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/examples] has finished in [473] ms09-Jul-2019 11:44:20.213 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/host-manager]09-Jul-2019 11:44:20.266 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/host-manager] has finished in [53] ms09-Jul-2019 11:44:20.266 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/manager]09-Jul-2019 11:44:20.293 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/manager] has finished in [27] ms09-Jul-2019 11:44:20.314 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-nio-8080&quot;]09-Jul-2019 11:44:20.342 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;ajp-nio-8009&quot;]09-Jul-2019 11:44:20.344 信息 [main] org.apache.catalina.startup.Catalina.start Server startup in 277219 ms    ----看到此输出，程序就已经正常启动</code></pre><p>通过浏览器访问tomcat服务,tomcat 默认端口号为8080</p><pre><code>http://ipaddr:8080</code></pre><p><img src="https://i.loli.net/2019/07/09/5d240e566144292606.png" alt="tomcat.png"><br>tomcat端口可在/conf/server.xml文件中修改</p><pre><code>67    Define a non-SSL/TLS HTTP/1.1 Connector on port 8080 68    --&gt; 69    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;    --将8080修改为80或其他需要的端口 70               connectionTimeout=&quot;20000&quot; 71               redirectPort=&quot;8443&quot; /&gt; 72    &lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</code></pre><p><img src="https://i.loli.net/2019/07/09/5d2413ad1c50b94868.png" alt="8080.png"><br>tomcat已安装完毕</p><h6 id="5、tomcat目录结构说明"><a href="#5、tomcat目录结构说明" class="headerlink" title="5、tomcat目录结构说明"></a>5、tomcat目录结构说明</h6><p><img src="https://i.loli.net/2019/07/09/5d240ec19f9ee56826.png" alt="目录结构.png"></p><pre><code>bin             -- 程序启动目录conf            -- 配置文件目录lib                -- 库文件目录logs            -- 日志文件目录temp            -- 临时缓存目录webapps            -- web 应用家目录work            -- 工作缓存目录</code></pre><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="Apache" scheme="https://architectang.github.io/categories/Linux/Apache/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="Apache" scheme="https://architectang.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Rabbitmq 集群安装</title>
    <link href="https://architectang.github.io/2019/07/02/Rabbitmq-%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>https://architectang.github.io/2019/07/02/Rabbitmq-集群安装/</id>
    <published>2019-07-02T11:04:05.000Z</published>
    <updated>2019-07-04T04:19:12.716Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><h5 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h5><p>RabbitMQ是采用Erlang语言实现AMQP（Advanced Message Queuing Protocol，高级消息队列协议）的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。<br>MQ全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过 队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。其中较为成熟的MQ产品有IBM WEBSPHERE MQ等等。<br>RabbitMQ是目前非常热门的一款消息中间件，很多行业都在使用这个消息中间件，RabbitMQ凭借其高可靠、易扩展、高可用及丰富的功能特性收到很多人的青睐。</p><h5 id="一、软件下载："><a href="#一、软件下载：" class="headerlink" title="一、软件下载："></a>一、软件下载：</h5><p>下载<a href="https://pan.baidu.com/s/1QLR4OelHXfMGLYywD13ydw" target="_blank" rel="noopener">Erlang</a> 百度云提取码: 864m</p><p>下载<a href="https://pan.baidu.com/s/15xSC2qo6-0Jh6FYnXkA4Yw" target="_blank" rel="noopener">Rabbitmq 源码包</a> 百度云提取码: qwih</p><p><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">点击此处跳转到官方网站下载最新版本</a></p><h5 id="二、安装环境"><a href="#二、安装环境" class="headerlink" title="二、安装环境:"></a>二、安装环境:</h5><p>node1 172.31.8.8 system Centos 7 —- node3 172.31.8.107 system Centos 7</p><p>node2 172.31.8.13 system Centos 7 —- node4 172.31.8.75 system Centos 7</p><p>软件版本：</p><p>Erlang 21.3</p><p>rabbitmq 3.7.7</p><h5 id="三、单点安装-以下操作需要在其他四个节点重复执行"><a href="#三、单点安装-以下操作需要在其他四个节点重复执行" class="headerlink" title="三、单点安装(以下操作需要在其他四个节点重复执行)"></a>三、单点安装(以下操作需要在其他四个节点重复执行)</h5><p>1、分别编辑四台机器的/etc/hosts 文件，增加以下内容</p><p>172.31.8.8 node1</p><p>172.31.8.13 node2</p><p>172.31.8.107 node3</p><p>172.31.8.75 node4</p><p>2、安装依赖包</p><pre><code>yum install -y *epel* gcc-c++ unixODBC unixODBC-devel openssl-devel ncurses-devel</code></pre><p>3、编译安装 Erlang</p><pre><code>[root@node1 ~]# tar xf otp_src_21.3.tar.gz[root@node1 ~]# cd otp_src_21.3[root@node1 otp_src_21.3]# ./configure --prefix=/usr/local/bin/erlang --without-javac[root@node1 otp_src_21.3]# make &amp;&amp; make install[root@node1 otp_src_21.3]# echo &quot;export PATH=$PATH:/usr/local/bin/erlang/bin:/usr/local/bin/rabbitmq_server-3.6.5/sbin&quot; &gt;&gt; /etc/profile[root@node1 otp_src_21.3]# source /etc/profile</code></pre><p>查看erlang 是否安装成功，出现以下输出即证明erlang已经安装成功<br><img src="https://i.loli.net/2019/07/02/5d1b6526a7b9185754.png" alt="erlang版本.png"></p><p>4、安装Rabbitmq</p><pre><code>[root@node1 ~]# tar xf rabbitmq-server-generic-unix-3.7.7.tar[root@node2 ~]# mv rabbitmq_server-3.7.7 /usr/local/rabbitmq-3.7.7[root@node2 ~]# cd /usr/local/rabbitmq-3.7.7/[root@node1 ~]# echo &quot;export PATH=$PATH:/usr/local/rabbitmq-3.7.7/sbin&quot; &gt;&gt; /etc/profile[root@node1 ~]# source /etc/profile[root@node1 ~]# rabbitmq-plugins enable rabbitmq_management   ---打开管理页面插件[root@node1 ~]# rabbitmq-server -detached  --后台启动服务[root@node1 ~]# rabbitmqctl add_user  admin 123456  --增加用户名admin，密码123456[root@node1 ~]# rabbitmqctl set_permissions -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; [root@node1 ~]# rabbitmqctl set_user_tags admin administrator --设置用户admin为管理员</code></pre><p>打开web页面，出现以下页面即安装成功</p><p>node1<br><img src="https://i.loli.net/2019/07/03/5d1ca62e894fb35867.png" alt="rabbitmqnode1.png"><br>node2<br><img src="https://i.loli.net/2019/07/03/5d1ca66bb841381637.png" alt="rabbitmqnode2.png"></p><h5 id="四、部署集群"><a href="#四、部署集群" class="headerlink" title="四、部署集群:"></a>四、部署集群:</h5><p>1、 修改 .erlang.cookie文件，node1、node4节点内容改为一致</p><pre><code>[root@node1 ~]# chmod 400 .erlang.cookie  --设置.erlang.cookie文件权限,为了防止添加集群失败四个节点均需要调整为一致[root@node1 ~]# scp .erlang.cookie root@172.31.8.13:/root/[root@node1 ~]# scp .erlang.cookie root@172.31.8.107:/root/[root@node1 ~]# scp .erlang.cookie root@172.31.8.75:/root/</code></pre><p>添加集群失败报错示例: 出现此信息可根据提示进行排查<br><img src="https://i.loli.net/2019/07/03/5d1cb7afc3b9469683.png" alt="报错示例.png"><br>2、 替换完.erlang.cookie文件，需要重启各个节点的rabbitmq服务</p><pre><code>node1[root@node1 ~]# kill -9 PID[root@node1 ~]# rabbitmq-server -detachednode2[root@node2 ~]# kill -9 PID[root@node2 ~]# rabbitmq-server -detachednode3[root@node3 ~]# kill -9 PID[root@node3 ~]# rabbitmq-server -detachednode4[root@node4 ~]# kill -9 PID[root@node5 ~]# rabbitmq-server -detached</code></pre><p>3、添加节点到集群，将node1节点作为主节点</p><p>在 node2 节点执行以下命令：</p><pre><code>[root@node2 ~]# rabbitmqctl stop_app[root@node4 ~]# rabbitmqctl join_cluster rabbit@node1  --默认为disc节点，如果需要指定节点角色，可以添加--ram/--disc参数[root@node4 ~]# rabbitmqctl start_app[root@node4 ~]# rabbitmqctl cluster_status</code></pre><p>以上命令在node3、4节点重复执行</p><p>执行结果:<br><img src="https://i.loli.net/2019/07/03/5d1cb507de47990688.png" alt="添加集群.png"><br>打开web管理页面查看状态<br><img src="https://i.loli.net/2019/07/03/5d1cb57e207a876254.png" alt="查看集群.png"></p><p>到此Rabbitmq集群已经安装完毕，四个节点均已正常运行</p><h5 id="五、集群管理"><a href="#五、集群管理" class="headerlink" title="五、集群管理"></a>五、集群管理</h5><p>1、假设Rabbitmq-node2节点需要退出集群</p><p>在node2节点执行：</p><pre><code>rabbitmqctl stop_app   --停止rabbitmq服务rabbitmqctl reset --将RabbitMQ node还原到最初状态.包括从所在群集中删除此node,从管理数据库中删除所有配置数据，如已配置的用户和虚拟主机，以及删除所有持久化消息.rabbitmqctl start_app </code></pre><p>在主节点（node1）执行</p><pre><code>rabbitmqctl forget_cluster_node rabbit@node2 --此命令会从集群中删除rabbit@node2节点.</code></pre><p>2、修改node2、node4节点为内存节点，在node2、4节点执行:</p><pre><code>[root@node2 ~]# rabbitmqctl stop_app   --停止rabbitmq服务[root@node2 ~]# rabbitmqctl change_cluster_node_type ram    --修改节点为内存节点[root@node2 ~]# rabbitmqctl start_app    --启动服务[root@node2 ~]# rabbitmqctl cluster_status --查看集群状态</code></pre><p>执行结果可以看到node2节点已经修改为RAM节点，disc节点为node1、3、4<br><img src="https://i.loli.net/2019/07/04/5d1d75112e7ab28091.png" alt="node2RAM.png"><br>再修改node4节点：<br><img src="https://i.loli.net/2019/07/04/5d1d7671ed99316232.png" alt="node4RAM.png"><br>node2、node4节点已经成功修改为内存节点，现在集群就是双内存、双硬盘节点，从控制台查看更为直观:<br><img src="https://i.loli.net/2019/07/04/5d1d79643889841417.png" alt="web控制台.png"></p><p>更多管理命令可参考文档:</p><p><a href="https://blog.csdn.net/wulex/article/details/64127224" target="_blank" rel="noopener">https://blog.csdn.net/wulex/article/details/64127224</a></p><p><a href="https://www.rabbitmq.com/clustering.html" target="_blank" rel="noopener">点击此处查看官方文档</a></p><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="Rabbitmq" scheme="https://architectang.github.io/categories/Linux/Rabbitmq/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="Rabbitmq" scheme="https://architectang.github.io/tags/Rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>solr6+tomcat8+zookeeper 环境部署</title>
    <link href="https://architectang.github.io/2019/05/22/solr6+tomcat8+zookeeper%20%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <id>https://architectang.github.io/2019/05/22/solr6+tomcat8+zookeeper 环境部署/</id>
    <published>2019-05-22T01:20:50.000Z</published>
    <updated>2019-05-22T12:59:27.265Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><p>安装概述：</p><p>以下是部署环境：</p><p>系统环境为：</p><p>三台系统为Centos 6.8 的服务器</p><p>主机IP：10.6.11.19 10.6.11.23 10.6.11.22</p><p>软件环境为：</p><p>tomcat 8.5.24</p><p>jdk1.8.0_162</p><p>solr6.6.3</p><p>zookeepr-3.4.10</p><p>tomcat安装不多说，配置java环境即可启动，出现以下画面就说明tomcat服务已经部署完成</p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328195223983-641651017.png" alt></p><p>将solr6部署到tomcat 8 容器内（仅以单节点安装为例，三个节点的安装步骤是一样的）</p><pre><code>cp -r /home/tomcat/software/solr-6.6.3/server/solr-webapp/webapp /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solrcp -r /home/tomcat/software/solr-6.6.3/server/lib/metrics* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/rm -f /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/metrics-jetty9-3.2.2.jarcp -r /home/tomcat/software/solr-6.6.3/server/lib/ext/* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/cp -r /home/tomcat/software/solr-6.6.3/dist/solr-dataimporthandler-* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/libcp -r /home/tomcat/software/solr-6.6.3/dist/solr-clustering-6.6.3.jar /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/libmkdir /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/classescp -r /home/tomcat/software/solr-6.6.3/server/resources/log4j.properties /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/classes</code></pre><p>创建solrhome目录</p><p>mkdir /home/tomcat/apache-tomcat-8.5.24-solr/solrhome</p><p>cp -r /home/tomcat/software/solr-6.6.3/server/solr/* /home/tomcat/apache-tomcat-8.5.24-solr/solrhome/</p><p>修改web.xml文件，配置solrhome目录和solr访问权限</p><p>vim /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/web.xml</p><p>找到solr/home 根据自己的实际情况配置solr路径</p><pre><code>&lt;env-entry&gt;&lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;&lt;env-entry-value&gt;/home/tomcat/apache-tomcat-8.5.24-solr/solrhome&lt;/env-entry-value&gt;&lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;&lt;/env-entry&gt;</code></pre><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328205305280-636337399.png" alt></p><p>配置访问权限，注释下图红圈部分内容</p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328205537011-610781005.png" alt></p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328205630839-1475446582.png" alt></p><p>修改tomcat server.xml文件，配置服务访问端口</p><p>vim /home/tomcat/apache-tomcat-8.5.24-solr/conf/server.xml</p><pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;            maxHttpHeaderSize=&quot;8192&quot;            connectionTimeout=&quot;20000&quot;            maxThreads=&quot;150&quot;            maxSpareThreads=&quot;75&quot;            redirectPort=&quot;8443&quot; /&gt;    &lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</code></pre><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328205753674-2093690073.png" alt></p><p>修改solr配置文件 host设置为本机IP，port设置和tomcat端口一致，均为8080</p><p>vim /home/tomcat/apache-tomcat-8.5.24-solr/solrhome/solr.xml</p><pre><code>&lt;solr&gt;    &lt;solrcloud&gt;        &lt;str name=&quot;host&quot;&gt;${host:10.6.11.19}&lt;/str&gt;        &lt;int name=&quot;hostPort&quot;&gt;${jetty.port:8080}&lt;/int&gt;        &lt;str name=&quot;hostContext&quot;&gt;${hostContext:solr}&lt;/str&gt;        &lt;bool name=&quot;genericCoreNodeNames&quot;&gt;${genericCoreNodeNames:true}&lt;/bool&gt;        &lt;int name=&quot;zkClientTimeout&quot;&gt;${zkClientTimeout:30000}&lt;/int&gt;        &lt;int name=&quot;distribUpdateSoTimeout&quot;&gt;${distribUpdateSoTimeout:600000}&lt;/int&gt;        &lt;int name=&quot;distribUpdateConnTimeout&quot;&gt;${distribUpdateConnTimeout:60000}&lt;/int&gt;        &lt;str name=&quot;zkCredentialsProvider&quot;&gt;${zkCredentialsProvider:org.apache.solr.common.cloud.DefaultZkCredentialsProvider}&lt;/str&gt;        &lt;str name=&quot;zkACLProvider&quot;&gt;${zkACLProvider:org.apache.solr.common.cloud.DefaultZkACLProvider}&lt;/str&gt;    &lt;/solrcloud&gt;    &lt;shardHandlerFactory name=&quot;shardHandlerFactory&quot;        class=&quot;HttpShardHandlerFactory&quot;&gt;        &lt;int name=&quot;socketTimeout&quot;&gt;${socketTimeout:600000}&lt;/int&gt;        &lt;int name=&quot;connTimeout&quot;&gt;${connTimeout:60000}&lt;/int&gt;    &lt;/shardHandlerFactory&gt;    &lt;/solr&gt;</code></pre><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328210119163-1720093871.png" alt></p><p>重启tomcat 服务，验证安装</p><p>访问地址：<a href="http://IP:8080/solr/#/" target="_blank" rel="noopener">http://IP:8080/solr/#/</a></p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328210304797-69359330.png" alt></p><p>出现以上页面，solr就已成功部署到tomcat容器内创建</p><p>根据需求创建分片,使用以下命令进行创建：</p><pre><code>http://IP:8080/solr/admin/collections?action=CREATE&amp;name=分片名称&amp;numShards=分片数&amp;replicationFactor=副本数&amp;maxShardsPerNode=节点数&amp;collection.configName=conf目录名称</code></pre><p>例如：</p><pre><code>http://10.6.11.19:8080/solr/admin/collections?action=CREATE&amp;name=user&amp;numShards=2&amp;replicationFactor=3&amp;maxShardsPerNode=3&amp;collection.configName=user</code></pre><p>出现以下参数即说明分片创建成功</p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328211655638-132166093.png" alt></p><p>访问<a href="http://IP:8080/solr/#/~cloud" target="_blank" rel="noopener">http://IP:8080/solr/#/~cloud</a> 验证分片</p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328211547176-697804153.png" alt><br>使用此命令创建了两个分片，三个副本<br>一般只可以创建两个副本，增加&amp;maxShardsPerNode=3&amp;collection.configName=user 参数突破副本创建限制</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="搜索" scheme="https://architectang.github.io/categories/Linux/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="solr" scheme="https://architectang.github.io/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统安全检查（shell）</title>
    <link href="https://architectang.github.io/2019/05/22/Linux%20%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%EF%BC%88shell%EF%BC%89/"/>
    <id>https://architectang.github.io/2019/05/22/Linux 系统安全检查（shell）/</id>
    <published>2019-05-22T01:14:09.000Z</published>
    <updated>2019-05-22T01:17:43.839Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><p>脚本内容:</p><pre><code>#!/bin/bashecho &quot;         (__)&quot;echo &quot;         (oo)&quot;echo &quot;   /------\/ &quot;echo &quot;  / |    ||  &quot;echo &quot; *  /\---/\  &quot;echo &quot;   ~~   ~~   &quot;echo &quot;Are You Ready?&quot;read keyecho &quot;警告：本脚本只作为日常巡检使用，不会对服务器做任何修改，管理员可以根据此报告进行相应的设置。&quot;echo ------------------------------------------------------------------------echo &quot;查看系统时间&quot;DATE=`date`echo &quot;Date is $DATE&quot;echo ------------------------------------------------------------------------echo &quot;进行系统时间同步&quot;ntpdate time.nist.govecho ------------------------开始进行检查----------------------echo &quot;检查时间为&quot;DATE=`date`echo &quot;Date is $DATE&quot;echo ------------------------主机基本信息检查-----------------------echo &quot;系统版本（Centos或Rehead）&quot;cat /etc/redhat-releaseecho --------------------------------------------------------------------------echo &quot;系统位数（32位或64位）&quot;getconf LONG_BITecho -------------------------检查IP信息-----------------------------------------echo &quot;本机的ip地址是：&quot;ifconfig | grep --color &quot;\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}&quot;echo -------------------------检查系统用户信息---------------------------------------awk -F&quot;:&quot; &apos;{if($2!~/^!|^*/){print &quot;(&quot;$1&quot;)&quot; &quot; 是一个未被锁定的账户，请管理员检查是否需要锁定它或者删除它。&quot;}}&apos; /etc/shadowecho --------------------------------------------------------------------------more /etc/login.defs | grep -E &quot;PASS_MAX_DAYS&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos;  &apos;{if($2!=90){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;天，请管理员改成90天。&quot;}}&apos;echo --------------------------------------------------------------------------more /etc/login.defs | grep -E &quot;PASS_MIN_LEN&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos;  &apos;{if($2!=6){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;个字符，请管理员改成6个字符。&quot;}}&apos;echo --------------------------------------------------------------------------more /etc/login.defs | grep -E &quot;PASS_WARN_AGE&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos;  &apos;{if($2!=10){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;天，请管理员将口令到期警告天数改成10天。&quot;}}&apos;echo --------------------------------------------------------------------------grep TMOUT /etc/profile /etc/bashrc &gt; /dev/null|| echo &quot;未设置登录超时限制，请设置之，设置方法：在/etc/profile或者/etc/bashrc里面添加TMOUT=600参数&quot;echo ------------------------检查服务运行情况-----------------------------------if ps -elf |grep xinet |grep -v &quot;grep xinet&quot;;thenecho &quot;xinetd 服务正在运行，请检查是否可以把xinnetd服务关闭&quot;elseecho &quot;xinetd 服务未开启&quot;fiecho --------------------------------------------------------------------------echo &quot;查看系统密码文件修改时间&quot;ls -ltr /etc/passwdecho --------------------------------------------------------------------------echo  &quot;查看是否开启了ssh服务&quot;if service sshd status | grep -E &quot;listening on|active \(running\)&quot;; thenecho &quot;SSH服务已开启&quot;elseecho &quot;SSH服务未开启&quot;fiecho --------------------------------------------------------------------------echo &quot;查看是否开启了TELNET服务&quot;if more /etc/xinetd.d/telnetd 2&gt;&amp;1|grep -E &quot;disable=no&quot;; thenecho  &quot;TELNET服务已开启 &quot;elseecho  &quot;TELNET服务未开启 &quot;fiecho --------------------------------------------------------------------------echo  &quot;查看系统SSH远程访问设置策略(host.deny拒绝列表)&quot;if more /etc/hosts.deny | grep -E &quot;sshd: &quot;;more /etc/hosts.deny | grep -E &quot;sshd&quot;; thenecho  &quot;远程访问策略已设置 &quot;elseecho  &quot;远程访问策略未设置 &quot;fiecho --------------------------------------------------------------------------echo  &quot;查看系统SSH远程访问设置策略(hosts.allow允许列表)&quot;if more /etc/hosts.allow | grep -E &quot;sshd: &quot;;more /etc/hosts.allow | grep -E &quot;sshd&quot;; thenecho  &quot;远程访问策略已设置 &quot;elseecho  &quot;远程访问策略未设置 &quot;fiecho &quot;当hosts.allow和 host.deny相冲突时，以hosts.allow设置为准。&quot;echo -------------------------------------------------------------------------echo &quot;查看shell是否设置超时锁定策略&quot;if more /etc/profile | grep -E &quot;TIMEOUT= &quot;; thenecho  &quot;系统设置了超时锁定策略 &quot;elseecho  &quot;未设置超时锁定策略 &quot;fiecho -------------------------------------------------------------------------echo &quot;查看syslog日志审计服务是否开启&quot;if service syslog status | egrep &quot; active \(running&quot;;thenecho &quot;syslog服务已开启&quot;elseecho &quot;syslog服务未开启，建议通过service syslog start开启日志审计功能&quot;fiecho -------------------------------------------------------------------------echo &quot;查看syslog日志是否开启外发&quot;if more /etc/rsyslog.conf | egrep &quot;@...\.|@..\.|@.\.|\*.\* @...\.|\*\.\* @..\.|\*\.\* @.\.&quot;;thenecho &quot;客户端syslog日志已开启外发&quot;elseecho &quot;客户端syslog日志未开启外发&quot;fiecho -------------------------------------------------------------------------echo &quot;查看passwd文件中有哪些特权用户&quot;awk -F: &apos;$3==0 {print $1}&apos; /etc/passwdecho ------------------------------------------------------------------------echo &quot;查看系统中是否存在空口令账户&quot;awk -F: &apos;($2==&quot;!!&quot;) {print $1}&apos; /etc/shadowecho &quot;该结果不适用于Ubuntu系统&quot;echo ------------------------------------------------------------------------echo &quot;查看系统中root用户外连情况&quot;lsof -u root |egrep &quot;ESTABLISHED|SYN_SENT|LISTENING&quot;echo ----------------------------状态解释------------------------------echo &quot;ESTABLISHED的意思是建立连接。表示两台机器正在通信。&quot;echo &quot;LISTENING的&quot;echo &quot;SYN_SENT状态表示请求连接&quot;echo ------------------------------------------------------------------------echo &quot;查看系统中root用户TCP连接情况&quot;lsof -u root |egrep &quot;TCP&quot;echo ------------------------------------------------------------------------echo &quot;查看系统中存在哪些非系统默认用户&quot;echo &quot;root:x:“该值大于500为新创建用户，小于或等于500为系统初始用户”&quot;more /etc/passwd |awk -F &quot;:&quot; &apos;{if($3&gt;500){print &quot;/etc/passwd里面的&quot;$1 &quot;的值为&quot;$3&quot;，请管理员确认该账户是否正常。&quot;}}&apos;echo ------------------------------------------------------------------------echo &quot;检查系统守护进程&quot;more /etc/xinetd.d/rsync | grep -v &quot;^#&quot;echo ------------------------------------------------------------------------echo &quot;检查系统是否存在入侵行为&quot;more /var/log/secure |grep refusedecho ------------------------------------------------------------------------echo &quot;-----------------------检查系统是否存在PHP脚本后门---------------------&quot;if find / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rn 1&gt;/dev/null 2&gt;&amp;1;thenecho &quot;检测到PHP脚本后门&quot;find / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rnfind / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rn |awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/echo &quot;后门样本已拷贝到/tmp/目录&quot;elseecho &quot;未检测到PHP脚本后门&quot;fiecho ------------------------------------------------------------------------echo &quot;-----------------------检查系统是否存在JSP脚本后门---------------------&quot;find / -type f -name *.jsp | xargs egrep -l &quot;InputStreamReader\(this.is\)|W_SESSION_ATTRIBUTE|strFileManag|getHostAddress|wscript.shell|gethostbyname|cmd.exe|documents and settings|system32|serv-u|提权|jspspy|后门&quot; |sort -n|uniq -c |sort -rn 2&gt;&amp;1find / -type f -name *.jsp | xargs egrep -l &quot;InputStreamReader\(this.is\)|W_SESSION_ATTRIBUTE|strFileManag|getHostAddress|wscript.shell|gethostbyname|cmd.exe|documents and settings|system32|serv-u|提权|jspspy|后门&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/  2&gt;&amp;1 echo ------------------------------------------------------------------------echo &quot;----------------------检查系统是否存在HTML恶意代码---------------------&quot;if find / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; 1&gt;/dev/null 2&gt;&amp;1;thenecho &quot;发现HTML恶意代码&quot;find / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; |sort -n|uniq -c |sort -rnfind / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/echo &quot;后门样本已拷贝到/tmp/目录&quot;elseecho &quot;未检测到HTML恶意代码&quot;fiecho &quot;----------------------检查系统是否存在perl恶意程序----------------------&quot;if find / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot; 1&gt;/dev/null 2&gt;&amp;1;thenecho &quot;发现perl恶意程序&quot;find / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot;|sort -n|uniq -c |sort -rnfind / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot;|sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/echo &quot;可疑样本已拷贝到/tmp/目录&quot;elseecho &quot;未检测到perl恶意程序&quot;fiecho &quot;----------------------检查系统是否存在Python恶意程序----------------------&quot;find / -type f -name *.py | xargs egrep -l &quot;execCmd|cat /etc/issue|getAppProc|exploitdb&quot; |sort -n|uniq -c |sort -rnfind / -type f -name *.py | xargs egrep -l &quot;execCmd|cat /etc/issue|getAppProc|exploitdb&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/echo ------------------------------------------------------------------------echo &quot;-----------------------检查系统是否存在恶意程序---------------------&quot;find / -type f -perm -111  |xargs egrep &quot;UpdateProcessER12CUpdateGatesE6C|CmdMsg\.cpp|MiniHttpHelper.cpp|y4&apos;r3 1uCky k1d\!|execve@@GLIBC_2.0|initfini.c|ptmalloc_unlock_all2|_IO_wide_data_2|system@@GLIBC_2.0|socket@@GLIBC_2.0|gettimeofday@@GLIBC_2.0|execl@@GLIBC_2.2.5|WwW.SoQoR.NeT|2.6.17-2.6.24.1.c|Local Root Exploit|close@@GLIBC_2.0|syscall\(\__NR\_vmsplice,|Linux vmsplice Local Root Exploit|It looks like the exploit failed|getting root shell&quot; 2&gt;/dev/nullecho ------------------------------------------------------------------------echo &quot;检查网络连接和监听端口&quot;netstat -an echo &quot;--------------------------路由表、网络连接、接口信息--------------&quot;netstat -rn echo &quot;------------------------查看网卡详细信息--------------------------&quot;ifconfig -a echo ------------------------------------------------------------------------echo &quot;查看正常情况下登录到本机的所有用户的历史记录&quot;lastecho ------------------------------------------------------------------------echo &quot;检查系统中core文件是否开启&quot;ulimit -cecho &quot;core是unix系统的内核。当你的程序出现内存越界的时候,操作系统会中止你的进程,并将当前内存状态倒出到core文件中,以便进一步分析，如果返回结果为0，则是关闭了此功能，系统不会生成core文件&quot;echo ------------------------------------------------------------------------echo &quot;检查系统中关键文件修改时间&quot;ls -ltr /bin/ls /bin/login /etc/passwd /bin/ps /usr/bin/top /etc/shadow|awk &apos;{print &quot;文件名：&quot;$8&quot;  &quot;&quot;最后修改时间：&quot;$6&quot; &quot;$7}&apos;echo &quot;ls文件：是存储ls命令的功能函数，被删除以后，就无法执行ls命令，黑客可利用篡改ls文件来执行后门或其他程序。login文件：login是控制用户登录的文件，一旦被篡改或删除，系统将无法切换用户或登陆用户user/bin/passwd是一个命令，可以为用户添加、更改密码，但是，用户的密码并不保存在/etc/passwd当中，而是保存在了/etc/shadow当中etc/passwd是一个文件，主要是保存用户信息。sbin/portmap是文件转换服务，缺少该文件后，无法使用磁盘挂载、转换类型等功能。bin/ps 进程查看命令功能支持文件，文件损坏或被更改后，无法正常使用ps命令。usr/bin/top  top命令支持文件，是Linux下常用的性能分析工具,能够实时显示系统中各个进程的资源占用状况。etc/shadow shadow 是 /etc/passwd 的影子文件，密码存放在该文件当中，并且只有root用户可读。&quot;echo --------------------------------------------------------------------------echo &quot;-------------------查看系统日志文件是否存在--------------------&quot;log=/var/log/sysloglog2=/var/log/messagesif [ -e &quot;$log&quot; ]; thenecho  &quot;syslog日志文件存在！ &quot;elseecho  &quot;/var/log/syslog日志文件不存在！ &quot;fiif [ -e &quot;$log2&quot; ]; thenecho  &quot;/var/log/messages日志文件存在！ &quot;elseecho  &quot;/var/log/messages日志文件不存在！ &quot;fiecho --------------------------------------------------------------------------echo &quot;检查系统文件完整性2(MD5检查)&quot;echo &quot;该项会获取部分关键文件的MD5值并入库，默认保存在/etc/md5db中&quot;echo &quot;如果第一次执行，则会提示md5sum: /sbin/portmap: 没有那个文件或目录&quot;echo &quot;第二次重复检查时，则会对MD5DB中的MD5值进行匹配，来判断文件是否被更改过&quot;file=&quot;/etc/md5db&quot;if [ -e &quot;$file&quot; ]; then md5sum -c /etc/md5db 2&gt;&amp;1; else md5sum /etc/passwd &gt;&gt;/etc/md5dbmd5sum /etc/shadow &gt;&gt;/etc/md5dbmd5sum /etc/group &gt;&gt;/etc/md5dbmd5sum /usr/bin/passwd &gt;&gt;/etc/md5dbmd5sum /sbin/portmap&gt;&gt;/etc/md5dbmd5sum /bin/login &gt;&gt;/etc/md5dbmd5sum /bin/ls &gt;&gt;/etc/md5dbmd5sum /bin/ps &gt;&gt;/etc/md5dbmd5sum /usr/bin/top &gt;&gt;/etc/md5db;fiecho ----------------------------------------------------------------------echo &quot;------------------------主机性能检查--------------------------------&quot;echo &quot;CPU检查&quot;dmesg | grep -i cpuecho -----------------------------------------------------------------------more /proc/cpuinfoecho -----------------------------------------------------------------------echo &quot;内存状态检查&quot;vmstat 2 5echo -----------------------------------------------------------------------more /proc/meminfoecho -----------------------------------------------------------------------free -mecho -----------------------------------------------------------------------echo &quot;文件系统使用情况&quot;df -hecho -----------------------------------------------------------------------echo &quot;网卡使用情况&quot;lspci -tvecho ----------------------------------------------------------------------echo &quot;查看僵尸进程&quot;ps -ef | grep zombieecho ----------------------------------------------------------------------echo &quot;耗CPU最多的进程&quot;ps auxf |sort -nr -k 3 |head -5echo ----------------------------------------------------------------------echo &quot;耗内存最多的进程&quot;ps auxf |sort -nr -k 4 |head -5echo ----------------------------------------------------------------------echo ---------------------------------------------------------------------echo &quot;COPY RIGHT &quot;echo &quot;QQ：&quot;echo ----------------------结束时间为-------------------------------------DATE=`date`echo &quot;Date is $DATE&quot;echo ----------------------------------------------------------------------</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="shell" scheme="https://architectang.github.io/categories/Linux/shell/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="shell" scheme="https://architectang.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>jira 安装</title>
    <link href="https://architectang.github.io/2019/05/21/jira%E5%AE%89%E8%A3%85/"/>
    <id>https://architectang.github.io/2019/05/21/jira安装/</id>
    <published>2019-05-21T07:09:04.000Z</published>
    <updated>2019-05-21T07:52:52.215Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><h4 id="一、jira环境需求"><a href="#一、jira环境需求" class="headerlink" title="一、jira环境需求"></a>一、jira环境需求</h4><p>system： Linux</p><p>memory： 2GB</p><p>Mysql数据库</p><p>Jdk jdk-8u92-linux-x64.rpm</p><p>Jira atlassian-jira-6.4.12-x64</p><p>Jira + 数据库连接插件mysql-connector-java-5.1.36-bin</p><p>部署前机器的内存至少为2GB.否则会出现如下错误：</p><p><img src="https://i.loli.net/2019/05/21/5ce3a50c9a7c063889.png" alt="1.png"></p><h4 id="二、安装部署"><a href="#二、安装部署" class="headerlink" title="二、安装部署"></a>二、安装部署</h4><p>部署前配置 关闭iptables和selinux</p><p>service iptables stop &amp;&amp; setenforce 0</p><p><img src="https://i.loli.net/2019/05/21/5ce3a5b347fb286893.png" alt="2.png"></p><p>2.1 jdk安装</p><p><img src="https://i.loli.net/2019/05/21/5ce3a5bd32b9498242.png" alt="3.png"></p><p>查看版本号 jdk安装完毕</p><p><img src="https://i.loli.net/2019/05/21/5ce3a5f64c72b78997.png" alt="4.png"></p><p>2.2 安装mysql数据库（如果有的可以跳过安装这一步）采用的是yum安装</p><p>yum install <a href="http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm" target="_blank" rel="noopener">http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm</a></p><p><img src="https://i.loli.net/2019/05/21/5ce3a62b49dd383541.png" alt="5.png"></p><p>yum install Percona-Server-server-56</p><p><img src="https://i.loli.net/2019/05/21/5ce3a6e6b7f9313899.png" alt="6.png"></p><p>初始化mysql数据库，创建账户并赋予链接权限<br><img src="https://i.loli.net/2019/05/21/5ce3a6e6e8b3e54323.png" alt="7.png"></p><p>创建jira库和jira用户</p><pre><code>create database jiradb character set utf8;grant select,insert,update,delete,create,drop,alter,index on jiradb.* to &apos;jira&apos;@&apos;localhost&apos; identified by &apos;jira&apos;;flush privileges;</code></pre><p><img src="https://i.loli.net/2019/05/21/5ce3a738b461110973.png" alt="8.png"></p><p>退出，使用jira账户进行登陆测试</p><pre><code>mysql –ujira –p</code></pre><p><img src="https://i.loli.net/2019/05/21/5ce3a772f2b4830067.png" alt="9.png"></p><p>下载mysql-connector-java-5.1.39.tar.gz 连接</p><p>2.3 安装jira</p><p>上传jira文件</p><p><img src="https://i.loli.net/2019/05/21/5ce3a7e034ce891378.png" alt="10.png"></p><p>Chmod +x</p><p>./</p><p><img src="https://i.loli.net/2019/05/21/5ce3a830932c224886.png" alt="11.png"></p><p>Jira web访问端口为8080</p><p><img src="https://i.loli.net/2019/05/21/5ce3a85a0ec1b20574.png" alt="12.png"></p><p>由于jira默认是不支持使用mysql数据库的，如果用mysql的话就得把链接插件放到以下目录，并重启jira</p><p>上传mysql – jira 连接插件</p><p>cd /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</p><p><img src="https://i.loli.net/2019/05/21/5ce3a87716ff631694.png" alt="13.png"></p><p>上传文件</p><p>cd /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</p><p><img src="https://i.loli.net/2019/05/21/5ce3a8aba031e19353.png" alt="14.png"></p><p>上传中文语言包</p><p><img src="https://i.loli.net/2019/05/21/5ce3a8d45564756840.png" alt="15.png"></p><p>删除 cd /var/atlassian/application-data/jira/</p><p><img src="https://i.loli.net/2019/05/21/5ce3a8f8d98a798813.png" alt="16.png"></p><p>打开浏览器，开始设置向导</p><p>连接数据库</p><p><img src="https://i.loli.net/2019/05/21/5ce3a923ded2684231.png" alt="18.png"></p><p>选择模式</p><p><img src="https://i.loli.net/2019/05/21/5ce3a923e9c8d34126.png" alt="17.png"></p><p>装的过程中需要在官网获取试用序列号，然后进行破解！！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="jira" scheme="https://architectang.github.io/categories/Linux/jira/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="jira" scheme="https://architectang.github.io/tags/jira/"/>
    
  </entry>
  
  <entry>
    <title>Zimbra 邮箱系统安装</title>
    <link href="https://architectang.github.io/2019/05/21/zimbra%20%E5%AE%89%E8%A3%85/"/>
    <id>https://architectang.github.io/2019/05/21/zimbra 安装/</id>
    <published>2019-05-21T06:46:09.000Z</published>
    <updated>2019-05-21T09:28:25.403Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><h4 id="1、Zimbra介绍"><a href="#1、Zimbra介绍" class="headerlink" title="1、Zimbra介绍"></a>1、Zimbra介绍</h4><p>Zimbra与众不同的特点是其“Zimlet”网络服务提供了更多的电子邮件功能。例如，人们可以简单地用鼠标点击电子邮件程序中的航班信息以检查航班的状况。用户还可以在电子邮件中跟踪FedEx公司的投递情况并且获得地图、股票和其它信息。<br>Zimbra的核心产品是Zimbra协作套件（Zimbra Collaboration Suite，简称ZCS）。除了它的核心功能是电子邮件和日程安排服务器，当然还包括许多其它的功能，就象是下一代的微软Exchange。在电子邮件和日程安排之外，它还提供文档存储和编辑、即时消息以及一个利用获奖技术开发的全功能的管理控制台。ZCS同时也提供移动设备的支持，以及与部署于Windows、Linux或apple操作系统中的桌面程序的同步功能。<br>(来自百度百科)<br>注:Zimbra安装时，须在linux系统上，系统内存至少一个GB，5G磁盘空间；否则安装过程会很长，且会因为内存和磁盘空间不够而导致安装失败</p><h4 id="2、安装配置DNS"><a href="#2、安装配置DNS" class="headerlink" title="2、安装配置DNS"></a>2、安装配置DNS</h4><p>1、安装配置DNS<br>配置vim /etc/named.conf #修改一下内容<br><img src="https://i.loli.net/2019/05/21/5ce399976d36266031.png" alt="1.png"></p><p>配置 vim /etc/named.rfc1912.zones #添加以下内容<br><img src="https://i.loli.net/2019/05/21/5ce399cede1a073321.png" alt="2.png"></p><p>配置正向解析文件解析文件</p><p>cd /var/named</p><p>cp named.localhost tzh.com.zone</p><p>vim tzh.com.zone</p><p><img src="https://i.loli.net/2019/05/21/5ce39a17a933a68587.png" alt="3.png"><br><img src="https://i.loli.net/2019/05/21/5ce39a28e3a9d67375.png" alt="4.png"></p><p>配置反向解析文件 #添加以下内容</p><p>vim 10.90.10.zone</p><p><img src="https://i.loli.net/2019/05/21/5ce39a5bf2d7176327.png" alt="5.png"></p><p>启动bind</p><p>service named start</p><p><img src="https://i.loli.net/2019/05/21/5ce39ab264d3675763.png" alt="6.png"></p><p>解析</p><p>nslookup <a href="http://www.tzh.com" target="_blank" rel="noopener">www.tzh.com</a></p><p>nslookup mail.tzh.com</p><p><img src="https://i.loli.net/2019/05/21/5ce39af0bc0d028773.png" alt="7.png"></p><p><img src="https://i.loli.net/2019/05/21/5ce39b135ee4c81652.png" alt="8.png"></p><h4 id="3、安装zimbra"><a href="#3、安装zimbra" class="headerlink" title="3、安装zimbra"></a>3、安装zimbra</h4><p>3.1、停止系统默认邮件服务</p><p>Chkconfig postfix off &amp;&amp; /etc/init.d/postfix stop</p><p>3.2、关闭iptables和selinux</p><p>setenforce 0 &amp;&amp; service iptables stop &amp;&amp; chkconfig iptables off</p><p>3.3、设置hosts文件 #添加以下内容</p><p><img src="https://i.loli.net/2019/05/21/5ce39bdc8542b69089.png" alt="9.png"></p><p>3.4、 安装</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><p>[root@tzh zcs-8.6.0_GA_1153.RHEL6_64.20141215151155]# ./install.sh<br>Operations logged to /tmp/install.log.29747<br>Checking for existing installation…<br>zimbra-ldap…NOT FOUND<br>zimbra-logger…NOT FOUND<br>zimbra-mta…NOT FOUND<br>zimbra-dnscache…NOT FOUND<br>zimbra-snmp…NOT FOUND<br>zimbra-store…NOT FOUND<br>zimbra-apache…NOT FOUND<br>zimbra-spell…NOT FOUND<br>zimbra-convertd…NOT FOUND<br>zimbra-memcached…NOT FOUND<br>zimbra-proxy…NOT FOUND<br>zimbra-archiving…NOT FOUND<br>zimbra-core…NOT FOUND<br>PLEASE READ THIS AGREEMENT CAREFULLY BEFORE USING THE SOFTWARE.<br>ZIMBRA, INC. (“ZIMBRA”) WILL ONLY LICENSE THIS SOFTWARE TO YOU IF YOU<br>FIRST ACCEPT THE TERMS OF THIS AGREEMENT. BY DOWNLOADING OR INSTALLING<br>THE SOFTWARE, OR USING THE PRODUCT, YOU ARE CONSENTING TO BE BOUND BY<br>THIS AGREEMENT. IF YOU DO NOT AGREE TO ALL OF THE TERMS OF THIS<br>AGREEMENT, THEN DO NOT DOWNLOAD, INSTALL OR USE THE PRODUCT.<br>License Terms for the Zimbra Collaboration Suite:<br><a href="http://www.zimbra.com/license/zimbra-public-eula-2-5.html" target="_blank" rel="noopener">http://www.zimbra.com/license/zimbra-public-eula-2-5.html</a><br>Do you agree with the terms of the software license agreement? [N] y<br>Checking for prerequisites…<br>FOUND: NPTL<br>FOUND: nc-1.84-24<br>FOUND: sudo-1.8.6p3-19<br>FOUND: libidn-1.18-2<br>FOUND: gmp-4.3.1-7<br>FOUND: libaio-0.3.107-10<br>FOUND: libstdc++-4.4.7-16<br>FOUND: unzip-6.0-2<br>Checking for suggested prerequisites…<br>FOUND: perl-5.10.1<br>FOUND: sysstat<br>FOUND: sqlite<br>Prerequisite check complete.<br>Checking for installable packages<br>Found zimbra-core<br>Found zimbra-ldap<br>Found zimbra-logger<br>Found zimbra-mta<br>Found zimbra-dnscache<br>Found zimbra-snmp<br>Found zimbra-store<br>Found zimbra-apache<br>Found zimbra-spell<br>Found zimbra-memcached<br>Found zimbra-proxy<br>Select the packages to install<br>Install zimbra-ldap [Y] y<br>Install zimbra-logger [Y] y<br>Install zimbra-mta [Y] y<br>Install zimbra-dnscache [Y] y<br>Install zimbra-snmp [Y] y<br>Install zimbra-store [Y] y<br>Install zimbra-apache [Y]<br>Install zimbra-spell [Y] y<br>Install zimbra-memcached [Y] y<br>Install zimbra-proxy [Y] y<br>Checking required space for zimbra-core<br>Checking space for zimbra-store<br>Checking required packages for zimbra-store<br>zimbra-store package check complete.<br>Installing:<br>zimbra-core<br>zimbra-ldap<br>zimbra-logger<br>zimbra-mta<br>zimbra-dnscache<br>zimbra-snmp<br>zimbra-store<br>zimbra-apache<br>zimbra-spell<br>zimbra-memcached<br>zimbra-proxy<br>The system will be modified. Continue? [N] y<br>Removing /opt/zimbra<br>Removing zimbra crontab entry…done.<br>Cleaning up zimbra init scripts…done.<br>Cleaning up /etc/ld.so.conf…done.<br>Cleaning up /etc/prelink.conf…done.<br>Cleaning up /etc/security/limits.conf…done.<br>Finished removing Zimbra Collaboration Server.<br>Installing packages<br>zimbra-core……zimbra-core-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…<br>zimbra-ldap……zimbra-ldap-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-logger……zimbra-logger-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-mta……zimbra-mta-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-dnscache……zimbra-dnscache-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-snmp……zimbra-snmp-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-store……zimbra-store-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-apache……zimbra-apache-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-spell……zimbra-spell-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-memcached……zimbra-memcached-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>zimbra-proxy……zimbra-proxy-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done<br>Operations logged to /tmp/zmsetup06292016-184521.log<br>Installing LDAP configuration database…done.<br>Setting defaults… MX: mail.user-mail.net (54.227.254.216)<br>MX: mail.user-mail.net (54.225.221.198)<br>Interface: 10.90.10.190<br>Interface: 127.0.0.1<br>Interface: ::1<br>54.225.221.198<br>54.227.254.216<br>54.227.254.216<br>54.225.221.198<br>54.225.221.198<br>54.227.254.216<br>DNS ERROR - none of the MX records for mail.tzh.com<br>resolve to this host<br>Change domain name? [Yes] n<br>done.<br>Checking for port conflicts<br>Main menu<br>1) Common Configuration:<br>2) zimbra-ldap: Enabled<br>3) zimbra-logger: Enabled<br>4) zimbra-mta: Enabled<br>5) zimbra-dnscache: Enabled<br>6) zimbra-snmp: Enabled<br>7) zimbra-store: Enabled<br>+Create Admin User: yes<br>+Admin user to create: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a><br><strong>***</strong> +Admin Password UNSET<br>+Anti-virus quarantine user: <a href="mailto:virus-quarantine.iv8_lcko@mail.tzh.com" target="_blank" rel="noopener">virus-quarantine.iv8_lcko@mail.tzh.com</a><br>+Enable automated spam training: yes<br>+Spam training user: <a href="mailto:spam.f8aglxrf@mail.tzh.com" target="_blank" rel="noopener">spam.f8aglxrf@mail.tzh.com</a><br>+Non-spam(Ham) training user: <a href="mailto:ham.ugur2xpeby@mail.tzh.com" target="_blank" rel="noopener">ham.ugur2xpeby@mail.tzh.com</a><br>+SMTP host: mail.tzh.com<br>+Web server HTTP port: 8080<br>+Web server HTTPS port: 8443<br>+Web server mode: https<br>+IMAP server port: 7143<br>+IMAP server SSL port: 7993<br>+POP server port: 7110<br>+POP server SSL port: 7995<br>+Use spell check server: yes<br>+Spell server URL: <a href="http://mail.tzh.com:7780/aspell.php" target="_blank" rel="noopener">http://mail.tzh.com:7780/aspell.php</a><br>+Enable version update checks: TRUE<br>+Enable version update notifications: TRUE<br>+Version update notification email: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a><br>+Version update source email: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a><br>+Install mailstore (service webapp): yes<br>+Install UI (zimbra,zimbraAdmin webapps): yes<br>8) zimbra-spell: Enabled<br>9) zimbra-proxy: Enabled<br>10) Default Class of Service Configuration:<br>s) Save config to file<br>x) Expand menu<br>q) Quit<br>Address unconfigured (<strong>) items (? - help) 7<br>Store configuration<br>1) Status: Enabled<br>2) Create Admin User: yes<br>3) Admin user to create: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a> </strong>4) Admin Password UNSET<br>5) Anti-virus quarantine user: <a href="mailto:virus-quarantine.iv8_lcko@mail.tzh.com" target="_blank" rel="noopener">virus-quarantine.iv8_lcko@mail.tzh.com</a><br>6) Enable automated spam training: yes<br>7) Spam training user: <a href="mailto:spam.f8aglxrf@mail.tzh.com" target="_blank" rel="noopener">spam.f8aglxrf@mail.tzh.com</a><br>8) Non-spam(Ham) training user: <a href="mailto:ham.ugur2xpeby@mail.tzh.com" target="_blank" rel="noopener">ham.ugur2xpeby@mail.tzh.com</a><br>9) SMTP host: mail.tzh.com<br>10) Web server HTTP port: 8080<br>11) Web server HTTPS port: 8443<br>12) Web server mode: https<br>13) IMAP server port: 7143<br>14) IMAP server SSL port: 7993<br>15) POP server port: 7110<br>16) POP server SSL port: 7995<br>17) Use spell check server: yes<br>18) Spell server URL: <a href="http://mail.tzh.com:7780/aspell.php" target="_blank" rel="noopener">http://mail.tzh.com:7780/aspell.php</a><br>19) Enable version update checks: TRUE<br>20) Enable version update notifications: TRUE<br>21) Version update notification email: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a><br>22) Version update source email: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a><br>23) Install mailstore (service webapp): yes<br>24) Install UI (zimbra,zimbraAdmin webapps): yes<br>Select, or ‘r’ for previous menu [r] 4<br>Password for <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a> (min 6 characters): [1mrCHrfp] 558842<br>Store configuration<br>1) Status: Enabled<br>2) Create Admin User: yes<br>3) Admin user to create: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a><br>4) Admin Password set<br>5) Anti-virus quarantine user: <a href="mailto:virus-quarantine.iv8_lcko@mail.tzh.com" target="_blank" rel="noopener">virus-quarantine.iv8_lcko@mail.tzh.com</a><br>6) Enable automated spam training: yes<br>7) Spam training user: <a href="mailto:spam.f8aglxrf@mail.tzh.com" target="_blank" rel="noopener">spam.f8aglxrf@mail.tzh.com</a><br>8) Non-spam(Ham) training user: <a href="mailto:ham.ugur2xpeby@mail.tzh.com" target="_blank" rel="noopener">ham.ugur2xpeby@mail.tzh.com</a><br>9) SMTP host: mail.tzh.com<br>10) Web server HTTP port: 8080<br>11) Web server HTTPS port: 8443<br>12) Web server mode: https<br>13) IMAP server port: 7143<br>14) IMAP server SSL port: 7993<br>15) POP server port: 7110<br>16) POP server SSL port: 7995<br>17) Use spell check server: yes<br>18) Spell server URL: <a href="http://mail.tzh.com:7780/aspell.php" target="_blank" rel="noopener">http://mail.tzh.com:7780/aspell.php</a><br>19) Enable version update checks: TRUE<br>20) Enable version update notifications: TRUE<br>21) Version update notification email: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a><br>22) Version update source email: <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a><br>23) Install mailstore (service webapp): yes<br>24) Install UI (zimbra,zimbraAdmin webapps): yes<br>Select, or ‘r’ for previous menu [r] r<br>Main menu<br>1) Common Configuration:<br>2) zimbra-ldap: Enabled<br>3) zimbra-logger: Disabled<br>4) zimbra-mta: Enabled<br>5) zimbra-dnscache: Enabled<br>6) zimbra-snmp: Enabled<br>7) zimbra-store: Enabled<br>8) zimbra-spell: Enabled<br>9) zimbra-proxy: Enabled<br>10) Default Class of Service Configuration:<br>s) Save config to file<br>x) Expand menu<br>q) Quit<br>Select from menu, or press ‘a’ to apply config (? - help) a<br>Save configuration data to a file? [Yes] y<br>Save config in file: [/opt/zimbra/config.39633]<br>Saving config in /opt/zimbra/config.39633…done.<br>The system will be modified - continue? [No] y<br>Operations logged to /tmp/zmsetup06292016-184521.log<br>Setting local config values…done.<br>Initializing core config…Setting up CA…done.<br>Deploying CA to /opt/zimbra/conf/ca …done.<br>Creating SSL zimbra-store certificate…done.<br>Creating new zimbra-ldap SSL certificate…done.<br>Creating new zimbra-mta SSL certificate…done.<br>Creating new zimbra-proxy SSL certificate…done.<br>Installing mailboxd SSL certificates…done.<br>Installing MTA SSL certificates…done.<br>Installing LDAP SSL certificate…done.<br>Installing Proxy SSL certificate…done.<br>Initializing ldap…done.<br>Setting replication password…done.<br>Setting Postfix password…done.<br>Setting amavis password…done.<br>Setting nginx password…done.<br>Setting BES searcher password…done.<br>Creating server entry for mail.tzh.com…done.<br>Setting Zimbra IP Mode…done.<br>Saving CA in ldap …done.<br>Saving SSL Certificate in ldap …done.<br>Setting spell check URL…done.<br>Setting service ports on mail.tzh.com…done.<br>Setting zimbraFeatureTasksEnabled=TRUE…done.<br>Setting zimbraFeatureBriefcasesEnabled=TRUE…done.<br>Setting Master DNS IP address(es)…done.<br>Setting DNS cache tcp lookup preference…done.<br>Setting DNS cache udp lookup preference…done.<br>Setting DNS tcp upstream preference…done.<br>Setting TimeZone Preference…done.<br>Initializing mta config…done.<br>Setting services on mail.tzh.com…done.<br>Adding mail.tzh.com to zimbraMailHostPool in default COS…done.<br>Creating domain mail.tzh.com…done.<br>Setting default domain name…done.<br>Creating domain mail.tzh.com…already exists.<br>Creating admin account <a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a>…done.<br>Creating root alias…done.<br>Creating postmaster alias…done.<br>Creating user <a href="mailto:spam.f8aglxrf@mail.tzh.com" target="_blank" rel="noopener">spam.f8aglxrf@mail.tzh.com</a>…done.<br>Creating user <a href="mailto:ham.ugur2xpeby@mail.tzh.com" target="_blank" rel="noopener">ham.ugur2xpeby@mail.tzh.com</a>…done.<br>Creating user <a href="mailto:virus-quarantine.iv8_lcko@mail.tzh.com" target="_blank" rel="noopener">virus-quarantine.iv8_lcko@mail.tzh.com</a>…done.<br>Setting spam training and Anti-virus quarantine accounts…done.<br>Initializing store sql database…done.<br>Setting zimbraSmtpHostname for mail.tzh.com…done.<br>Configuring SNMP…done.<br>Setting up syslog.conf…done.<br>Starting servers…<br>Installing common zimlets…<br>com_zimbra_ymemoticons…done.<br>com_zimbra_clientuploader…done.<br>com_zimbra_webex…done.<br>com_zimbra_proxy_config…done.<br>com_zimbra_srchhighlighter…done.<br>com_zimbra_bulkprovision…done.<br>com_zimbra_viewmail…done.<br>com_zimbra_date…done.<br>com_zimbra_attachcontacts…done.<br>com_zimbra_mailarchive…done.<br>com_zimbra_cert_manager…done.<br>com_zimbra_url…done.<br>com_zimbra_adminversioncheck…done.<br>com_zimbra_attachmail…done.<br>com_zimbra_tooltip…done.<br>com_zimbra_email…done.<br>com_zimbra_phone…done.<br>Finished installing common zimlets.<br>Restarting mailboxd…done.<br>Creating galsync account for default domain…done.<br>You have the option of notifying Zimbra of your installation.<br>This helps us to track the uptake of the Zimbra Collaboration Server.<br>The only information that will be transmitted is:<br>The VERSION of zcs installed (8.6.0_GA_1153_RHEL6_64)<br>The ADMIN EMAIL ADDRESS created (<a href="mailto:admin@mail.tzh.com" target="_blank" rel="noopener">admin@mail.tzh.com</a>)<br>Notify Zimbra of your installation? [Yes] yes<br>Notifying Zimbra of installation via <a href="http://www.zimbra.com/cgi-bin/notify.cgi?VER=8.6.0_GA_1153_RHEL6_64&amp;MAIL=admin@mail.tzh.com" target="_blank" rel="noopener">http://www.zimbra.com/cgi-bin/notify.cgi?VER=8.6.0_GA_1153_RHEL6_64&amp;MAIL=admin@mail.tzh.com</a><br>Notification complete<br>Setting up zimbra crontab…done.<br>Moving /tmp/zmsetup06292016-184521.log to /opt/zimbra/log<br>Configuration complete - press return to exit</p></div></div><p>3.5、重启zimbra</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><p>[root@tzh zcs-8.6.0_GA_1153.RHEL6_64.20141215151155]# /etc/init.d/zimbra restart<br>Host mail.tzh.com<br>Stopping vmware-ha…skipped.<br>/opt/zimbra/bin/zmhactl missing or not executable.<br>Stopping zmconfigd…Done.<br>Stopping zimlet webapp…Done.<br>Stopping zimbraAdmin webapp…Done.<br>Stopping zimbra webapp…Done.<br>Stopping service webapp…Done.<br>Stopping stats…Done.<br>Stopping mta…Done.<br>Stopping spell…Done.<br>Stopping snmp…Done.<br>Stopping cbpolicyd…Done.<br>Stopping archiving…Done.<br>Stopping opendkim…Done.<br>Stopping amavis…Done.<br>Stopping antivirus…Done.<br>Stopping antispam…Done.<br>Stopping proxy…Done.<br>Stopping memcached…Done.<br>Stopping mailbox…Done.<br>Stopping logger…Done.<br>Stopping dnscache…Done.<br>Stopping ldap…Done.<br>Host mail.tzh.com<br>Starting ldap…Done.<br>略~~~</p></div></div><h4 id="4、服务发件测试"><a href="#4、服务发件测试" class="headerlink" title="4、服务发件测试"></a>4、服务发件测试</h4><p>4.1 登陆测试<br><img src="https://i.loli.net/2019/05/21/5ce39ccd649ef46070.png" alt="10.png"></p><p>创建一个账户，进行邮件发送测试</p><p>账户创建</p><p><img src="https://i.loli.net/2019/05/21/5ce39d832af7665540.png" alt="11.png"></p><p>登陆网页客户端进行邮件发送测试</p><p>注：上图时间为周三（6月29）下午17：29是因为我在本地搭建的虚拟机，时间没有同步<br>因为域名问题，以及DNS在内网的虚拟机上，收取邮件是无法收取的，需要做公网解析，所以暂不进行邮件收取测试</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="zimbra" scheme="https://architectang.github.io/categories/Linux/zimbra/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="zimbra" scheme="https://architectang.github.io/tags/zimbra/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix 缓存数据清理</title>
    <link href="https://architectang.github.io/2019/05/17/Zabbix-%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86/"/>
    <id>https://architectang.github.io/2019/05/17/Zabbix-缓存数据清理/</id>
    <published>2019-05-17T06:32:24.000Z</published>
    <updated>2019-05-17T06:38:45.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><p>zabbix监控运行一段时间以后，会留下大量的历史监控数据，zabbix数据库一直在增大；可能会造成系统性能下降，查看历史数据室查询速度缓慢。</p><p>zabbix里面最大的表就是history和history_uint两个表，而且zabbix里面的时间是使用的时间戳方式记录，所以可以根据时间戳来删除历史数据<br><a id="more"></a><br>一、关闭zabbix、http服务</p><pre><code>pkill -9 zabbixservice httpd stop</code></pre><p>二、清理zabbix历史数据</p><p>1、查看数据库目录文件</p><pre><code>[root@zabbix-server zabbix]# cd /var/lib/mysql/zabbix/[root@zabbix-server zabbix]# ls -lh | grep Gtotal 177G-rw-r----- 1 mysql mysql 1.7G Dec 24 13:49 events.ibd-rw-r----- 1 mysql mysql  60G Dec 24 13:49 history.ibd-rw-r----- 1 mysql mysql 2.4G Dec 24 13:49 history_str.ibd-rw-r----- 1 mysql mysql  99G Dec 24 13:49 history_uint.ibd-rw-r----- 1 mysql mysql 4.6G Dec 24 13:02 trends.ibd-rw-r----- 1 mysql mysql 9.5G Dec 24 13:49 trends_uint.ibd[root@zabbix-server zabbix]# </code></pre><p>生成Unix时间戳。时间定为2018年2月1日（暂定是保存18年2月以后的监控数据）</p><pre><code>[root@zabbix-server zabbix]# date +%s -d &quot;Feb 1, 2018 00:00:00&quot;    #执行此命令以后会生成一个ID 1517414400   #这是生成的ID</code></pre><p>2、数据备份</p><pre><code>[root@zabbix-server zabbix]#mysql -uroot -p zabbix &gt; /root/mysqlback/zabbix.sql     #需要创建mysqlback目录</code></pre><p>3、 登录数据库</p><pre><code>[root@zabbix-server zabbix]# mysql -uroot -pEnter password: Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 7Server version: 5.5.60-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MariaDB [(none)]&gt; use zabbix;    #选择zabbix数据库</code></pre><p>执行sql查看指定日期之前的数据大小：</p><pre><code>SELECT table_schema as `Database`,table_name AS `Table`,round(((data_length + index_length) / 1024 / 1024 / 1024), 2) `Size in MB`FROM information_schema.TABLES where CREATE_TIME &lt; &apos;2018-02-01 00:00:00&apos; and table_name=&apos;history.ibd&apos;;</code></pre><p>根据需要修改日期和查询的表名称(如果查询出来的结果是0.0，需要将sql中的三个1024删除一个，以G为单位显示)</p><p>4、 执行以下命令，清理指定时间之前的数据、对zabbix数据库执行以下sql</p><pre><code>delete from history where clock &lt; 1517414400;optimize table history;delete from history_uint where clock &lt; 1517414400;optimize table history_uint;delete from trends where clock &lt; 1517414400;optimize table trends;delete from trends_uint where clock &lt; 1517414400;optimize table trends_uint;</code></pre><p>注意：sql中的ID是生成Unix时间戳的ID号,需要改为自己生成的ID号<br>三、启动服务</p><pre><code>/usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf    #zabbix server/usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf    #zabbix agentservice httpd start</code></pre><p>===============================分===========隔==========符===================================</p><p>1、使用truncate命令清空zabbix 所有监控数据</p><pre><code>-------------------------------------------------------truncate table history;optimize table history;------------------------------------------------------- truncate table history_str;optimize table history_str;-------------------------------------------------------truncate table history_uint;optimize table history_uint;-------------------------------------------------------truncate table trends;optimize table trends;-------------------------------------------------------truncate table trends_uint; optimize table trends_uint; -------------------------------------------------------truncate table events;optimize table events;-------------------------------------------------------</code></pre><p>注意：这些命令会把zabbix所有的监控数据清空，操作前注意备份数据库</p><p>truncate是删除了表，然后根据表结构重新建立，delete删除的是记录的数据没有修改表</p><p>truncate执行删除比较快，但是在事务处理安全性方面不如delete,如果我们执行truncat的表正在处理事务，这个命令退出并会产生错误信息</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;zabbix监控运行一段时间以后，会留下大量的历史监控数据，zabbix数据库一直在增大；可能会造成系统性能下降，查看历史数据室查询速度缓慢。&lt;/p&gt;&lt;p&gt;zabbix里面最大的表就是history和history_uint两个表，而且zabbix里面的时间是使用的时间戳方式记录，所以可以根据时间戳来删除历史数据&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="zabbix" scheme="https://architectang.github.io/categories/Linux/zabbix/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="zabbix" scheme="https://architectang.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Redis 故障恢复</title>
    <link href="https://architectang.github.io/2019/05/17/Redis-%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D/"/>
    <id>https://architectang.github.io/2019/05/17/Redis-故障恢复/</id>
    <published>2019-05-17T06:25:37.000Z</published>
    <updated>2019-05-17T06:50:05.988Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><p>案例一、<br>ResponseError: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk.<br><a id="more"></a><br>Commands that may modify the data set are disabled. Please check Redis logs for details about the error.<br>Redis被配置为保存数据库快照，但它目前不能持久化到硬盘。用来修改集合数据的命令不能用。请查看Redis日志的详细错误信息。<br>原因：强制关闭redis快照导致不能持久化</p><p>解决方案：<br>将：stop-writes-on-bgsave-error 设置为 no</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;案例一、&lt;br&gt;ResponseError: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk.&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="redis" scheme="https://architectang.github.io/categories/Linux/redis/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="redis" scheme="https://architectang.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>批量ping存活主机</title>
    <link href="https://architectang.github.io/2019/05/17/%E6%89%B9%E9%87%8Fping%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA/"/>
    <id>https://architectang.github.io/2019/05/17/批量ping存活主机/</id>
    <published>2019-05-17T04:50:22.000Z</published>
    <updated>2019-05-17T05:05:50.378Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><p>创建一个ip.txt文件，把需要测试IP地址写入文档</p><p><img src="https://i.loli.net/2019/05/17/5cde3e1a07bca53225.png" alt="1.png"></p><a id="more"></a><p>创建一个ping.sh 的shell 脚本，并修改ip.txt 文件路径</p><pre><code>#!/bin/bashfor ips in `cat /root/manager/script/ip.txt`do        result=`ping -w 2 -c 3 ${ips} | grep packet | awk -F&quot; &quot; &apos;{print $6}&apos;| awk -F&quot;%&quot; &apos;{print $1}&apos;| awk -F&apos; &apos; &apos;{print $1}&apos;`        if [ $result -eq 0 ]; then                echo &quot;&quot;${ips}&quot; is ok !&quot;        else                echo &quot;&quot;${ips}&quot; is not connected .....&quot;        fidone</code></pre><p>给脚本执行权限 chmod +x ping.sh</p><p>执行脚本</p><pre><code>[root@k8s-node1 script]# ./ping.sh 172.31.8.101 is ok !172.31.8.192 is ok !172.31.8.42 is ok !172.31.8.176 is ok !172.31.8.45 is ok ![root@k8s-node1 script]# </code></pre><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;创建一个ip.txt文件，把需要测试IP地址写入文档&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/17/5cde3e1a07bca53225.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="shell" scheme="https://architectang.github.io/categories/Linux/shell/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PTES渗透测试执行标准</title>
    <link href="https://architectang.github.io/2019/05/17/PTES%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%89%A7%E8%A1%8C%E6%A0%87%E5%87%86/"/>
    <id>https://architectang.github.io/2019/05/17/PTES渗透测试执行标准/</id>
    <published>2019-05-17T02:57:50.000Z</published>
    <updated>2019-06-30T04:44:12.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><h5 id="渗透测试注意事项："><a href="#渗透测试注意事项：" class="headerlink" title="渗透测试注意事项："></a>渗透测试注意事项：</h5><p>1、不要进行恶意攻击</p><p>2、不要做傻事</p><p>3、在没有获得书面授权时，不要攻击任何目标</p><p>4、考虑清楚攻击将会带来的后果</p><p>4、如果干了非法的事情，记得天网恢恢疏而不漏</p><p><a href="http://www.pentest-standard.org/" target="_blank" rel="noopener">参考官方对于渗透测试执行标准描述（PTES）</a></p><a id="more"></a><p><img src="https://www.aqniu.com/wp-content/uploads/2017/09/Tips-to-Use-Penetration-Testing-App-Developer-Magazine_c80f71bi.jpg" alt></p><h5 id="一：前期交互阶段"><a href="#一：前期交互阶段" class="headerlink" title="一：前期交互阶段"></a>一：前期交互阶段</h5><p>在前期交互阶段，渗透测试团队与客户组织进行交互讨论，最重要的是确定渗透测试的范围、目标、限制条件以及合同细节</p><p>该阶段通常涉及收集客户需求，准备测试计划、定义测试范围与边界、定义业务目标、项目管理与规划等活动</p><h5 id="二：情报收集阶段"><a href="#二：情报收集阶段" class="headerlink" title="二：情报收集阶段"></a>二：情报收集阶段</h5><p>在目标范围确定之后，将进入情报搜集（Information Gathering）阶段，渗透团队可以利用各种信息来源与搜集技术方法，尝试更多关于组织网络拓扑、系统配置与安全防御措施的信息。</p><p>渗透测试者可以使用情报搜集方法包括公开来源信息查询、google Hacking 、社会工程学、网络踩点、扫描探测、被动监听、服务查点等。而对目标系统的情报探查能力是渗透者一项非常重要的技能，情报搜集是否充分在很大程度上决定了渗透测的成败，因为如果你遗漏关键的情报信息，你将可能在后面的阶段一无所获。</p><h5 id="三：威胁建模阶段"><a href="#三：威胁建模阶段" class="headerlink" title="三：威胁建模阶段"></a>三：威胁建模阶段</h5><p>在搜集到充分的情报信息之后，渗透测试团队的成员们停下敲击键盘，大家聚到一起针对获取的信息进行威胁建模（Threat Modeling）与攻击规划。这是渗透测试过程中非常重要，但很容易被忽视的一个关键点。<br>通过团队共同的缜密情报分析与攻击思路头脑风暴，可以从大量的信息情报中理清头绪，确定出最可行的攻击通道。<br>四：漏洞分析阶段<br>在确定出最可行的攻击通道之后，接下来需要考虑该如何取得目标系统的访问控制权，即漏洞分析（Vulnerability Analysis）阶段。<br>在该阶段，渗透测试者需要综合分析前几个阶段获取并汇总的情报信息，特别是安全漏洞扫描结果、服务查点信息等，通过搜索可获取的渗透代码资源，找出可以实施渗透攻击的攻击点，并在实验环境中进行验证。在该阶段，高水平的渗透测试团队还会针对攻击通道上的一些关键系统与服务进行安全漏洞探测与挖掘，期望找出可被利用的未知安全漏洞，并开发出渗透代码，从而打开攻击通道上的关键路径。</p><h5 id="五：渗透攻击阶段"><a href="#五：渗透攻击阶段" class="headerlink" title="五：渗透攻击阶段"></a>五：渗透攻击阶段</h5><p>渗透攻击（Exploitation）是渗透测试过程中最具有魅力的环节。在此环节中，渗透测试团队需要利用他们所找出的目标系统安全漏洞，来真正入侵系统当中，获得访问控制权。<br>渗透攻击可以利用公开渠道可获取的渗透代码，但一般在实际应用场景中，渗透测试者还需要充分地考虑目标系统特性来定制渗透攻击，并需要挫败目标网络与系统中实施的安全防御措施，才能成功达成渗透目的。在黑盒测试中，渗透测试者还需要考虑对目标系统检测机制的逃逸，从而避免造成目标组织安全响应团队的警觉和发现</p><h5 id="六：后渗透攻击阶段"><a href="#六：后渗透攻击阶段" class="headerlink" title="六：后渗透攻击阶段"></a>六：后渗透攻击阶段</h5><p>后渗透攻击（Post Exploitation）是整个渗透测试过程中最能够体现渗透测试团队创造力与技术能力的环节。前面的环节可以说都是在按部就班地完成非常普遍的目标，而在这个环节中，需要渗透测试团队根据目标组织的业务经营模式、保护资产形式与安全防御计划的不同特点，自主设计出攻击目标，识别关键基础设施，并寻找客户组织最具价值和尝试安全保护的信息和资产，最终达成能够对客户组织造成最重要业务影响的攻击途径。<br>在不同的渗透测试场景中，这些攻击目标与途径可能是千变万化的，而设置是否准确并且可行，也取决于团队自身的创新意识、知识范畴、实际经验和技术能力。</p><h5 id="七：报告阶段"><a href="#七：报告阶段" class="headerlink" title="七：报告阶段"></a>七：报告阶段</h5><p>渗透测试过程最终向客户组织提交，取得认可并成功获得合同付款的就是一份渗透测试报告（Reporting）。这份报告凝聚了之前所有阶段之中渗透测试团队所获取的关键情报信息、探测和发掘出的系统安全漏洞、成功渗透攻击的过程，以及造成业务影响后果的攻击途径，同时还要站在防御者的角度上，帮助他们分析安全防御体系中的薄弱环节、存在的问题，以及修补与升级技术方案。</p><h5 id="八：渗透术语："><a href="#八：渗透术语：" class="headerlink" title="八：渗透术语："></a>八：渗透术语：</h5><p>渗透攻击（Exploit）</p><p>攻击者利用安全漏洞，所进行的攻击行为，常见的渗透攻击技术包括缓冲区溢出、web应用程序漏洞攻击（SQL注入）、利用配置错误等</p><p>攻击载荷（Payload）</p><p>目标系统在被渗透攻击之后执行的代码</p><p>Shellcode</p><p>在渗透攻击时作为攻击载荷运行的一组机器指令，通常用汇编语言编写</p><p>模块（Module）</p><p>一段软件代码组件</p><p>监听器（Listener）</p><p>用来等待连入网络链接的组件</p><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --&gt;&lt;h5 id=&quot;渗透测试注意事项：&quot;&gt;&lt;a href=&quot;#渗透测试注意事项：&quot; class=&quot;headerlink&quot; title=&quot;渗透测试注意事项：&quot;&gt;&lt;/a&gt;渗透测试注意事项：&lt;/h5&gt;&lt;p&gt;1、不要进行恶意攻击&lt;/p&gt;&lt;p&gt;2、不要做傻事&lt;/p&gt;&lt;p&gt;3、在没有获得书面授权时，不要攻击任何目标&lt;/p&gt;&lt;p&gt;4、考虑清楚攻击将会带来的后果&lt;/p&gt;&lt;p&gt;4、如果干了非法的事情，记得天网恢恢疏而不漏&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.pentest-standard.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考官方对于渗透测试执行标准描述（PTES）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="信息安全" scheme="https://architectang.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="渗透测试" scheme="https://architectang.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="信息安全" scheme="https://architectang.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="渗透测试" scheme="https://architectang.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>(二)、Ansible在使用过程中出现的错误解决方法</title>
    <link href="https://architectang.github.io/2018/09/02/%E4%BA%8C-%E3%80%81Ansible%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://architectang.github.io/2018/09/02/二-、Ansible在使用过程中出现的错误解决方法/</id>
    <published>2018-09-02T04:47:00.000Z</published>
    <updated>2019-05-16T11:56:43.681Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><h4 id="1-安装完成后允许命令出错"><a href="#1-安装完成后允许命令出错" class="headerlink" title="1.安装完成后允许命令出错"></a>1.安装完成后允许命令出错</h4><pre><code>Traceback (most recent call last):File &quot;/usr/bin/ansible&quot;, line 197, in &lt;module&gt;        (runner, results) = cli.run(options, args)File &quot;/usr/bin/ansible&quot;, line 163, in run        extra_vars=extra_vars,File &quot;/usr/lib/python2.6/site-packages/ansible/runner/__init__.py&quot;, line 233, in __init__        cmd = subprocess.Popen([&apos;ssh&apos;,&apos;-o&apos;,&apos;ControlPersist&apos;], stdout=subprocess.PIPE, stderr=subprocess.PIPE)File &quot;/usr/lib64/python2.6/subprocess.py&quot;, line 639, in __init__        errread, errwrite)File &quot;/usr/lib64/python2.6/subprocess.py&quot;, line 1228, in _execute_child        raise child_exceptionOSError: [Errno 2] No such file or directory</code></pre><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>yum -y install openssh-clients</p><h4 id="2-出现Error-ansible-requires-a-json-module-none-found"><a href="#2-出现Error-ansible-requires-a-json-module-none-found" class="headerlink" title="2.出现Error: ansible requires a json module, none found!"></a>2.出现Error: ansible requires a json module, none found!</h4><pre><code>SSH password:10.0.1.110 | FAILED &gt;&gt; {&quot;failed&quot;: true,&quot;msg&quot;: &quot;Error: ansible requires a json module, nonefound!&quot;,&quot;parsed&quot;: false}</code></pre><h5 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h5><p>python版本过低，可以升级python或者python-simplejson</p><h4 id="3-安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）"><a href="#3-安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）" class="headerlink" title="3.安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）"></a>3.安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）</h4><pre><code>FAILED =&gt; Using a SSH password insteadof a key is not possible because Host Key checking is enabled and sshpass doesnot support this.  Please add this host&apos;sfingerprint to your known_hosts file to manage this host.</code></pre><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>在ansible 服务器上使用ssh 登陆下/etc/ansible/hosts 里面配置的服务器。然后再次使用ansible 去管理就不会报上面的错误了！<br>但这样大批量登陆就麻烦来。因为默认ansible是使用key验证的，如果使用密码登陆的服务器，使用ansible的话，要不修改ansible.cfg配置文件<br>的ask_pass = True给取消注释，要不就在运行命令时候加上-k，这个意思是-k, –ask-pass ask for SSH password。再修改：</p><p>host_key_checking= False即可</p><h4 id="4-如果客户端不在know-hosts里将会报错"><a href="#4-如果客户端不在know-hosts里将会报错" class="headerlink" title="4.如果客户端不在know_hosts里将会报错"></a>4.如果客户端不在know_hosts里将会报错</h4><pre><code>paramiko: The authenticity of host &apos;192.168.24.15&apos;can&apos;t be established.The ssh-rsa key fingerprint is397c139fd4b0d763fcffaee346a4bf6b.Are you sure you want to continueconnecting (yes/no)?</code></pre><h5 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h5><p>需要修改ansible.cfg的#host_key_checking= False取消注释</p><h3 id="5-出现FAILED-gt-FAILED-not-a-valid-DSA-private-key-file"><a href="#5-出现FAILED-gt-FAILED-not-a-valid-DSA-private-key-file" class="headerlink" title="5.出现FAILED =&gt; FAILED: not a valid DSA private key file"></a>5.出现FAILED =&gt; FAILED: not a valid DSA private key file</h3><h5 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h5><p>需要你在最后命令内添加参数-k</p><h4 id="6-openssh升级后无法登录报错"><a href="#6-openssh升级后无法登录报错" class="headerlink" title="6.openssh升级后无法登录报错"></a>6.openssh升级后无法登录报错</h4><pre><code>PAM unable todlopen(/lib64/security/pam_stack.so): /lib64/security/pam_stack.so: cannot openshared objectfile: No such file or directory</code></pre><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>sshrpm 升级后会修改/etc/pam.d/sshd 文件。需要升级前备份此文件最后还原即可登录。</p><h4 id="7-第一次系统初始化运行生成本机ansible用户key时报错"><a href="#7-第一次系统初始化运行生成本机ansible用户key时报错" class="headerlink" title="7.第一次系统初始化运行生成本机ansible用户key时报错"></a>7.第一次系统初始化运行生成本机ansible用户key时报错</h4><pre><code>failed: [127.0.0.1] =&gt;{&quot;checksum&quot;: &quot;f5f2f20fc0774be961fffb951a50023e31abe920&quot;,&quot;failed&quot;: true}msg: Aborting, target uses selinux but pythonbindings (libselinux-python) aren&apos;t installed!FATAL: all hosts have already failed –aborting</code></pre><h5 id="解决办法-3"><a href="#解决办法-3" class="headerlink" title="解决办法"></a>解决办法</h5><p>yum -y install libselinux-python</p><p>参考: <a href="http://blog.csdn.net/longxibendi/article/details/46989735" target="_blank" rel="noopener">http://blog.csdn.net/longxibendi/article/details/46989735</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="自动化" scheme="https://architectang.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="自动化" scheme="https://architectang.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Ansible</title>
    <link href="https://architectang.github.io/2018/09/01/Ansible/"/>
    <id>https://architectang.github.io/2018/09/01/Ansible/</id>
    <published>2018-09-01T09:26:09.000Z</published>
    <updated>2019-05-17T06:29:45.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --><p>1、ansible介绍：</p><p>Ansible是一款基于Python开发的自动化运维工具，主要是实现批量系统配置、批量程序部署、批量运行命令、批量执行任务等等诸多功能。</p><p>Ansible是一款灵活的开源工具，能够很大程度简化运维中的配置管理与流程控制方式，它利用推送方式对客户系统加以配置，这样所有工作都可在主服务器端完成。<br>Asible是基于模块工作的，其本身没有批量部署的能力，Ansible<del>~</del>一款运维自动化的软件！<br><a id="more"></a><br>1.1特性</p><p>(1)、no agents：不需要在被管控主机上安装任何客户端；</p><p>(2)、no server：无服务器端，使用时直接运行命令即可；</p><p>(3)、modules in any languages：基于模块工作，可使用任意语言开发模块；</p><p>(4)、yaml，not code：使用yaml语言定制剧本playbook；</p><p>(5)、ssh by default：基于SSH工作；</p><p>(6)、strong multi-tier solution：可实现多级指挥。</p><p><img src="/upload/201809/工作特性.jpg" alt="工作特性"></p><p>1.1 优点</p><p>(1)、轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</p><p>(2)、批量任务执行可以写成脚本，而且不用分发到远程就可以执行；</p><p>(3)、使用python编写，维护更简单，ruby语法过于复杂；</p><p>(4)、支持sudo。</p><p><img src="/upload/201809/工作机制.png" alt="工作机制"></p><p>2、ansible安装</p><p>安装epel 源：<br>rpm -ivh <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</a></p><p>安装ansible ：<br>yum install ansible -y</p><p>ssh-keygen 生成秘钥文件,如果不想输入密码可以一直回车</p><p>ssh-keygen -t rsa</p><p>cd /root/.ssh/ &amp;&amp; ll ./*</p><p>配置ansible 的hosts 文件：</p><p>vim /etc/ansible/hosts</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jul 10 2019 14:28:56 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;1、ansible介绍：&lt;/p&gt;&lt;p&gt;Ansible是一款基于Python开发的自动化运维工具，主要是实现批量系统配置、批量程序部署、批量运行命令、批量执行任务等等诸多功能。&lt;/p&gt;&lt;p&gt;Ansible是一款灵活的开源工具，能够很大程度简化运维中的配置管理与流程控制方式，它利用推送方式对客户系统加以配置，这样所有工作都可在主服务器端完成。&lt;br&gt;Asible是基于模块工作的，其本身没有批量部署的能力，Ansible&lt;del&gt;~&lt;/del&gt;一款运维自动化的软件！&lt;br&gt;
    
    </summary>
    
      <category term="自动化" scheme="https://architectang.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="自动化" scheme="https://architectang.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
</feed>
