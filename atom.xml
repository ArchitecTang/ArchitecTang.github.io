<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ArchitecTang Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://architectang.github.io/"/>
  <updated>2019-07-18T07:50:35.917Z</updated>
  <id>https://architectang.github.io/</id>
  
  <author>
    <name>ITboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是wifi探针??</title>
    <link href="https://architectang.github.io/2019/07/17/%E4%BB%80%E4%B9%88%E6%98%AFwifi%E6%8E%A2%E9%92%88/"/>
    <id>https://architectang.github.io/2019/07/17/什么是wifi探针/</id>
    <published>2019-07-17T12:59:09.000Z</published>
    <updated>2019-07-18T07:50:35.917Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><p><img src="https://i.loli.net/2019/07/17/5d2f21583ba4a77704.png" alt="wifi探针.png"></p><h6 id="1、什么是WIFI探针？？"><a href="#1、什么是WIFI探针？？" class="headerlink" title="1、什么是WIFI探针？？"></a>1、什么是WIFI探针？？</h6><p>WIFI 探针是一种能够主动识别 Android 和 IOS 设备，感知用户行为轨迹的精准数据收集前端，基于 WIFI探测技术、移动互联网和云计算等先进技术自动识别探针附近的智能移动终端。<br>、<br>当一个设备给另外一个设备通过无线传输技术发送信息时，周围的其他同类设备都是能够收到无线信息，WiFi探针技术基于此原理。</p><p>具体说，当WiFi设备在WiFi探针的侦听范围内，WiFi设备（无论是终端、路由器或者其他WiFi设备）发送任何一帧（Frame）时，不管是发给谁，探针都能截获，并分析出此帧MAC层与物理层的一些信息，比如发送与接收设备的MAC地址、帧类型、信号强度等。</p><p>WiFi探针不需要与周围的设备有任何交互，其本身不发出任何WiFi信号，即实现了无感知获取MAC信息。</p><h6 id="2、WIFI-探针原理"><a href="#2、WIFI-探针原理" class="headerlink" title="2、WIFI 探针原理"></a>2、WIFI 探针原理</h6><p>wifi探针实际上指的是probe帧。我们一般接入无线网络的时候，首先要选择对应的无线网路，即根据无线网络的名字进行选择（SSID）。那么知道这个名字有两种方式，主动扫描和被动扫描，其中probe帧即是用在主动扫描这种技术中。</p><p>具体原理：</p><p>节点会主动的发送probe request请求帧给AP（路由），AP然后反馈响应probe response，该probe response帧和Beacon的内容几乎是一致的，之后利用该帧中的一些信息，节点才会继续发起接入过程。所以狭义上而言，探针技术是一个帧，也是一种节点收集AP信息的方法。</p><p>AP实际上也可以用来收集节点的信息，该信息并不是指节点（即用户的终端，比如手机）内部的一些信息，而是一些移动的痕迹。</p><h6 id="3、WIFI探针特点"><a href="#3、WIFI探针特点" class="headerlink" title="3、WIFI探针特点"></a>3、WIFI探针特点</h6><p>●用户无需连接，无需安装APP；</p><p>●手机已经连接WiFi也可以探测；</p><p>●自动实时探测区域内的WiFi终端标识MAC地址；</p><p>●自动记录每个WiFi终端进入区域时间log_TIme、场强SNR；</p><p>●兼容iOS苹果和Android系统，开启WiFi的智能手机、笔记本电脑、Pad等移动设备都能探测。</p><h6 id="4、WIFI-探针技术所使用的网络协议"><a href="#4、WIFI-探针技术所使用的网络协议" class="headerlink" title="4、WIFI 探针技术所使用的网络协议"></a>4、WIFI 探针技术所使用的网络协议</h6><p>WIFI探针所采用的网络协议是IEEE802.11协议集，此协议集包含许多子协议。其中按照时间顺序发展，主要有：</p><p>（1）802.11a</p><p>（2）802.11b</p><p>（3）802.11g</p><p>（4）802.11n</p><p>在网络通信中，数据被封装成了帧（通信中的一个数据块）。帧在数据链路层传输的时候是有固定格式的，不是随便的封装和打包就可以传输。大小有限制，最小46字节，最大1500字节。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="物联网" scheme="https://architectang.github.io/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
      <category term="物联网" scheme="https://architectang.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客使用Next主题建立标签云</title>
    <link href="https://architectang.github.io/2019/07/10/Hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98%E5%BB%BA%E7%AB%8B%E6%A0%87%E7%AD%BE%E4%BA%91/"/>
    <id>https://architectang.github.io/2019/07/10/Hexo博客使用Next主题建立标签云/</id>
    <published>2019-07-10T11:49:17.000Z</published>
    <updated>2019-07-10T13:09:17.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><p>使用hexo-tag-cloud插件:<a href="https://github.com/MikeCoder/hexo-tag-cloud" target="_blank" rel="noopener">github地址</a></p><h6 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件:"></a>1、安装插件:</h6><p>进入到hexo的根目录，在在 package.json 中添加依赖: “hexo-tag-cloud”: “2.0.*” 操作如下：</p><pre><code>npm install hexo-tag-cloud@^2.0.* --save </code></pre><p>Git clone 下载<br>使用命令行安装插件包的过程中可能会出现问题，安装失败，安装不完全。可以直接克隆插件到博客的插件文件夹blog/node_modules里。或者克隆到桌面然后复制到博客的插件目录</p><p>blog\node_modules文件夹里</p><pre><code>git clone https://github.com/MikeCoder/hexo-tag-cloud</code></pre><p><img src="https://i.loli.net/2019/07/10/5d25d3055c48522209.png" alt="插件所在路径.png"></p><h6 id="2、配置插件"><a href="#2、配置插件" class="headerlink" title="2、配置插件"></a>2、配置插件</h6><p>插件的配置需要对应的环境，可以在主题文件夹里找一下，有没有对应的渲染文件，然后根据渲染文件的类型，选择对应的插件配置方法。我这里使用的next主题，所以使用的是swig 配置方式（不仅next，还有其他主题的配置文件也是.swig格式）</p><p>在主题文件夹找到文件 theme/next/layout/_macro/sidebar.swig, 然后写入如下代码</p><p><a href="https://github.com/MikeCoder/hexo-tag-cloud#for-swig-users" target="_blank" rel="noopener">跳转官网复制代码</a></p><p>添加到合适的位置即可<br><img src="https://i.loli.net/2019/07/10/5d25d43a0d58481617.png" alt="tagcloud写入位置.png"><br>博客根目录找到 _config.yml配置文件,在最后添加以下的配置项</p><pre><code># hexo-tag-cloudtag_cloud:    textFont: Trebuchet MS, Helvetica    textColor: &apos;#333&apos;    textHeight: 25    outlineColor: &apos;#E2E1D1&apos;    maxSpeed: 0.1</code></pre><p>定义标签云的字体和颜色</p><pre><code>textColor: ‘#333’ 字体颜色textHeight: 25 字体高度，根据部署的效果调整maxSpeed: 0.1 文字滚动速度，根据自己喜好调整</code></pre><p>重启博客，部署到线上</p><pre><code>hexo clean   清除缓存hexo g  生成博客hexo s  本地预览hexo d  部署到线上一定要注意清除缓存，不然的话容易出现功能效果不展示的问题，清除缓存即执行:hexo clean</code></pre><p>实现效果<br><img src="https://i.loli.net/2019/07/10/5d25d477c5e9b22737.png" alt="实现效果.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="hexo博客建站" scheme="https://architectang.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="HEXO博客建站" scheme="https://architectang.github.io/tags/HEXO%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用网络工具:fping主机扫描</title>
    <link href="https://architectang.github.io/2019/07/10/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7-fping%E4%B8%BB%E6%9C%BA%E6%89%AB%E6%8F%8F/"/>
    <id>https://architectang.github.io/2019/07/10/Linux常用网络工具-fping主机扫描/</id>
    <published>2019-07-10T08:10:52.000Z</published>
    <updated>2019-07-14T18:34:54.527Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h5 id="fping-介绍"><a href="#fping-介绍" class="headerlink" title="fping 介绍"></a>fping 介绍</h5><p>Linux下有很多强大网络扫描工具，网络扫描工具可以分为：主机扫描、主机服务扫描、路由扫描等。</p><p>fping是一个主机扫描工具，相比于ping工具它可以批量扫描主机。</p><p>fping完全不同于ping，因为您可以在命令行上定义任意数量的主机，或者指定包含要ping的IP地址或主机列表的文件。</p><p>例如，使用fping，我们可以指定完整的网络范围（ 192.168.0.1/24 ）。<br>它会向主机发送Fping请求，并以循环方式移动到另一个目标主机。 与ping不同，Fping基本上用于编写脚本。</p><p>访问<a href="http://fping.org/" target="_blank" rel="noopener">fping 官方网站：http://fping.org</a>下载最新版安装程序<br><img src="https://i.loli.net/2019/07/13/5d29927105a8756317.png" alt="官网.png"></p><h5 id="一、编译及安装"><a href="#一、编译及安装" class="headerlink" title="一、编译及安装"></a>一、编译及安装</h5><p>安装可以使用yum安装或者源码安装</p><p>yum 安装命令:</p><pre><code>yum install fping非root用户可使用sudo或者切换到root用户安装sudo yum install fping</code></pre><p>源码安装</p><pre><code>[root@node1 ~]# wget http://fping.org/dist/fping-4.2.tar.gz[root@node1 ~]# ll fping-4.2.tar.gz -rw-r--r--. 1 root root 171409 2月  20 05:05 fping-4.2.tar.gz[root@node1 ~]# tar xf fping-4.2.tar.gz &amp;&amp; cd fping-4.2[root@node1 fping-4.2]# ./configure &amp;&amp; make &amp;&amp; make install</code></pre><p><img src="https://i.loli.net/2019/07/13/5d299476e2bf846559.png" alt="f拼.png"><br>查看安装版本</p><pre><code>fping -v</code></pre><p><img src="https://i.loli.net/2019/07/13/5d2994f0599be62290.png" alt="VERSION.png"></p><h5 id="二、使用示例"><a href="#二、使用示例" class="headerlink" title="二、使用示例"></a>二、使用示例</h5><h6 id="2-1-ping多个主机"><a href="#2-1-ping多个主机" class="headerlink" title="2.1 ping多个主机"></a>2.1 ping多个主机</h6><pre><code>[root@node1 fping-4.2]# fping 172.31.8.13 172.31.8.107 172.31.8.75 172.31.8.3172.31.8.13 is alive    ---主机活动172.31.8.107 is alive172.31.8.75 is alive172.31.8.75 is unreachable  --- 主机不可用[root@node1 fping-4.2]# </code></pre><h6 id="2-2-ping-IP地址范围"><a href="#2-2-ping-IP地址范围" class="headerlink" title="2.2 ping IP地址范围"></a>2.2 ping IP地址范围</h6><p>以下命令将接收ping的IP范围并输出以下内容，我们将响应请求发送到该范围内的IP并获得我们想要信息。结束后还显示累积结果</p><pre><code>[root@node1 fping-4.2]# fping -s -g 172.31.8.1 172.31.8.10172.31.8.1 is alive172.31.8.3 is alive172.31.8.5 is alive172.31.8.8 is aliveICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.2ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.2ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.2ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.2ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.4ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.4ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.4ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.4ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.6ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.6ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.6ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.6ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.7ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.7ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.7ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.7ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.9ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.9ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.9ICMP Host Unreachable from 172.31.8.8 for ICMP Echo sent to 172.31.8.9172.31.8.2 is unreachable172.31.8.4 is unreachable172.31.8.6 is unreachable172.31.8.7 is unreachable172.31.8.9 is unreachable172.31.8.10 is unreachable    10 targets    4 alive    6 unreachable    0 unknown addresses    6 timeouts (waiting for response)    28 ICMP Echos sent    4 ICMP Echo Replies received    20 other ICMP received0.04 ms (min round trip time)0.73 ms (avg round trip time)1.15 ms (max round trip time)        4.164 sec (elapsed real time)[root@node1 fping-4.2]# </code></pre><h6 id="2-3-ping整个IP段，并重复一次"><a href="#2-3-ping整个IP段，并重复一次" class="headerlink" title="2.3 ping整个IP段，并重复一次"></a>2.3 ping整个IP段，并重复一次</h6><p><img src="https://i.loli.net/2019/07/13/5d299ad356d1f34442.png" alt="测试.png"></p><h6 id="2-4-从文件中读取IP信息，执行ping"><a href="#2-4-从文件中读取IP信息，执行ping" class="headerlink" title="2.4 从文件中读取IP信息，执行ping"></a>2.4 从文件中读取IP信息，执行ping</h6><p><img src="https://i.loli.net/2019/07/13/5d299b826503647681.png" alt="测试2.png"></p><h5 id="三、查看帮助信息"><a href="#三、查看帮助信息" class="headerlink" title="三、查看帮助信息"></a>三、查看帮助信息</h5><pre><code>[root@node1 fping-4.2]# fping -helpUsage: fping [options] [targets...]用法：fping [选项] [ping的目标]-a         show targets that are alive            显示可ping通的目标-A         show targets by address            将目标以ip地址的形式显示-b n       amount of ping data to send, in bytes (default 56)            ping 数据包的大小。（默认为56）-B f       set exponential backoff factor to f            设置指数反馈因子到f-c n       count of pings to send to each target (default 1)                ping每个目标的次数 (默认为1)-C n       same as -c, report results in verbose format                同-c, 返回的结果为冗长格式-e         show elapsed time on return packets                显示返回数据包所费时间-f file    read list of targets from a file ( - means stdin) (only if no -g specified)            从文件获取目标列表( - 表示从标准输入)(不能与 -g 同时使用)-g         generate target list (only if no -f specified)            生成目标列表(不能与 -f 同时使用)                (specify the start and end IP in the target list, or supply a IP netmask)                (ex. fping -g 192.168.1.0 192.168.1.255 or fping -g 192.168.1.0/24)                (可指定目标的开始和结束IP， 或者提供ip的子网掩码)                (例：fping -g 192.168.1.0 192.168.1.255 或 fping -g 192.168.1.0/24)-H n       Set the IP TTL value (Time To Live hops)                设置ip的TTL值 (生存时间)-i n       interval between sending ping packets (in millisec) (default 25)            ping包之间的间隔(单位：毫秒)(默认25)-l         loop sending pings forever            循环发送ping-m         ping multiple interfaces on target host                ping目标主机的多个网口-n         show targets by name (-d is equivalent)                将目标以主机名或域名显示(等价于 -d )-p n       interval between ping packets to one target (in millisec)                对同一个目标的ping包间隔(毫秒)                (in looping and counting modes, default 1000)                (在循环和统计模式中，默认为1000)-q         quiet (don&apos;t show per-target/per-ping results)            安静模式(不显示每个目标或每个ping的结果)-Q n       same as -q, but show summary every n seconds            同-q, 但是每n秒显示信息概要-r n       number of retries (default 3)            当ping失败时，最大重试次数(默认为3次)-s         print final stats            打印最后的统计数据-I if      bind to a particular interface            绑定到特定的网卡-S addr    set source address                设置源ip地址-t n       individual target initial timeout (in millisec) (default 500)            单个目标的超时时间(毫秒)(默认500)-T n       ignored (for compatibility with fping 2.4)                请忽略(为兼容fping 2.4)-u         show targets that are unreachable                显示不可到达的目标-O n       set the type of service (tos) flag on the ICMP packets                在icmp包中设置tos（服务类型）-v         show version                显示版本号targets    list of targets to check (if no -f specified)                需要ping的目标列表(不能和 -f 同时使用)-h              show this page                显示本帮助页</code></pre><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络" scheme="https://architectang.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="https://architectang.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Rabbitmq 入门(集群安装篇)</title>
    <link href="https://architectang.github.io/2019/07/02/Rabbitmq-%E5%85%A5%E9%97%A8(%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E7%AF%87)/"/>
    <id>https://architectang.github.io/2019/07/02/Rabbitmq-入门(集群安装篇)/</id>
    <published>2019-07-02T11:04:05.000Z</published>
    <updated>2019-07-10T11:44:28.023Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h5 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h5><p>RabbitMQ是采用Erlang语言实现AMQP（Advanced Message Queuing Protocol，高级消息队列协议）的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。<br>MQ全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过 队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。其中较为成熟的MQ产品有IBM WEBSPHERE MQ等等。<br>RabbitMQ是目前非常热门的一款消息中间件，很多行业都在使用这个消息中间件，RabbitMQ凭借其高可靠、易扩展、高可用及丰富的功能特性收到很多人的青睐。</p><h5 id="一、软件下载："><a href="#一、软件下载：" class="headerlink" title="一、软件下载："></a>一、软件下载：</h5><p>下载<a href="https://pan.baidu.com/s/1QLR4OelHXfMGLYywD13ydw" target="_blank" rel="noopener">Erlang</a> 百度云提取码: 864m</p><p>下载<a href="https://pan.baidu.com/s/15xSC2qo6-0Jh6FYnXkA4Yw" target="_blank" rel="noopener">Rabbitmq 源码包</a> 百度云提取码: qwih</p><p><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">点击此处跳转到官方网站下载最新版本</a></p><h5 id="二、安装环境"><a href="#二、安装环境" class="headerlink" title="二、安装环境:"></a>二、安装环境:</h5><p>node1 172.31.8.8 system Centos 7 —- node3 172.31.8.107 system Centos 7</p><p>node2 172.31.8.13 system Centos 7 —- node4 172.31.8.75 system Centos 7</p><p>软件版本：</p><p>Erlang 21.3</p><p>rabbitmq 3.7.7</p><h5 id="三、单点安装-以下操作需要在其他四个节点重复执行"><a href="#三、单点安装-以下操作需要在其他四个节点重复执行" class="headerlink" title="三、单点安装(以下操作需要在其他四个节点重复执行)"></a>三、单点安装(以下操作需要在其他四个节点重复执行)</h5><p>1、分别编辑四台机器的/etc/hosts 文件，增加以下内容</p><p>172.31.8.8 node1</p><p>172.31.8.13 node2</p><p>172.31.8.107 node3</p><p>172.31.8.75 node4</p><p>2、安装依赖包</p><pre><code>yum install -y *epel* gcc-c++ unixODBC unixODBC-devel openssl-devel ncurses-devel</code></pre><p>3、编译安装 Erlang</p><pre><code>[root@node1 ~]# tar xf otp_src_21.3.tar.gz[root@node1 ~]# cd otp_src_21.3[root@node1 otp_src_21.3]# ./configure --prefix=/usr/local/bin/erlang --without-javac[root@node1 otp_src_21.3]# make &amp;&amp; make install[root@node1 otp_src_21.3]# echo &quot;export PATH=$PATH:/usr/local/bin/erlang/bin:/usr/local/bin/rabbitmq_server-3.6.5/sbin&quot; &gt;&gt; /etc/profile[root@node1 otp_src_21.3]# source /etc/profile</code></pre><p>查看erlang 是否安装成功，出现以下输出即证明erlang已经安装成功<br><img src="https://i.loli.net/2019/07/02/5d1b6526a7b9185754.png" alt="erlang版本.png"></p><p>4、安装Rabbitmq</p><pre><code>[root@node1 ~]# tar xf rabbitmq-server-generic-unix-3.7.7.tar[root@node2 ~]# mv rabbitmq_server-3.7.7 /usr/local/rabbitmq-3.7.7[root@node2 ~]# cd /usr/local/rabbitmq-3.7.7/[root@node1 ~]# echo &quot;export PATH=$PATH:/usr/local/rabbitmq-3.7.7/sbin&quot; &gt;&gt; /etc/profile[root@node1 ~]# source /etc/profile[root@node1 ~]# rabbitmq-plugins enable rabbitmq_management   ---打开管理页面插件[root@node1 ~]# rabbitmq-server -detached  --后台启动服务[root@node1 ~]# rabbitmqctl add_user  admin 123456  --增加用户名admin，密码123456[root@node1 ~]# rabbitmqctl set_permissions -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; [root@node1 ~]# rabbitmqctl set_user_tags admin administrator --设置用户admin为管理员</code></pre><p>打开web页面，出现以下页面即安装成功</p><p>node1<br><img src="https://i.loli.net/2019/07/03/5d1ca62e894fb35867.png" alt="rabbitmqnode1.png"><br>node2<br><img src="https://i.loli.net/2019/07/03/5d1ca66bb841381637.png" alt="rabbitmqnode2.png"></p><h5 id="四、部署集群"><a href="#四、部署集群" class="headerlink" title="四、部署集群:"></a>四、部署集群:</h5><p>1、 修改 .erlang.cookie文件，node1、node4节点内容改为一致</p><pre><code>[root@node1 ~]# chmod 400 .erlang.cookie  --设置.erlang.cookie文件权限,为了防止添加集群失败四个节点均需要调整为一致[root@node1 ~]# scp .erlang.cookie root@172.31.8.13:/root/[root@node1 ~]# scp .erlang.cookie root@172.31.8.107:/root/[root@node1 ~]# scp .erlang.cookie root@172.31.8.75:/root/</code></pre><p>添加集群失败报错示例: 出现此信息可根据提示进行排查<br><img src="https://i.loli.net/2019/07/03/5d1cb7afc3b9469683.png" alt="报错示例.png"><br>2、 替换完.erlang.cookie文件，需要重启各个节点的rabbitmq服务</p><pre><code>node1[root@node1 ~]# kill -9 PID[root@node1 ~]# rabbitmq-server -detachednode2[root@node2 ~]# kill -9 PID[root@node2 ~]# rabbitmq-server -detachednode3[root@node3 ~]# kill -9 PID[root@node3 ~]# rabbitmq-server -detachednode4[root@node4 ~]# kill -9 PID[root@node5 ~]# rabbitmq-server -detached</code></pre><p>3、添加节点到集群，将node1节点作为主节点</p><p>在 node2 节点执行以下命令：</p><pre><code>[root@node2 ~]# rabbitmqctl stop_app[root@node4 ~]# rabbitmqctl join_cluster rabbit@node1  --默认为disc节点，如果需要指定节点角色，可以添加--ram/--disc参数[root@node4 ~]# rabbitmqctl start_app[root@node4 ~]# rabbitmqctl cluster_status</code></pre><p>以上命令在node3、4节点重复执行</p><p>执行结果:<br><img src="https://i.loli.net/2019/07/03/5d1cb507de47990688.png" alt="添加集群.png"><br>打开web管理页面查看状态<br><img src="https://i.loli.net/2019/07/03/5d1cb57e207a876254.png" alt="查看集群.png"></p><p>到此Rabbitmq集群已经安装完毕，四个节点均已正常运行</p><h5 id="五、集群管理"><a href="#五、集群管理" class="headerlink" title="五、集群管理"></a>五、集群管理</h5><p>1、假设Rabbitmq-node2节点需要退出集群</p><p>在node2节点执行：</p><pre><code>rabbitmqctl stop_app   --停止rabbitmq服务rabbitmqctl reset --将RabbitMQ node还原到最初状态.包括从所在群集中删除此node,从管理数据库中删除所有配置数据，如已配置的用户和虚拟主机，以及删除所有持久化消息.rabbitmqctl start_app </code></pre><p>在主节点（node1）执行</p><pre><code>rabbitmqctl forget_cluster_node rabbit@node2 --此命令会从集群中删除rabbit@node2节点.</code></pre><p>2、修改node2、node4节点为内存节点，在node2、4节点执行:</p><pre><code>[root@node2 ~]# rabbitmqctl stop_app   --停止rabbitmq服务[root@node2 ~]# rabbitmqctl change_cluster_node_type ram    --修改节点为内存节点[root@node2 ~]# rabbitmqctl start_app    --启动服务[root@node2 ~]# rabbitmqctl cluster_status --查看集群状态</code></pre><p>执行结果可以看到node2节点已经修改为RAM节点，disc节点为node1、3、4<br><img src="https://i.loli.net/2019/07/04/5d1d75112e7ab28091.png" alt="node2RAM.png"><br>再修改node4节点：<br><img src="https://i.loli.net/2019/07/04/5d1d7671ed99316232.png" alt="node4RAM.png"><br>node2、node4节点已经成功修改为内存节点，现在集群就是双内存、双硬盘节点，从控制台查看更为直观:<br><img src="https://i.loli.net/2019/07/04/5d1d79643889841417.png" alt="web控制台.png"></p><p>更多管理命令可参考文档:</p><p><a href="https://blog.csdn.net/wulex/article/details/64127224" target="_blank" rel="noopener">https://blog.csdn.net/wulex/article/details/64127224</a></p><p><a href="https://www.rabbitmq.com/clustering.html" target="_blank" rel="noopener">点击此处查看官方文档</a></p><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="Rabbitmq" scheme="https://architectang.github.io/categories/Linux/Rabbitmq/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="Rabbitmq" scheme="https://architectang.github.io/tags/Rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>DDOS网络攻击测试工具LOIC</title>
    <link href="https://architectang.github.io/2019/06/10/DDOS%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7LOIC/"/>
    <id>https://architectang.github.io/2019/06/10/DDOS网络攻击测试工具LOIC/</id>
    <published>2019-06-10T13:35:34.000Z</published>
    <updated>2019-07-19T11:56:49.733Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><p><img src="https://i.loli.net/2019/07/10/5d25e9ed4457a89639.jpg" alt="DDOS图片.jpg"></p><h6 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h6><p>DoS(Denial Of Service)攻击是指故意的攻击网络协议实现的缺陷或直接通过野蛮手段残忍地耗尽被攻击对象的资源，目的是让目标计算机或网络<br>无法提供正常的服务或资源访问，使目标系统服务系统停止响应甚至崩溃。然而随着网络上免费的可用DDOS工具增多，Dos攻击也日益增长，下面介绍<br>一款Hacker常用的Dos攻击工具LOIC（卢卡）</p><h4 id="特别提示-此款工具仅限于教学测试、攻防演练用途，禁止用于非法途径"><a href="#特别提示-此款工具仅限于教学测试、攻防演练用途，禁止用于非法途径" class="headerlink" title="特别提示: 此款工具仅限于教学测试、攻防演练用途，禁止用于非法途径"></a>特别提示: 此款工具仅限于教学测试、攻防演练用途，禁止用于非法途径</h4><p>LOIC（卢卡）（Low Orbit Ion Canon）</p><p>LOTC是一个最受欢迎的DOS攻击工具。 这个工具被去年流行的黑客集团“<a href="https://baike.baidu.com/item/%E5%8C%BF%E5%90%8D%E8%80%85%E9%BB%91%E5%AE%A2%E7%BB%84%E7%BB%87/8378313?fr=aladdin" target="_blank" rel="noopener">匿名者</a>”用于对许多大公司的网络攻击。</p><p>它可以通过使用单个用户执行DOS攻击小型服务器，工具非常易于使用，即便你是一个初学者。 这个工具执行DOS攻击通过发送UDP,TCP或HTTP请求到受<br>害者服务器。 你只需要知道服务器的IP地址或URL.还有其他类似的工具如：XOIC、HULK等等</p><p><a href="http://sourceforge.net/projects/loic/" target="_blank" rel="noopener">下载地址</a></p><h6 id="2、使用方法"><a href="#2、使用方法" class="headerlink" title="2、使用方法"></a>2、使用方法</h6><p>LOIC 可用于内外网压力测试，下载打开即可直接使用</p><p>LOIC 应用界面:<br><img src="https://i.loli.net/2019/07/10/5d25ed928ec7f93578.png" alt="LOIC.png"></p><h4 id="温馨提示：珍爱生命，远离网络攻击。"><a href="#温馨提示：珍爱生命，远离网络攻击。" class="headerlink" title="温馨提示：珍爱生命，远离网络攻击。"></a>温馨提示：珍爱生命，远离网络攻击。</h4><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络" scheme="https://architectang.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="https://architectang.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="安全" scheme="https://architectang.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ELK日志监控系统部署</title>
    <link href="https://architectang.github.io/2019/05/25/ELK%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/"/>
    <id>https://architectang.github.io/2019/05/25/ELK日志监控系统部署/</id>
    <published>2019-05-25T14:07:52.000Z</published>
    <updated>2019-07-29T14:22:25.870Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h4 id="一、安装软件"><a href="#一、安装软件" class="headerlink" title="一、安装软件"></a>一、安装软件</h4><h5 id="1-1-集群所需软件列表"><a href="#1-1-集群所需软件列表" class="headerlink" title="1.1 集群所需软件列表"></a>1.1 集群所需软件列表</h5><pre><code>OS：Centos 7.2host: 172.31.8.8、172.31.8.13、172.31.8.107、172.31.8.75、172.31.8.11(五台)Elasticsearch：elasticsearch-6.2.2.tar.gzKibana: kibana-6.2.2-linux-x86_64.tar.gzLogstash:logstash-6.2.2.tar.xzredis：redis-5.0.5.tar.gzJDK:jdk-8u51-linux-x64.tar.gzNginx: 安装目录:/software/</code></pre><h5 id="1-2-架构图-草图"><a href="#1-2-架构图-草图" class="headerlink" title="1.2 架构图(草图)"></a>1.2 架构图(草图)</h5><p>该图仅供参考，如果要求高可用的话logstash-server、redis需要分别安装在多台服务器上且logstash-server、redis都需要至少两台服务器（后端监控的web应用不一定都是nginx，也可能是jboss、tomcat等其他web应用）<br><img src="https://i.loli.net/2019/07/26/5d3a601d3402490284.png" alt="ELK监控架构图.png"><br>如果方案没有改动的话我会按照架构图上设计的方案去部署，否则我可能会把Elasticsearch、kibana、redis部署在一台服务器上</p><p>目前elasticsearch、logstash、kibana最高版本已经达到7.2.*，安装7版本需要jdk1.9支持，否则程序无法启动并会报错：</p><pre><code>OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</code></pre><h4 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h4><h5 id="2-1-安装Elasticsearch"><a href="#2-1-安装Elasticsearch" class="headerlink" title="2.1 安装Elasticsearch"></a>2.1 安装Elasticsearch</h5><h6 id="2-1-1-修改环境参数："><a href="#2-1-1-修改环境参数：" class="headerlink" title="2.1.1 修改环境参数："></a>2.1.1 修改环境参数：</h6><p>配置线程个数。修改配置文件/etc/security/limits.conf，增加配置</p><pre><code>*                hard    nofile          65536*                soft    nofile          65536*                soft    nproc           2048*                hard    nproc           4096</code></pre><p>修改/etc/sysctl.conf文件，增加配置：</p><pre><code>vim /etc/sysctl.confvm.max_map_count=262144</code></pre><p>执行 sysctl -p 命令，是配置生效</p><h6 id="2-1-2-添加普通用户"><a href="#2-1-2-添加普通用户" class="headerlink" title="2.1.2 添加普通用户"></a>2.1.2 添加普通用户</h6><pre><code>groupadd elsearch   --- 添加elsearch组useradd elsearch -g elsearch  ---添加elsearch用户，并加入elsearch组</code></pre><h6 id="2-1-3-修改Elasticsearch配置文件："><a href="#2-1-3-修改Elasticsearch配置文件：" class="headerlink" title="2.1.3 修改Elasticsearch配置文件："></a>2.1.3 修改Elasticsearch配置文件：</h6><pre><code>vim /software/elasticsearch-6.2.2/config/elasticsearch.yml --- 修改以下参数cluster.name: es-cluster   --- 集群名称node.name: master    --- Elasticsearch主节点写为master，备节点写为slavepath.data: /software/elasticsearch-6.2.2/data    --- 数据存储目录path.logs: /software/elasticsearch-6.2.2/logs    --- 程序日志存储目录network.host: 172.31.8.8      --- 可写为本机IP或者0.0.0.0http.port: 9200       --- 默认端口9200，打开注释即可discovery.zen.ping.unicast.hosts: [&quot;172.31.8.8&quot;, &quot;172.31.8.13&quot;]     --- 集群主机IP</code></pre><h6 id="2-1-4-修改java环境变量"><a href="#2-1-4-修改java环境变量" class="headerlink" title="2.1.4 修改java环境变量"></a>2.1.4 修改java环境变量</h6><pre><code>vim /software/elasticsearch-6.2.2/bin/elasticsearch-env  --- 在头部添加java环境变量#!/bin/bashJAVA_HOME=/software/jdk1.8.0_51JRE_HOME=/software/jdk1.8.0_51/jrePATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport JAVA_HOME JRE_HOME PATH CLASSPATH    </code></pre><h6 id="2-1-5-修改程序权限（Elasticsearch不能使用root权限启动，只能使用普通用户）"><a href="#2-1-5-修改程序权限（Elasticsearch不能使用root权限启动，只能使用普通用户）" class="headerlink" title="2.1.5 修改程序权限（Elasticsearch不能使用root权限启动，只能使用普通用户）"></a>2.1.5 修改程序权限（Elasticsearch不能使用root权限启动，只能使用普通用户）</h6><pre><code>chown -R  elsearch.elsearch elasticsearch-6.2.2/</code></pre><h6 id="2-1-6-启动服务"><a href="#2-1-6-启动服务" class="headerlink" title="2.1.6 启动服务"></a>2.1.6 启动服务</h6><pre><code>su - elsearch/software/elasticsearch-6.2.2/bin/elasticsearch -d     --- -d参数指定程序在后台运行访问：http://IPaddr:9200 </code></pre><p>master</p><p><img src="https://i.loli.net/2019/07/26/5d3a752476d6860117.png" alt="master.png"></p><p>slave<br><img src="https://i.loli.net/2019/07/26/5d3a74ee678fe72719.png" alt="slve.png"><br>查看集群状态</p><p><a href="http://172.31.8.8:9200/_cat/health?v" target="_blank" rel="noopener">http://172.31.8.8:9200/_cat/health?v</a><br><img src="https://i.loli.net/2019/07/26/5d3a75af5c56f36782.png" alt="集群状态.png"></p><h6 id="2-1-7-集群状态相关参数说明"><a href="#2-1-7-集群状态相关参数说明" class="headerlink" title="2.1.7 集群状态相关参数说明"></a>2.1.7 集群状态相关参数说明</h6><pre><code>URL中_cat表示查看信息，health表明返回的信息为集群健康信息，?v表示返回的信息加上头信息，跟返回JSON信息加上?pretty同理，就是为了获得更直观的信息，当然，你也可以不加，不要头信息，特别是通过代码获取返回信息进行解释，头信息有时候不需要，写shell脚本也一样，经常要去除一些多余的信息。通过这个链接会返回下面的信息，下面的信息包括：集群的状态（status）：red红表示集群不可用，有故障。yellow黄表示集群不可靠但可用，一般单节点时就是此状态。green正常状态，表示集群一切正常。节点数（node.total）：节点数，这里是2，表示该集群有两个节点。数据节点数（node.data）：存储数据的节点数，这里是2。数据节点在Elasticsearch概念介绍有。分片数（shards）：这是 0，表示我们把数据分成多少块存储。主分片数（pri）：primary shards，这里是6，实际上是分片数的两倍，因为有一个副本，如果有两个副本，这里的数量应该是分片数的三倍，这个会跟后面的索引分片数对应起来，这里只是个总数。激活的分片百分比（active_shards_percent）：这里可以理解为加载的数据分片数，只有加载所有的分片数，集群才算正常启动，在启动的过程中，如果我们不断刷新这个页面，我们会发现这个百分比会不断加大。</code></pre><h6 id="2-1-8-安装elasticsearch-head-插件"><a href="#2-1-8-安装elasticsearch-head-插件" class="headerlink" title="2.1.8 安装elasticsearch-head 插件"></a>2.1.8 安装elasticsearch-head 插件</h6><p>因为head是一个用于管理Elasticsearch的web前端插件，该插件在es5版本以后采用独立服务的形式进行安装使用（之前的版本可以直接在es安装目录中直接安装），因此需要安装nodejs、npm</p><pre><code>yum -y install nodejs npm</code></pre><p>如果没有安装git，还需要先安装git：</p><pre><code>yum -y install git</code></pre><p>然后安装elasticsearch-head插件：</p><pre><code>git clone https://github.com/mobz/elasticsearch-head.git</code></pre><p>git下载完成后，进入目录，进行操作：</p><pre><code>cd elasticsearch-head/执行npm install 命令， 执行该命名可能会出现以下错误：npm ERR! phantomjs-prebuilt@2.1.16 install: `node install.js`npm ERR! Exit status 1npm ERR! npm ERR! Failed at the phantomjs-prebuilt@2.1.16 install script &apos;node install.js&apos;.npm ERR! Make sure you have the latest version of node.js and npm installed.npm ERR! If you do, this is most likely a problem with the phantomjs-prebuilt package,npm ERR! not with npm itself.npm ERR! Tell the author that this fails on your system:npm ERR!     node install.jsnpm ERR! You can get information on how to open an issue for this project with:npm ERR!     npm bugs phantomjs-prebuiltnpm ERR! Or if that isn&apos;t available, you can get their info via:npm ERR!     npm owner ls phantomjs-prebuiltnpm ERR! There is likely additional logging output above.npm ERR! Please include the following file with any support request:npm ERR!     /software/elasticsearch-6.2.2/elasticsearch-head/npm-debug.log此时忽略phantomjs-prebuilt@2.1.16，执行命令如下npm install phantomjs-prebuilt@2.1.16 --ignore-scripts然后执行：npm installnpm WARN deprecated coffee-script@1.10.0: CoffeeScript on NPM has moved to &quot;coffeescript&quot; (no hyphen)npm WARN deprecated http2@3.3.7: Use the built-in module in node 9.0.0 or newer, insteadnpm WARN deprecated phantomjs-prebuilt@2.1.16: this package is now deprecatednpm WARN deprecated json3@3.2.6: Please use the native JSON object instead of JSON 3npm WARN deprecated json3@3.3.2: Please use the native JSON object instead of JSON 3npm WARN prefer global coffee-script@1.10.0 should be installed with -g&gt; phantomjs-prebuilt@2.1.16 install /software/elasticsearch-6.2.2/elasticsearch-head/node_modules/phantomjs-prebuilt&gt; node install.jsPhantomJS not found on PATHDownloading https://github.com/Medium/phantomjs/releases/download/v2.1.1/phantomjs-2.1.1-linux-x86_64.tar.bz2Saving to /tmp/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2Receiving...[=======---------------------------------] 19%</code></pre><p>插件安装相对会慢一些。。。</p><p>配置插件：</p><p>停止elasticsearch</p><pre><code>ps -ef | grep java | grep elsearchkill -9 PID</code></pre><p>修改：</p><pre><code>vim /software/elasticsearch-6.2.2/config/elasticsearch.yml添加以下参数：http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;</code></pre><p>启动elasticsearch</p><pre><code>/software/elasticsearch-6.2.2/bin/elasticsearch -d</code></pre><p>启动elasticsearch-head 插件（后台运行）</p><pre><code>nohup npm run start &amp;[1] 11047nohup: 忽略输入并把输出追加到&quot;/home/elsearch/nohup.out&quot;netstat -anlp | grep 9100tcp        0      0 0.0.0.0:9100            0.0.0.0:*               LISTEN      11058/grunt </code></pre><p>使用浏览器访问插件并与ES进行交互</p><p>master<br><img src="https://i.loli.net/2019/07/27/5d3c55b904c9468342.png" alt="eshead.png"><br>slave<br><img src="https://i.loli.net/2019/07/27/5d3c55f07ba3187525.png" alt="head.png"></p><h5 id="2-2-安装kibana"><a href="#2-2-安装kibana" class="headerlink" title="2.2 安装kibana"></a>2.2 安装kibana</h5><h6 id="2-2-1-修改配置文件"><a href="#2-2-1-修改配置文件" class="headerlink" title="2.2.1 修改配置文件"></a>2.2.1 修改配置文件</h6><pre><code>tar xf kibana-6.2.2-linux-x86_64.tar.gzcd kibana-6.2.2-linux-x86_64vim /software/kibana-6.2.2-linux-x86_64/config/kibana.ymlserver.port: 5601server.host: &quot;172.31.8.8&quot;elasticsearch.url: &quot;http://172.31.8.8:9200&quot;     --- 这个写的就是本机安装的Elasticsearch，只能写一个地址，目前还不支持写多个节点。如果想要对接Elasticsearch集群就需要搭建一个只能用来进行协调的Elasticsearch节点，这个节点不参与主节点选举、不存储数据。只是用来处理传入的HTTP请求，并将操作重定向到集群中的其他Elasticsearch节点，然后收集并返回结果。这个“协调”节点本质上也起了一个负载均衡的作用。</code></pre><h6 id="2-2-2-Kibana启动脚本配置"><a href="#2-2-2-Kibana启动脚本配置" class="headerlink" title="2.2.2 Kibana启动脚本配置"></a>2.2.2 Kibana启动脚本配置</h6><pre><code>#/bin/shRETVAL=PID=`ps -ef | grep &quot;kibana.yml&quot; | awk -F &apos; &apos; &apos;{print $2}&apos;`echo $PIDKIBANA_DIR=/software/kibana-6.2.2-linux-x86_64KIBANA=$KIBANA_DIR/bin/kibanaPROG=$(basename $KIBANA)CONF=$KIBANA_DIR/config/kibana.ymlif [ ! -x $KIBANA ]; then        echo -n $&quot;$KIBANA not exist.&quot;;warning;echo        exit 0fistart(){        echo -n $&quot;Starting $PROG: &quot;        nohup $KIBANA &gt;/dev/null 2&gt;&amp;1 &amp;        RETVAL=$?        if [ $RETVAL -eq 0 ]; then                echo &quot;start OK&quot;        else                echo &quot;start failure&quot;        fi        return $RETVAL}stop(){        echo -n $&quot;Stopping $PROG: &quot;        kill -TERM $PID &gt;/dev/null 2&gt;&amp;1        RETVAL=$?        echo &quot;stop OK&quot;        return $RETVAL}restart(){        stop        sleep 2        start}case &quot;$1&quot; in        start)        start        ;;        stop)        stop        ;;        restart)        restart        ;;        status)        ps -ef|grep $PID|grep kibana        RETVAL=$?        ;;        *)        echo $&quot;Usage: $0 {start|stop|status|restart}&quot;        RETVAL=1esacexit $RETVAL</code></pre><h6 id="2-2-3-启动Kibana"><a href="#2-2-3-启动Kibana" class="headerlink" title="2.2.3 启动Kibana"></a>2.2.3 启动Kibana</h6><pre><code> ./kibana.sh startStarting kibana: start OK</code></pre><p>访问：<a href="http://172.31.8.8:5601" target="_blank" rel="noopener">http://172.31.8.8:5601</a><br><img src="https://i.loli.net/2019/07/26/5d3a7f3494b6163045.png" alt="kibana.png"></p><h5 id="2-3-redis-安装"><a href="#2-3-redis-安装" class="headerlink" title="2.3 redis 安装"></a>2.3 redis 安装</h5><pre><code> wget http://45.252.224.74/files/503000000DD76BB8/download.redis.io/releases/redis-5.0.5.tar.gzcd /software/ &amp;&amp;  tar xf redis-5.0.5.tar.gz &amp;&amp; mkdir redis cd redis-5.0.5make &amp;&amp; cd src/make install PREFIX=/software/redis/     -- 指定redis安装目录为/software/redis/ cd ../ &amp;&amp; mkdir /software/conf &amp;&amp; cp redis.conf /software/redis/conf/vim /software/redis/conf/redis.conf修改以下参数:bind 172.31.8.107      --- 将这里的127.0.0.1改为172.31.8.107,否则只能连接127.0.0.1本地回环地址，无法远程连接protected-mode yes   改为 protected-mode no  --- yes改为no,目的是为了解决安全模式引起的报错port 6379    --- 打开注释daemonize no  改为 daemonize yes   --- no改为yes,目的是为了设置后台运行pidfile /software/redis/redis.pid   --- 设置redis.pid 文件存储目录logfile &quot;/software/redis/logs/redis.log&quot;    --- 设置redis.log 文件存储目录</code></pre><p>安装测试：</p><pre><code>/software/redis/bin/redis-cli -h 172.31.8.107 -p 6379如果出现如下，则表明连接成功172.31.8.107:6379&gt;</code></pre><p><img src="https://i.loli.net/2019/07/28/5d3d3bc5f077b19909.png" alt="res.png"></p><h5 id="2-4-logstash-server-安装"><a href="#2-4-logstash-server-安装" class="headerlink" title="2.4 logstash-server 安装"></a>2.4 logstash-server 安装</h5><h6 id="2-4-1-编辑配置文件："><a href="#2-4-1-编辑配置文件：" class="headerlink" title="2.4.1 编辑配置文件："></a>2.4.1 编辑配置文件：</h6><pre><code>vim /software/logstash-6.2.2/config/logstash.yml修改参数：node.name: logstash-server    -- 设置节点名称，一般为主机名path.data: /software/logstash-6.2.2/data   --- 设置logstash 和插件使用的持久化目录config.reload.automatic: true    --- 开启配置文件自动加载config.reload.interval: 10s      --- 定义配置文件重载时间周期http.host: &quot;172.31.8.107&quot;        --- 定义访问主机名，一般为域名或IPhttp.port: 9600-9700             --- 打开logstash 端口注释vim /software/logstash-6.2.2/config/logstash_server.conf    input {    redis {        port =&gt; &quot;6379&quot;        host =&gt; &quot;127.0.0.1&quot;        data_type =&gt; &quot;list&quot;        batch_count =&gt; &quot;1&quot;        key =&gt; &quot;nginx-accesslog&quot;}}filter {        grok {                match =&gt; { &quot;message&quot; =&gt; &quot;%{COMBINEDAPACHELOG}&quot; }        }}output {        elasticsearch {                hosts =&gt; [&quot;172.31.8.8:9200&quot;]                index =&gt; &quot;nginx-accesslog-%{+YYYY.MM.dd}&quot;        }}</code></pre><h6 id="2-4-2-编写logstash-启动脚本"><a href="#2-4-2-编写logstash-启动脚本" class="headerlink" title="2.4.2 编写logstash 启动脚本"></a>2.4.2 编写logstash 启动脚本</h6><pre><code>#/bin/shRETVAL=PID=`ps -ef | grep java | grep &quot;logstash_server\.conf&quot; | awk -F &apos; &apos; &apos;{print $2}&apos;`LOGSTASH_DIR=/software/logstash-6.2.2LOGSTASH=$LOGSTASH_DIR/bin/logstashPROG=$(basename $LOGSTASH)CONF=$LOGSTASH_DIR/config/logstash_server.confLOG=$LOGSTASH_DIR/logs/logstash.logif [ ! -x $LOGSTASH ]; then    echo -n $&quot;$LOGSTASH not exist.&quot;;warning;echo    exit 0fistart(){    echo -n $&quot;Starting $PROG: &quot;    nohup $LOGSTASH --config $CONF --log $LOG &gt;/dev/null 2&gt;&amp;1 &amp;    RETVAL=$?    if [ $RETVAL -eq 0 ]; then    echo &quot;start OK&quot;    else        echo &quot;start failure&quot;    fi    return $RETVAL}stop(){    echo -n $&quot;Stopping $PROG: &quot;    kill -TERM $PID &gt;/dev/null 2&gt;&amp;1    RETVAL=$?    echo &quot;stop OK&quot;    return $RETVAL}restart(){    stop    sleep 2    start}case &quot;$1&quot; in    start)        start        ;;    stop)        stop        ;;    restart)        restart        ;;    status)        ps -ef|grep $PID|grep logstash_server\.conf        RETVAL=$?        ;;    *)        echo $&quot;Usage: $0 {start|stop|status|restart}&quot;        RETVAL=1esacexit $RETVAL</code></pre><h6 id="2-4-3-测试启动脚本"><a href="#2-4-3-测试启动脚本" class="headerlink" title="2.4.3 测试启动脚本"></a>2.4.3 测试启动脚本</h6><p><img src="https://i.loli.net/2019/07/26/5d3ab30bcc51066101.png" alt="测试.png"></p><h6 id="2-4-4-logstash-server-调试"><a href="#2-4-4-logstash-server-调试" class="headerlink" title="2.4.4 logstash-server 调试"></a>2.4.4 logstash-server 调试</h6><p>停止logstash-server</p><pre><code>/software/logstash-6.2.2/logstash.sh stop</code></pre><p>编辑配置文件</p><pre><code>vim /software/logstash-6.2.2/config/logstash_server.conf 修改为以下参数：input {    redis {        port =&gt; &quot;6379&quot;        host =&gt; &quot;127.0.0.1&quot;        data_type =&gt; &quot;list&quot;        key =&gt; &quot;nginx-access&quot;        db =&gt; &quot;0&quot;        codec =&gt; &quot;json&quot;       }}output {        elasticsearch {                hosts =&gt; [&quot;172.31.8.8:9200&quot;,&quot;172.31.8.13:9200&quot;]                index =&gt; &quot;nginx-access-%{+YYYY.MM.dd}&quot;    }}</code></pre><p>修改logstash-server JVM</p><pre><code>vim /software/logstash-6.2.2/config/jvm.options-Xms1g    改为    -Xms500m      -- 根据自己的实际情况-Xmx1g    改为    -Xmx500m      -- 根据自己的实际情况</code></pre><p>目前我这个日志数据比较少，使用500M内存足够</p><p>验证配置是否正确</p><pre><code>/software/logstash-6.2.2/bin/logstash -f /software/logstash-6.2.2/config/logstash_server.conf  -tSending Logstash&apos;s logs to /software/logstash-6.2.2/logs which is now configured via log4j2.properties[INFO ][logstash.modules.scaffold] Initializing module {:module_name=&gt;&quot;fb_apache&quot;, :directory=&gt;&quot;/software/logstash-6.2.2/modules/fb_apache/configuration&quot;}[INFO ][logstash.modules.scaffold] Initializing module {:module_name=&gt;&quot;netflow&quot;, :directory=&gt;&quot;/software/logstash-6.2.2/modules/netflow/configuration&quot;}[WARN ][logstash.config.source.multilocal] Ignoring the &apos;pipelines.yml&apos; file because modules or command line options are specified[INFO ][logstash.config.source.local.configpathloader] No config files found in path {:path=&gt;&quot;/software/logstash-6.2.2/config/logstash&quot;}[ERROR][logstash.config.sourceloader] No configuration found in the configured sources.Configuration OK[INFO ][logstash.runner          ] Using config.test_and_exit mode. Config Validation Result: OK. Exiting Logstash</code></pre><p>启动logstash<br><img src="https://i.loli.net/2019/07/27/5d3c64e83849422634.png" alt="12.png"><br>程序已经正常运行</p><h5 id="2-5-安装nginx"><a href="#2-5-安装nginx" class="headerlink" title="2.5 安装nginx"></a>2.5 安装nginx</h5><p><a href="https://architectang.github.io/2018/12/26/Nginx%E5%85%A5%E9%97%A8-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">nginx 安装过程参考,点击传送</a></p><h5 id="2-6-安装logstash-agent"><a href="#2-6-安装logstash-agent" class="headerlink" title="2.6 安装logstash-agent"></a>2.6 安装logstash-agent</h5><h6 id="2-6-1-修改配置文件"><a href="#2-6-1-修改配置文件" class="headerlink" title="2.6.1 修改配置文件"></a>2.6.1 修改配置文件</h6><pre><code>vim /software/logstash-6.2.2/config/logstash.yml修改参数：node.name: logstash-server    -- 设置节点名称，一般为主机名path.data: /software/logstash-6.2.2/data   --- 设置logstash 和插件使用的持久化目录config.reload.automatic: true    --- 开启配置文件自动加载config.reload.interval: 10s      --- 定义配置文件重载时间周期http.host: &quot;172.31.8.75&quot;        --- 定义访问主机名，一般为域名或IPhttp.port: 9600-9700             --- 打开logstash 端口注释</code></pre><h6 id="2-6-2-新建程序启动文件："><a href="#2-6-2-新建程序启动文件：" class="headerlink" title="2.6.2 新建程序启动文件："></a>2.6.2 新建程序启动文件：</h6><pre><code>vim /software/logstash-6.2.2/config/logstash-nginx.conf写入以下内容：input {      file {     type =&gt; &quot;nginx-access&quot;          path =&gt; [&quot;/software/nginx/logs/172.31.8.75_json_access*&quot;]   }   file {     type =&gt; &quot;nginx-error&quot;          path =&gt; &quot;/software/nginx/logs/nginx_error.log&quot;   }}# output to redisoutput {       if [type] == &quot;nginx-access&quot; {                 redis {         host =&gt; &quot;172.31.8.107&quot;         port =&gt; &quot;6379&quot;         db =&gt; &quot;0&quot;         data_type =&gt; &quot;list&quot;         key =&gt; &quot;nginx-access&quot;        }     }  }</code></pre><h6 id="2-6-3-编辑-修改logstash-agent-JVM"><a href="#2-6-3-编辑-修改logstash-agent-JVM" class="headerlink" title="2.6.3 编辑 修改logstash-agent JVM"></a>2.6.3 编辑 修改logstash-agent JVM</h6><pre><code>-Xms1g    改为    -Xms256m      -- 根据自己的实际情况-Xmx1g    改为    -Xmx256m      -- 根据自己的实际情况</code></pre><h6 id="2-6-4-配置logstash-agent-java环境变量"><a href="#2-6-4-配置logstash-agent-java环境变量" class="headerlink" title="2.6.4 配置logstash-agent java环境变量"></a>2.6.4 配置logstash-agent java环境变量</h6><pre><code>vim /software/logstash-6.2.2/bin/logstash插入以下内容：JAVA_HOME=/software/jdk1.8.0_51JRE_HOME=/software/jdk1.8.0_51/jrePATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport JAVA_HOME JRE_HOME PATH CLASSPATH</code></pre><h6 id="2-6-5-同样使用以下命令验证配置文件"><a href="#2-6-5-同样使用以下命令验证配置文件" class="headerlink" title="2.6.5 同样使用以下命令验证配置文件"></a>2.6.5 同样使用以下命令验证配置文件</h6><pre><code>/software/logstash-6.2.2/bin/logstash -f /software/logstash-6.2.2/config/logstash-nginx.conf -t</code></pre><h6 id="2-6-6-验证正常后启动logstash服务-（另一个节点操作同样）"><a href="#2-6-6-验证正常后启动logstash服务-（另一个节点操作同样）" class="headerlink" title="2.6.6 验证正常后启动logstash服务 （另一个节点操作同样）"></a>2.6.6 验证正常后启动logstash服务 （另一个节点操作同样）</h6><pre><code>nohup /software/logstash-6.2.2/bin/logstash -f /software/logstash-6.2.2/config/logstash-nginx.conf &amp;</code></pre><h4 id="三、配置ELK监控"><a href="#三、配置ELK监控" class="headerlink" title="三、配置ELK监控"></a>三、配置ELK监控</h4><h5 id="3-1-登陆redis，验证"><a href="#3-1-登陆redis，验证" class="headerlink" title="3.1 登陆redis，验证"></a>3.1 登陆redis，验证</h5><pre><code>/software/redis/bin/redis-cli -h 172.31.8.107 -p 6379172.31.8.107:6379&gt; keys *1) &quot;nginx-access&quot;       --- 数据已经传输到redis</code></pre><h5 id="3-2-打开elasticsearch-head"><a href="#3-2-打开elasticsearch-head" class="headerlink" title="3.2 打开elasticsearch-head"></a>3.2 打开elasticsearch-head</h5><pre><code>http://172.31.8.8:9100</code></pre><p><img src="https://i.loli.net/2019/07/28/5d3d3176c59c451926.png" alt="eshead2.png"><br>索引已经可以在elasticsearch上展示</p><h5 id="3-3-打开kibana创建索引"><a href="#3-3-打开kibana创建索引" class="headerlink" title="3.3 打开kibana创建索引"></a>3.3 打开kibana创建索引</h5><pre><code>http://172.31.8.8:5601</code></pre><p><img src="https://i.loli.net/2019/07/28/5d3d32385d47d10292.png" alt="increate.png"><br><img src="https://i.loli.net/2019/07/28/5d3d3285420d759579.png" alt="increate2.png"><br><img src="https://i.loli.net/2019/07/28/5d3d32b8d97c981911.png" alt="创建完成.png"><br>点击Discover<br><img src="https://i.loli.net/2019/07/28/5d3d3479f1c2c89894.png" alt="完成.png"><br>数据已经可以正常展示</p><h5 id="3-4-使用ab-压测工具，生成日志"><a href="#3-4-使用ab-压测工具，生成日志" class="headerlink" title="3.4 使用ab 压测工具，生成日志"></a>3.4 使用ab 压测工具，生成日志</h5><h6 id="3-4-1-安装"><a href="#3-4-1-安装" class="headerlink" title="3.4.1 安装"></a>3.4.1 安装</h6><pre><code>yum -y install httpd-tools</code></pre><h6 id="3-4-2-测试安装是否成功"><a href="#3-4-2-测试安装是否成功" class="headerlink" title="3.4.2 测试安装是否成功"></a>3.4.2 测试安装是否成功</h6><pre><code>ab -VThis is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/</code></pre><h6 id="3-4-2-ab-参数说明"><a href="#3-4-2-ab-参数说明" class="headerlink" title="3.4.2 ab 参数说明"></a>3.4.2 ab 参数说明</h6><pre><code>ab --helpab: wrong number of argumentsUsage: ab [options] [http[s]://]hostname[:port]/pathOptions are:    -n requests     Number of requests to perform    -c concurrency  Number of multiple requests to make at a time    -t timelimit    Seconds to max. to spend on benchmarking                    This implies -n 50000    -s timeout      Seconds to max. wait for each response                    Default is 30 seconds    -b windowsize   Size of TCP send/receive buffer, in bytes    -B address      Address to bind to when making outgoing connections    -p postfile     File containing data to POST. Remember also to set -T    -u putfile      File containing data to PUT. Remember also to set -T    -T content-type Content-type header to use for POST/PUT data, eg.                    &apos;application/x-www-form-urlencoded&apos;                    Default is &apos;text/plain&apos;    -v verbosity    How much troubleshooting info to print    -w              Print out results in HTML tables    -i              Use HEAD instead of GET    -x attributes   String to insert as table attributes    -y attributes   String to insert as tr attributes    -z attributes   String to insert as td or th attributes    -C attribute    Add cookie, eg. &apos;Apache=1234&apos;. (repeatable)    -H attribute    Add Arbitrary header line, eg. &apos;Accept-Encoding: gzip&apos;                    Inserted after all normal header lines. (repeatable)    -A attribute    Add Basic WWW Authentication, the attributes                    are a colon separated username and password.    -P attribute    Add Basic Proxy Authentication, the attributes                    are a colon separated username and password.    -X proxy:port   Proxyserver and port number to use    -V              Print version number and exit    -k              Use HTTP KeepAlive feature    -d              Do not show percentiles served table.    -S              Do not show confidence estimators and warnings.    -q              Do not show progress when doing more than 150 requests    -g filename     Output collected data to gnuplot format file.    -e filename     Output CSV file with percentages served    -r              Don&apos;t exit on socket receive errors.    -h              Display usage information (this message)    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)    -f protocol     Specify SSL/TLS protocol                    (SSL3, TLS1, TLS1.1, TLS1.2 or ALL)</code></pre><p>ab的命令参数比较多，我们经常使用的是-c和-n参数。</p><pre><code>ab -c 10 -n 100 http://172.31.8.75/This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 172.31.8.75 (be patient).....doneServer Software:        nginx/1.8.1Server Hostname:        172.31.8.75Server Port:            80Document Path:          /Document Length:        612 bytesConcurrency Level:      10Time taken for tests:   0.013 secondsComplete requests:      100Failed requests:        0Write errors:           0Total transferred:      84400 bytesHTML transferred:       61200 bytesRequests per second:    7569.45 [#/sec] (mean)Time per request:       1.321 [ms] (mean)Time per request:       0.132 [ms] (mean, across all concurrent requests)Transfer rate:          6238.88 [Kbytes/sec] receivedConnection Times (ms)            min  mean[+/-sd] median   maxConnect:        0    0   0.1      0       0Processing:     0    1   0.2      1       1Waiting:        0    1   0.2      1       1Total:          1    1   0.1      1       1Percentage of the requests served within a certain time (ms)50%      166%      175%      180%      190%      195%      198%      199%      1100%      1 (longest request)</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>jira(安装篇)</title>
    <link href="https://architectang.github.io/2019/05/21/jira(%E5%AE%89%E8%A3%85%E7%AF%87)/"/>
    <id>https://architectang.github.io/2019/05/21/jira(安装篇)/</id>
    <published>2019-05-21T07:09:04.000Z</published>
    <updated>2019-07-10T11:43:14.030Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h4 id="一、jira环境需求"><a href="#一、jira环境需求" class="headerlink" title="一、jira环境需求"></a>一、jira环境需求</h4><p>system： Linux</p><p>memory： 2GB</p><p>Mysql数据库</p><p>Jdk jdk-8u92-linux-x64.rpm</p><p>Jira atlassian-jira-6.4.12-x64</p><p>Jira + 数据库连接插件mysql-connector-java-5.1.36-bin</p><p>部署前机器的内存至少为2GB.否则会出现如下错误：</p><p><img src="https://i.loli.net/2019/05/21/5ce3a50c9a7c063889.png" alt="1.png"></p><h4 id="二、安装部署"><a href="#二、安装部署" class="headerlink" title="二、安装部署"></a>二、安装部署</h4><p>部署前配置 关闭iptables和selinux</p><p>service iptables stop &amp;&amp; setenforce 0</p><p><img src="https://i.loli.net/2019/05/21/5ce3a5b347fb286893.png" alt="2.png"></p><p>2.1 jdk安装</p><p><img src="https://i.loli.net/2019/05/21/5ce3a5bd32b9498242.png" alt="3.png"></p><p>查看版本号 jdk安装完毕</p><p><img src="https://i.loli.net/2019/05/21/5ce3a5f64c72b78997.png" alt="4.png"></p><p>2.2 安装mysql数据库（如果有的可以跳过安装这一步）采用的是yum安装</p><p>yum install <a href="http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm" target="_blank" rel="noopener">http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm</a></p><p><img src="https://i.loli.net/2019/05/21/5ce3a62b49dd383541.png" alt="5.png"></p><p>yum install Percona-Server-server-56</p><p><img src="https://i.loli.net/2019/05/21/5ce3a6e6b7f9313899.png" alt="6.png"></p><p>初始化mysql数据库，创建账户并赋予链接权限<br><img src="https://i.loli.net/2019/05/21/5ce3a6e6e8b3e54323.png" alt="7.png"></p><p>创建jira库和jira用户</p><pre><code>create database jiradb character set utf8;grant select,insert,update,delete,create,drop,alter,index on jiradb.* to &apos;jira&apos;@&apos;localhost&apos; identified by &apos;jira&apos;;flush privileges;</code></pre><p><img src="https://i.loli.net/2019/05/21/5ce3a738b461110973.png" alt="8.png"></p><p>退出，使用jira账户进行登陆测试</p><pre><code>mysql –ujira –p</code></pre><p><img src="https://i.loli.net/2019/05/21/5ce3a772f2b4830067.png" alt="9.png"></p><p>下载mysql-connector-java-5.1.39.tar.gz 连接</p><p>2.3 安装jira</p><p>上传jira文件</p><p><img src="https://i.loli.net/2019/05/21/5ce3a7e034ce891378.png" alt="10.png"></p><p>Chmod +x</p><p>./</p><p><img src="https://i.loli.net/2019/05/21/5ce3a830932c224886.png" alt="11.png"></p><p>Jira web访问端口为8080</p><p><img src="https://i.loli.net/2019/05/21/5ce3a85a0ec1b20574.png" alt="12.png"></p><p>由于jira默认是不支持使用mysql数据库的，如果用mysql的话就得把链接插件放到以下目录，并重启jira</p><p>上传mysql – jira 连接插件</p><p>cd /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</p><p><img src="https://i.loli.net/2019/05/21/5ce3a87716ff631694.png" alt="13.png"></p><p>上传文件</p><p>cd /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</p><p><img src="https://i.loli.net/2019/05/21/5ce3a8aba031e19353.png" alt="14.png"></p><p>上传中文语言包</p><p><img src="https://i.loli.net/2019/05/21/5ce3a8d45564756840.png" alt="15.png"></p><p>删除 cd /var/atlassian/application-data/jira/</p><p><img src="https://i.loli.net/2019/05/21/5ce3a8f8d98a798813.png" alt="16.png"></p><p>打开浏览器，开始设置向导</p><p>连接数据库</p><p><img src="https://i.loli.net/2019/05/21/5ce3a923ded2684231.png" alt="18.png"></p><p>选择模式</p><p><img src="https://i.loli.net/2019/05/21/5ce3a923e9c8d34126.png" alt="17.png"></p><p>装的过程中需要在官网获取试用序列号，然后进行破解！！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="jira" scheme="https://architectang.github.io/categories/Linux/jira/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="jira" scheme="https://architectang.github.io/tags/jira/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix 缓存数据清理</title>
    <link href="https://architectang.github.io/2019/05/20/Zabbix-%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86/"/>
    <id>https://architectang.github.io/2019/05/20/Zabbix-缓存数据清理/</id>
    <published>2019-05-20T06:32:24.000Z</published>
    <updated>2019-07-10T14:05:34.529Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><p>zabbix监控运行一段时间以后，会留下大量的历史监控数据，zabbix数据库一直在增大；可能会造成系统性能下降，查看历史数据室查询速度缓慢。</p><p>zabbix里面最大的表就是history和history_uint两个表，而且zabbix里面的时间是使用的时间戳方式记录，所以可以根据时间戳来删除历史数据<br><a id="more"></a><br>一、关闭zabbix、http服务</p><pre><code>pkill -9 zabbixservice httpd stop</code></pre><p>二、清理zabbix历史数据</p><p>1、查看数据库目录文件</p><pre><code>[root@zabbix-server zabbix]# cd /var/lib/mysql/zabbix/[root@zabbix-server zabbix]# ls -lh | grep Gtotal 177G-rw-r----- 1 mysql mysql 1.7G Dec 24 13:49 events.ibd-rw-r----- 1 mysql mysql  60G Dec 24 13:49 history.ibd-rw-r----- 1 mysql mysql 2.4G Dec 24 13:49 history_str.ibd-rw-r----- 1 mysql mysql  99G Dec 24 13:49 history_uint.ibd-rw-r----- 1 mysql mysql 4.6G Dec 24 13:02 trends.ibd-rw-r----- 1 mysql mysql 9.5G Dec 24 13:49 trends_uint.ibd[root@zabbix-server zabbix]# </code></pre><p>生成Unix时间戳。时间定为2018年2月1日（暂定是保存18年2月以后的监控数据）</p><pre><code>[root@zabbix-server zabbix]# date +%s -d &quot;Feb 1, 2018 00:00:00&quot;    #执行此命令以后会生成一个ID 1517414400   #这是生成的ID</code></pre><p>2、数据备份</p><pre><code>[root@zabbix-server zabbix]#mysql -uroot -p zabbix &gt; /root/mysqlback/zabbix.sql     #需要创建mysqlback目录</code></pre><p>3、 登录数据库</p><pre><code>[root@zabbix-server zabbix]# mysql -uroot -pEnter password: Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 7Server version: 5.5.60-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MariaDB [(none)]&gt; use zabbix;    #选择zabbix数据库</code></pre><p>执行sql查看指定日期之前的数据大小：</p><pre><code>SELECT table_schema as `Database`,table_name AS `Table`,round(((data_length + index_length) / 1024 / 1024 / 1024), 2) `Size in MB`FROM information_schema.TABLES where CREATE_TIME &lt; &apos;2018-02-01 00:00:00&apos; and table_name=&apos;history.ibd&apos;;</code></pre><p>根据需要修改日期和查询的表名称(如果查询出来的结果是0.0，需要将sql中的三个1024删除一个，以G为单位显示)</p><p>4、 执行以下命令，清理指定时间之前的数据、对zabbix数据库执行以下sql</p><pre><code>delete from history where clock &lt; 1517414400;optimize table history;delete from history_uint where clock &lt; 1517414400;optimize table history_uint;delete from trends where clock &lt; 1517414400;optimize table trends;delete from trends_uint where clock &lt; 1517414400;optimize table trends_uint;</code></pre><p>注意：sql中的ID是生成Unix时间戳的ID号,需要改为自己生成的ID号<br>三、启动服务</p><pre><code>/usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf    #zabbix server/usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf    #zabbix agentservice httpd start</code></pre><p>===============================分===========隔==========符===================================</p><p>1、使用truncate命令清空zabbix 所有监控数据</p><pre><code>-------------------------------------------------------truncate table history;optimize table history;------------------------------------------------------- truncate table history_str;optimize table history_str;-------------------------------------------------------truncate table history_uint;optimize table history_uint;-------------------------------------------------------truncate table trends;optimize table trends;-------------------------------------------------------truncate table trends_uint; optimize table trends_uint; -------------------------------------------------------truncate table events;optimize table events;-------------------------------------------------------</code></pre><p>注意：这些命令会把zabbix所有的监控数据清空，操作前注意备份数据库</p><p>truncate是删除了表，然后根据表结构重新建立，delete删除的是记录的数据没有修改表</p><p>truncate执行删除比较快，但是在事务处理安全性方面不如delete,如果我们执行truncat的表正在处理事务，这个命令退出并会产生错误信息</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;zabbix监控运行一段时间以后，会留下大量的历史监控数据，zabbix数据库一直在增大；可能会造成系统性能下降，查看历史数据室查询速度缓慢。&lt;/p&gt;&lt;p&gt;zabbix里面最大的表就是history和history_uint两个表，而且zabbix里面的时间是使用的时间戳方式记录，所以可以根据时间戳来删除历史数据&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="zabbix" scheme="https://architectang.github.io/categories/Linux/zabbix/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="zabbix" scheme="https://architectang.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Redis 故障恢复</title>
    <link href="https://architectang.github.io/2019/05/10/Redis-%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D/"/>
    <id>https://architectang.github.io/2019/05/10/Redis-故障恢复/</id>
    <published>2019-05-10T06:25:37.000Z</published>
    <updated>2019-07-28T06:24:48.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><p>案例一、<br>ResponseError: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk.<br><a id="more"></a><br>Commands that may modify the data set are disabled. Please check Redis logs for details about the error.<br>Redis被配置为保存数据库快照，但它目前不能持久化到硬盘。用来修改集合数据的命令不能用。请查看Redis日志的详细错误信息。<br>原因：强制关闭redis快照导致不能持久化</p><p>解决方案：<br>将：stop-writes-on-bgsave-error 设置为 no</p><p>案例二、</p><p>logstash 连接redis失败</p><pre><code>[WARN ][logstash.outputs.redis   ] Failed to send event to Redis {:event=&gt;#&lt;LogStash::Event:0x63169a41&gt;, :identity=&gt;&quot;redis://@172.31.8.107:6379/0 list:nginx-access&quot;, :exception=&gt;#&lt;Redis::CannotConnectError: Error connecting to Redis on 172.31.8.107:6379 (Errno::ECONNREFUSED)&gt;, :backtrace=&gt;[&quot;/software/logstash-6.2.2/vendor/bundle/jruby/2.3.0/gems/redis-3.3.5/lib/redis/client.rb:345:in `establish_connection&apos;&quot;, &quot;/software/logstash-6.2.2/vendor/bundle/jruby/2.3.0/gems/redis-3.3.5/lib/redis/client.rb:101:in `block in connect</code></pre><p>redis现在的版本开启redis-server后，redis-cli只能访问到127.0.0.1，因为在配置文件中固定了ip，因此需要修改redis.conf</p><pre><code># bind 192.168.1.100 10.0.0.1#bind 127.0.0.1      ## <figure class="highlight plain"><figcaption><span>~~~ If the computer running Redis is directly exposed to the</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># internet, binding to all the interfaces is dangerous and will expose the</span><br><span class="line"># instance to everybody on the internet. So by default we uncomment the</span><br><span class="line"># following bind directive, that will force Redis to listen only into</span><br><span class="line"># the IPv4 loopback interface address (this means Redis will be able to</span><br><span class="line"># accept connections only from clients running into the same computer it</span><br><span class="line"># is running).</span><br><span class="line">#</span><br><span class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure>#bind 127.0.0.1     --- 此处写本机IP地址</code></pre><p>重启redis，进行连接测试</p><pre><code>/software/redis/bin/redis-cli -h 172.31.8.107 -p 6379</code></pre><p>如果出现如下，则表明连接成功</p><pre><code>172.31.8.107:6379&gt;</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;案例一、&lt;br&gt;ResponseError: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk.&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="redis" scheme="https://architectang.github.io/categories/Linux/redis/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="redis" scheme="https://architectang.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>系统蜜罐opencanary部署</title>
    <link href="https://architectang.github.io/2019/03/28/%E7%B3%BB%E7%BB%9F%E8%9C%9C%E7%BD%90opencanary%E9%83%A8%E7%BD%B2/"/>
    <id>https://architectang.github.io/2019/03/28/系统蜜罐opencanary部署/</id>
    <published>2019-03-28T10:36:09.000Z</published>
    <updated>2019-07-20T16:08:32.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>内网低交互蜜罐opencanary：</p><p>opencanary是2015年blackhat在单独发布环节推出的的一款蜜罐工具，纯python模拟多种应用和服务。当模拟的服务被某人使用（交互登录）时，它就会产生相应的日志。<br><a href="https://github.com/thinkst/opencanary/tree/master/opencanary" target="_blank" rel="noopener">Github项目地址</a></p><h5 id="1-1-模拟服务："><a href="#1-1-模拟服务：" class="headerlink" title="1.1 模拟服务："></a>1.1 模拟服务：</h5><p>1.端口扫描行为</p><p>2.ftp登录尝试</p><p>3.web蜜罐被访问</p><p>4.web蜜罐被登录</p><p>5.ssh建立连接</p><p>6.ssh远程版本发送</p><p>7.ssh登录尝试</p><p>8.telnet登录尝试</p><p>9.mysql登录尝试</p><p>项目架构图：<br><img src="https://i.loli.net/2019/07/20/5d3305b1c825093839.png" alt="honeypot.png"></p><h4 id="二、安装管理后台"><a href="#二、安装管理后台" class="headerlink" title="二、安装管理后台"></a>二、安装管理后台</h4><h5 id="2-1-安装环境"><a href="#2-1-安装环境" class="headerlink" title="2.1 安装环境"></a>2.1 安装环境</h5><p>安装系统：Centos7 64位系统</p><p>Python使用系统自带的 Python 2.7</p><h5 id="2-2-系统配置"><a href="#2-2-系统配置" class="headerlink" title="2.2 系统配置"></a>2.2 系统配置</h5><p>关闭selinux</p><pre><code>setenforce 0vim /etc/selinux/config# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:#     enforcing - SELinux security policy is enforced.#     permissive - SELinux prints warnings instead of enforcing.#     disabled - No SELinux policy is loaded.SELINUX=disabled SELINUXTYPE= can take one of three two values:#     targeted - Targeted processes are protected,#     minimum - Modification of targeted policy. Only selected processes are protected. #     mls - Multi Level Security protection.SELINUXTYPE=targeted</code></pre><p>然后重启服务器，selinux 便永久生效了</p><p>查看系统Python版本</p><pre><code>root@node1 ~]# python -VPython 2.7.5[root@node1 ~]# </code></pre><h5 id="2-3-tornado安装"><a href="#2-3-tornado安装" class="headerlink" title="2.3 tornado安装"></a>2.3 tornado安装</h5><p>下载web源码和安装依赖</p><pre><code>[root@node1 src]# git clone https://github.com/p1r06u3/opencanary_web.git正克隆到 &apos;opencanary_web&apos;...remote: Enumerating objects: 46, done.remote: Counting objects: 100% (46/46), done.remote: Compressing objects: 100% (34/34), done.remote: Total 1083 (delta 20), reused 30 (delta 11), pack-reused 1037接收对象中: 100% (1083/1083), 3.78 MiB | 101.00 KiB/s, done.处理 delta 中: 100% (558/558), done.[root@node1 src]# cd opencanary_web/[root@node1 opencanary_web]# pip install -r requirements.txt</code></pre><h5 id="2-4-安装配置mysql"><a href="#2-4-安装配置mysql" class="headerlink" title="2.4 安装配置mysql"></a>2.4 安装配置mysql</h5><h6 id="2-4-1-下载mysql5-7-安装包"><a href="#2-4-1-下载mysql5-7-安装包" class="headerlink" title="2.4.1 下载mysql5.7 安装包"></a>2.4.1 下载mysql5.7 安装包</h6><pre><code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code></pre><h6 id="2-4-2-安装mysql-源"><a href="#2-4-2-安装mysql-源" class="headerlink" title="2.4.2 安装mysql 源"></a>2.4.2 安装mysql 源</h6><pre><code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></pre><h6 id="2-4-3-检查mysql源是否安装成功"><a href="#2-4-3-检查mysql源是否安装成功" class="headerlink" title="2.4.3 检查mysql源是否安装成功"></a>2.4.3 检查mysql源是否安装成功</h6><pre><code>yum repolist enabled|grep &quot;mysql.*-community.*&quot;</code></pre><h6 id="2-4-4-安装mysql"><a href="#2-4-4-安装mysql" class="headerlink" title="2.4.4 安装mysql"></a>2.4.4 安装mysql</h6><pre><code>yum install mysql-server</code></pre><h6 id="2-4-5-启动mysql并设置开机自启动"><a href="#2-4-5-启动mysql并设置开机自启动" class="headerlink" title="2.4.5 启动mysql并设置开机自启动"></a>2.4.5 启动mysql并设置开机自启动</h6><pre><code>systemctl start mysqldsystemctl enable mysqldsystemctl daemon-reload</code></pre><h6 id="2-4-6-修改mysql本地登陆密码"><a href="#2-4-6-修改mysql本地登陆密码" class="headerlink" title="2.4.6 修改mysql本地登陆密码"></a>2.4.6 修改mysql本地登陆密码</h6><p>mysql安装完成后在/var/log/mysqld.log文件中给root用户生成了一个默认密码</p><p>通过以下方式找到root默认密码，然后登录mysql进行修改：</p><pre><code>[root@node1 ~]# grep &apos;temporary password&apos; /var/log/mysqld.log2019-07-20T13:07:38.462181Z 1 [Note] A temporary password is generated for root@localhost: ponNmM,qj0&lt;Zroot@localhost: 后面就是默认初始密码登录mysql：mysql -u root -p[root@node1 ~]# mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.26Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt;  </code></pre><p>重置mysql密码</p><pre><code>执行修改密码语句：ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;new-password&apos;;mysql&gt;  ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;new-password&apos;;     ---新密码需要符合要求,即密码组成应由大、小写字母、数字、符号组成Query OK, 0 rows affected (0.00 sec)mysql&gt;  flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; exitBye</code></pre><h6 id="2-4-7-创建mysql数据库和表结构"><a href="#2-4-7-创建mysql数据库和表结构" class="headerlink" title="2.4.7 创建mysql数据库和表结构"></a>2.4.7 创建mysql数据库和表结构</h6><p>切换到opencanary_web目录</p><pre><code>cd /usr/local/src/opencanary_web</code></pre><p>登陆mysql创建数据库并还原表结构</p><pre><code>create database honeypot;use honeypot;source honeypot.sql;</code></pre><p>这时数据库中User表内默认用户名和密码为：admin\admin</p><pre><code>若要修改web后台登录密码请执行sql语句password的值换成自己的32位md5：UPDATE User SET password=&apos;900150983cd24fb0d6963f7d28e17f72&apos; WHERE id=1;</code></pre><p>修改web数据库连接密码</p><pre><code>vim /usr/local/src/opencanary_web/dbs/initdb.py修改：DB_PWD = &apos;&apos;  修改为自己的mysql密码</code></pre><h6 id="2-4-8-单tornado实例启动测试"><a href="#2-4-8-单tornado实例启动测试" class="headerlink" title="2.4.8 单tornado实例启动测试"></a>2.4.8 单tornado实例启动测试</h6><pre><code>python server.py --port=80[root@node1 opencanary_web]# python server.py --port=80Development server is running at http://127.0.0.1:80/</code></pre><p>若输出”Development server is running at <a href="http://0.0.0.0:80/" target="_blank" rel="noopener">http://0.0.0.0:80/</a> “，且访问主机的ip能够显示出登录后台地址，则web单实例后台启动成功。</p><h5 id="2-5-安装配置supervisor"><a href="#2-5-安装配置supervisor" class="headerlink" title="2.5 安装配置supervisor"></a>2.5 安装配置supervisor</h5><p>Supervisor（ <a href="http://supervisord.org/" target="_blank" rel="noopener">http://supervisord.org/</a> ）是用Python开发的一个client/server服务，是Linux/Unix系统下的一个进程管理工具，不支持Windows系统。它可以很方便的监听、启动、停止、重启一个或多个进程。</p><p>用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。</p><h6 id="2-5-1-supervisor"><a href="#2-5-1-supervisor" class="headerlink" title="2.5.1 supervisor"></a>2.5.1 supervisor</h6><pre><code>yum install supervisor设置开机自启动systemctl enable supervisord.service</code></pre><h6 id="2-5-2-配置文件"><a href="#2-5-2-配置文件" class="headerlink" title="2.5.2 配置文件"></a>2.5.2 配置文件</h6><p>supervisord 的配置 文件是 /etc/supervisord.conf</p><p>自定义配置文件目录是/etc/supervisord.d/,该目录下文件以.ini为后缀</p><p>这里给出我的supervisor子配置：</p><pre><code>vi /etc/supervisord.d/tornado.ini[group:tornadoes]programs=tornado-8000,tornado-8001,tornado-8002,tornado-8003[program:tornado-8000]command=python /usr/local/src/opencanary_web/server.py --port=8000directory=/usr/local/src/opencanary_webautorestart=trueredirect_stderr=truestdout_logfile=/var/log/tornado.logloglevel=debug[program:tornado-8001]command=python /usr/local/src/opencanary_web/server.py --port=8001directory=/usr/local/src/opencanary_webautorestart=trueredirect_stderr=truestdout_logfile=/var/log/tornado.logloglevel=debug[program:tornado-8002]command=python /usr/local/src/opencanary_web/server.py --port=8002directory=/usr/local/src/opencanary_webautorestart=trueredirect_stderr=truestdout_logfile=/var/log/tornado.logloglevel=debug[program:tornado-8003]command=python /usr/local/src/opencanary_web/server.py --port=8003directory=/usr/local/src/opencanary_webautorestart=trueredirect_stderr=truestdout_logfile=/var/log/tornado.logloglevel=debug</code></pre><h6 id="2-5-3-启动supervisor"><a href="#2-5-3-启动supervisor" class="headerlink" title="2.5.3 启动supervisor"></a>2.5.3 启动supervisor</h6><pre><code>systemctl start supervisord其他常用命令：systemctl stop supervisord      # 停止supervisordsystemctl restart supervisord   # 重启supervisord</code></pre><h6 id="2-5-4-启动多tornado实例"><a href="#2-5-4-启动多tornado实例" class="headerlink" title="2.5.4 启动多tornado实例"></a>2.5.4 启动多tornado实例</h6><pre><code>supervisorctl start tornadoes:*其他更多supervisord 客户端管理命令supervisorctl status                    # 状态supervisorctl stop nginx                #关闭 nginxsupervisorctl start nginx               #启动 nginxsupervisorctl restart nginx             #重启 nginxsupervisorctl rereadsupervisorctl update                    #更新新的配置</code></pre><h6 id="2-5-5-查看应用web是否启动成功"><a href="#2-5-5-查看应用web是否启动成功" class="headerlink" title="2.5.5 查看应用web是否启动成功"></a>2.5.5 查看应用web是否启动成功</h6><pre><code>ps aux|grep pythonroot      3303  0.0  0.9 562428 18316 ?        Ssl  7月12   0:49 /usr/bin/python -Es /usr/sbin/tuned -l -Proot     14126  0.0  0.7 224872 13804 ?        Ss   22:25   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.confroot     14128  0.6  1.9 335660 36356 ?        Sl   22:25   0:00 python /usr/local/src/opencanary_web/server.py --port=8000root     14129  0.6  1.9 409648 37572 ?        Sl   22:25   0:00 python /usr/local/src/opencanary_web/server.py --port=8001root     14130  0.6  1.9 335664 36364 ?        Sl   22:25   0:00 python /usr/local/src/opencanary_web/server.py --port=8002root     14131  0.6  1.9 335664 36360 ?        Sl   22:25   0:00 python /usr/local/src/opencanary_web/server.py --port=8003root     14279  0.0  0.0 112728   980 pts/0    R+   22:27   0:00 grep --color=auto python</code></pre><h5 id="2-6-安装nginx反向代理tornado"><a href="#2-6-安装nginx反向代理tornado" class="headerlink" title="2.6 安装nginx反向代理tornado"></a>2.6 安装nginx反向代理tornado</h5><h6 id="2-6-1-安装nginx"><a href="#2-6-1-安装nginx" class="headerlink" title="2.6.1 安装nginx"></a>2.6.1 安装nginx</h6><p>可以使用源码编译安装和yum安装</p><pre><code>这里使用yum安装 。。。。省事yum -y install nginx</code></pre><h6 id="2-6-2-nginx反向代理tornado配置"><a href="#2-6-2-nginx反向代理tornado配置" class="headerlink" title="2.6.2 nginx反向代理tornado配置"></a>2.6.2 nginx反向代理tornado配置</h6><pre><code>先备份nginx配置文件cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak修改配置文件    user nginx;worker_processes 5;error_log /var/log/nginx/error.log warn;pid    /var/run/nginx.pid;events {    worker_connections 1024;}http {    include    /etc/nginx/mime.types;    default_type application/octet-stream;    log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot;&apos;            &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;            &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;    access_log /var/log/nginx/access.log main;    sendfile    on;    #tcp_nopush   on;    keepalive_timeout 65;    #gzip on;    fastcgi_connect_timeout 1800;    fastcgi_send_timeout 1800;    fastcgi_read_timeout 1800;    fastcgi_buffer_size 1024k;    fastcgi_buffers 32 1024k;    fastcgi_busy_buffers_size 2048k;    fastcgi_temp_file_write_size 2048k;    map $http_upgrade $connection_upgrade {    default upgrade;    &apos;&apos;   close;    }    include /etc/nginx/conf.d/*.conf;}</code></pre><p>测试配置文件是否正确</p><pre><code>/sbin/nginx -t    --使用-t参数进行验证nginx配置文件是否正确nginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful</code></pre><h6 id="2-6-3-添加-etc-nginx-conf-d-hp-conf配置"><a href="#2-6-3-添加-etc-nginx-conf-d-hp-conf配置" class="headerlink" title="2.6.3 添加/etc/nginx/conf.d/hp.conf配置"></a>2.6.3 添加/etc/nginx/conf.d/hp.conf配置</h6><pre><code>vi /etc/nginx/conf.d/hp.confupstream hp {    server 127.0.0.1:8000;    server 127.0.0.1:8001;    server 127.0.0.1:8002;    server 127.0.0.1:8003;}server {    listen  80;    server_name localhost;    proxy_connect_timeout 10d;    proxy_read_timeout 10d;    proxy_send_timeout 10d;    location /static/ {        alias   /usr/local/src/opencanary_web/dist/static/;    }    location / {        proxy_pass http://hp;        proxy_pass_header Server;        proxy_set_header Host $http_host;        proxy_redirect off;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Scheme $scheme;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;    }}</code></pre><p>启动/重启nginx</p><pre><code>启动:/sbin/nginx查看nginx是否已经启动Lps -aux | grep nginxroot     15002  0.0  0.0  56724  1212 ?        Ss   22:41   0:00 nginx: master process /sbin/nginxnginx    15003  0.0  0.1  57212  2040 ?        S    22:41   0:00 nginx: worker processnginx    15004  0.0  0.1  57212  2040 ?        S    22:41   0:00 nginx: worker processnginx    15005  0.0  0.1  57212  2040 ?        S    22:41   0:00 nginx: worker processnginx    15006  0.0  0.1  57212  2040 ?        S    22:41   0:00 nginx: worker processnginx    15007  0.0  0.1  57212  2040 ?        S    22:41   0:00 nginx: worker processroot     15034  0.0  0.0 112728   980 pts/0    R+   22:41   0:00 grep --color=auto nginx</code></pre><p>访问主机ip的80端口，查看是否可以正常访问、正常登陆。</p><h5 id="2-7-登陆管理后台"><a href="#2-7-登陆管理后台" class="headerlink" title="2.7 登陆管理后台"></a>2.7 登陆管理后台</h5><pre><code>http://ip</code></pre><h6 id="2-7-1-登陆页面："><a href="#2-7-1-登陆页面：" class="headerlink" title="2.7.1 登陆页面："></a>2.7.1 登陆页面：</h6><p><img src="https://i.loli.net/2019/07/20/5d3327b6d65ba39094.png" alt="后台页面.png"></p><h6 id="2-7-2-管理控制台："><a href="#2-7-2-管理控制台：" class="headerlink" title="2.7.2 管理控制台："></a>2.7.2 管理控制台：</h6><p><img src="https://i.loli.net/2019/07/20/5d332814c4da971352.png" alt="后台管理页面.png"></p><h4 id="三、安装客户端"><a href="#三、安装客户端" class="headerlink" title="三、安装客户端"></a>三、安装客户端</h4><p>当蜜罐管理后台部署完成之后，可以重新启用一台虚拟主机部署客户端。</p><p>这里优先推荐使用Centos7因为系统比较新默认python环境为2.7.x，类库也比较新。</p><h5 id="3-1-系统配置"><a href="#3-1-系统配置" class="headerlink" title="3.1 系统配置"></a>3.1 系统配置</h5><pre><code>系统：Centos 7Python: Python 2.7.X安装扩展源yum -y install epel-release安装依赖yum -y install libpcap-devel openssl-devel libffi-devel python-devel gcc python-pip gcc-c++</code></pre><h5 id="3-2-安装opencanary客户端"><a href="#3-2-安装opencanary客户端" class="headerlink" title="3.2 安装opencanary客户端"></a>3.2 安装opencanary客户端</h5><pre><code>cd /usr/local/src/git clone https://github.com/p1r06u3/opencanary.gitcd opencanary/修改配置文件：vi opencanary/data/settings.json</code></pre><p>将第2行，device.node_id的值opencanary-1代表将来告警的节点，改为主机名</p><pre><code>&quot;device.node_id&quot;: &quot;node2&quot;,</code></pre><p>将第3行，server.ip改成自己web服务端的ip</p><p>注意: 如果你的web端，不是80端口，要在配置的ip后面跟上“:端口号”。</p><pre><code>&quot;server.ip&quot;: &quot;172.31.8.8&quot;,</code></pre><p>将第4行，device.listen_addr改成自己本机ip(非127.0.0.1)。</p><pre><code>&quot;device.listen_addr&quot;: &quot;172.31.8.13&quot;,</code></pre><p><img src="https://i.loli.net/2019/07/20/5d332b1aa542e89869.png" alt="客户端配置.png"></p><h6 id="3-2-1-安装opencanary"><a href="#3-2-1-安装opencanary" class="headerlink" title="3.2.1 安装opencanary"></a>3.2.1 安装opencanary</h6><pre><code>python setup.py sdistcd distpip install opencanary-0.4.tar.gz</code></pre><h6 id="3-2-2-配置端口扫描发现功能"><a href="#3-2-2-配置端口扫描发现功能" class="headerlink" title="3.2.2 配置端口扫描发现功能"></a>3.2.2 配置端口扫描发现功能</h6><p>端口扫描发现模块是依赖于iptables；需要rsyslog配合产生kern.log日志。</p><p>安装iptables</p><pre><code>yum install iptables-services</code></pre><p>配置rsyslog</p><p>通过rsyslog 控制日志产生位置： vim /etc/rsyslog.conf</p><p>修改第50行</p><pre><code>kern.*                                                 /var/log/kern.log</code></pre><h6 id="3-2-3-重启rsyslog"><a href="#3-2-3-重启rsyslog" class="headerlink" title="3.2.3 重启rsyslog"></a>3.2.3 重启rsyslog</h6><pre><code>systemctl restart rsyslog</code></pre><h6 id="3-2-4-启动和停止opencanary方法"><a href="#3-2-4-启动和停止opencanary方法" class="headerlink" title="3.2.4 启动和停止opencanary方法"></a>3.2.4 启动和停止opencanary方法</h6><pre><code>若第一次安装opencanary，需要先运行opencanaryd --copyconfig，会生成/root/.opencanary.conf配置文件。启动命令: opencanaryd --start停止命令: opencanaryd --stop重启命令: opencanaryd --restartopencanary日志: /var/tmp/opencanary.log</code></pre><h6 id="3-2-5-启动opencanaryd"><a href="#3-2-5-启动opencanaryd" class="headerlink" title="3.2.5 启动opencanaryd"></a>3.2.5 启动opencanaryd</h6><pre><code>opencanaryd --start查看进程：ps -aux | grep opencanroot     21586  0.1  4.4 412296 83484 ?        Sl   23:46   0:00 /usr/bin/python2 /usr/bin/twistd -y /usr/bin/opencanary.tac --pidfile /usr/bin/opencanaryd.pid --syslog --prefix=opencanaryd</code></pre><p>在后台管理页面查看主机状态：<br><img src="https://i.loli.net/2019/07/20/5d33370ce12f982913.png" alt="主机列表.png"><br>可以看到新增加的node2节点已经出现在管理页面里</p><h6 id="3-2-6-卸载opencanary方法："><a href="#3-2-6-卸载opencanary方法：" class="headerlink" title="3.2.6 卸载opencanary方法："></a>3.2.6 卸载opencanary方法：</h6><pre><code>首先卸载旧客户端opencanaryd --stoprm -rf /root/.opencanary.confrm -rf  /usr/local/src/opencanary/pip uninstall opencanary -yiptables -t mangle -F安装新客户端curl -O https://raw.githubusercontent.com/p1r06u3/opencanary_web/master/install/install_opencanary_agent.shbash install_opencanary_agent.sh</code></pre><h4 id="四、后台可统计的信息"><a href="#四、后台可统计的信息" class="headerlink" title="四、后台可统计的信息"></a>四、后台可统计的信息</h4><pre><code>1.ftp登录尝试；2.http访问请求；3.http登录请求；4.ssh建立连接；5.ssh远程版本发送；6.ssh登录尝试；7.telnet登录尝试；8.全端口(SYN)扫描识别;9.NMAP OS扫描识别；10.NMAP NULL扫描识别；11.NMAP XMAS扫描识别；12.NMAP FIN扫描识别；13.mysql登录尝试；14.git clone请求；16.ntp monlist请求（默认关闭）；16.redis命令请求；17.TCP连接请求；18.vnc连接请求；19.rdp协议windows远程登录；20.snmp扫描；21.sip请求；22.mssql登录sql账户认证；23.mssql登录win身份认证；24.http代理登录尝试；</code></pre><h4 id="五、参考："><a href="#五、参考：" class="headerlink" title="五、参考："></a>五、参考：</h4><p><a href="https://github.com/p1r06u3/opencanary_web/blob/master/docs/install/Linux_AutoInstall.md" target="_blank" rel="noopener">自动安装</a><br><a href="https://github.com/p1r06u3/opencanary_web/blob/master/docs/install/Manual_Installation.md#%E6%89%8B%E5%B7%A5%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">手动安装</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="安全" scheme="https://architectang.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="https://architectang.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用Python统计nginx日志前十个IP的访问量，并以柱状图显示</title>
    <link href="https://architectang.github.io/2018/12/28/%E4%BD%BF%E7%94%A8Python%E7%BB%9F%E8%AE%A1nginx%E6%97%A5%E5%BF%97%E5%89%8D%E5%8D%81%E4%B8%AAIP%E7%9A%84%E8%AE%BF%E9%97%AE%E9%87%8F%EF%BC%8C%E5%B9%B6%E4%BB%A5%E6%9F%B1%E7%8A%B6%E5%9B%BE%E6%98%BE%E7%A4%BA/"/>
    <id>https://architectang.github.io/2018/12/28/使用Python统计nginx日志前十个IP的访问量，并以柱状图显示/</id>
    <published>2018-12-28T15:48:31.000Z</published>
    <updated>2019-07-10T16:06:18.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h6 id="1、脚本代码"><a href="#1、脚本代码" class="headerlink" title="1、脚本代码"></a>1、脚本代码</h6><p><a href="https://www.cnblogs.com/ArchitecTang/p/10189811.html" target="_blank" rel="noopener">可参考本人博客园文章</a></p><pre><code>import matplotlib.pyplot as pltnginx_file = &apos;&apos;  --填写nginx日志文件名，需在同一目录ip = {}#筛选nginx日志文件中的IPwith open(nginx_file) as f:    for i in f.readlines():        s = i.strip().split()[0]        lengh = len(ip.keys())        #统计每个IP的访问以字典存储        if s in ip.keys():            ip[s] = ip[s] + 1        else:            ip[s] = 1#以IP出现的次数排序返回对象为listip = sorted(ip.items(), key=lambda e:e[1], reverse=True)#取列表前十newip = ip[0:20:1]tu = dict(newip)x = []y = []for k in tu:    x.append(k)    y.append(tu[k])plt.title(&apos;ip access&apos;)plt.xlabel(&apos;ip address&apos;)plt.ylabel(&apos;pv&apos;)#X 轴项的翻转角度plt.xticks(rotation=70)#显示每个柱状图的值for a,b in zip(x,y):    plt.text(a, b, &apos;%.0f&apos; % b, ha=&apos;center&apos;, va= &apos;bottom&apos;,fontsize=7)plt.bar(x,y)plt.legend()plt.show()</code></pre><h6 id="2、效果图"><a href="#2、效果图" class="headerlink" title="2、效果图:"></a>2、效果图:</h6><p><img src="https://i.loli.net/2019/07/10/5d260b4e522ce72252.png" alt="nginx柱状图.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python" scheme="https://architectang.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://architectang.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Nginx入门(安装配置)</title>
    <link href="https://architectang.github.io/2018/12/26/Nginx%E5%85%A5%E9%97%A8-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://architectang.github.io/2018/12/26/Nginx入门-安装配置/</id>
    <published>2018-12-26T13:36:36.000Z</published>
    <updated>2019-07-26T14:47:48.751Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h4 id="Nginx-是什么？"><a href="#Nginx-是什么？" class="headerlink" title="Nginx 是什么？"></a>Nginx 是什么？</h4><p>nginx是俄罗斯人 Igor Sysoev为俄罗斯访问量第二的Rambler.ru站点开发的一个十分轻量级的HTTP服务器。它是一个高性能的HTTP和反向代理服务器，同时也可以作为IMAP/POP3/SMTP的代理服务器。nginx使用的是BSD许可。</p><p>Nginx 以事件驱动的方式编写，所以有非常好的性能，同时也是一个非常高效的反向代理、负载平衡。</p><p>Nginx 因为它的稳定性、丰富的模块库、灵活的配置和低系统资源的消耗而闻名。</p><h5 id="核心特点："><a href="#核心特点：" class="headerlink" title="核心特点："></a>核心特点：</h5><p>高并发请求的同时保持高效的服务</p><p>热部署</p><p>低内存消耗</p><p>处理响应请求很快</p><p>具有很高的可靠性</p><p>nginx可以实现高效的反向代理、负载均衡。</p><h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><h5 id="1-1-安装编译工具及依赖"><a href="#1-1-安装编译工具及依赖" class="headerlink" title="1.1 安装编译工具及依赖"></a>1.1 安装编译工具及依赖</h5><pre><code>yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel pcre pcre-devel</code></pre><h5 id="1-2-安装nginx"><a href="#1-2-安装nginx" class="headerlink" title="1.2 安装nginx"></a>1.2 安装nginx</h5><p>下载nginx</p><pre><code>wget http://nginx.org/download/nginx-1.8.1.tar.gz</code></pre><p>解压安装</p><pre><code>tar -xf nginx-1.8.1.tar.gz -C /software/cd /software/ &amp;&amp; mkdir nginx &amp;&amp; cd nginx-1.8.1</code></pre><p>编译，指定nginx 安装目录：/software/nginx</p><pre><code>./configure --prefix=/software/nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio</code></pre><p>安装</p><pre><code>make &amp;&amp; make install</code></pre><p>启动nginx</p><pre><code>/software/nginx/sbin/nginx -tnginx: the configuration file /software/nginx/conf/nginx.conf syntax is oknginx: configuration file /software/nginx/conf/nginx.conf test is successful/software/nginx/sbin/nginxps -ef | grep nginxroot     22917     1  0 22:01 ?        00:00:00 nginx: master process /software/nginx/sbin/nginxnobody   22918 22917  0 22:01 ?        00:00:00 nginx: worker processroot     22920 21803  0 22:01 pts/1    00:00:00 grep --color=auto nginx</code></pre><h5 id="1-3-访问测试"><a href="#1-3-访问测试" class="headerlink" title="1.3 访问测试"></a>1.3 访问测试</h5><p><a href="http://IPaddr,出现以下页面nginx就已经安装成功" target="_blank" rel="noopener">http://IPaddr,出现以下页面nginx就已经安装成功</a><br><img src="https://i.loli.net/2019/07/26/5d3b06de61f2657662.png" alt="安装测试.png"></p><h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><h5 id="2-1-创建nginx-运行用户"><a href="#2-1-创建nginx-运行用户" class="headerlink" title="2.1 创建nginx 运行用户"></a>2.1 创建nginx 运行用户</h5><pre><code>/usr/sbin/groupadd www/usr/sbin/useradd -g www www</code></pre><h5 id="2-2-配置nginx-conf"><a href="#2-2-配置nginx-conf" class="headerlink" title="2.2 配置nginx.conf"></a>2.2 配置nginx.conf</h5><pre><code>user  www www;    --- 指定nginx启动用户worker_processes  1;error_log  logs/nginx_error.log crit; ---配置日志存储位置和级别pid        logs/nginx.pid;         --- 设置nginx.pid 文件存储位置events {    worker_connections  65535;}http {    include       mime.types;    default_type  application/octet-stream;    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;                    &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;                    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;    sendfile        on;    #keepalive_timeout  0;    keepalive_timeout  65;    server {        listen       80;        server_name   172.31.8.11;        #charset koi8-r;        access_log  logs/172.31.8.11_access.log  main;   --- 设置日志格式        access_log  logs/172.31.8.11_json_access.log main;  --- 设置json 日志格式        location / {            root   html;            index  index.html index.htm;        }        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ {        #    proxy_pass   http://127.0.0.1;        #}        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ {        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;        #    include        fastcgi_params;        #}        # deny access to .htaccess files, if Apache&apos;s document root        # concurs with nginx&apos;s one        #        #location ~ /\.ht {        #    deny  all;        #}    }    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    #server {    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}}/software/nginx/sbin/nginx -tnginx: the configuration file /software/nginx/conf/nginx.conf syntax is oknginx: configuration file /software/nginx/conf/nginx.conf test is successful/software/nginx/sbin/nginx -s reload相关命令：/usr/local/webserver/nginx/sbin/nginx -s reload            --  重新载入配置文件/usr/local/webserver/nginx/sbin/nginx -s reopen            --  重启 Nginx/usr/local/webserver/nginx/sbin/nginx -s stop              --  停止 Nginx</code></pre><p>以上就是Nginx安装后的简单配置</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="Nginx" scheme="https://architectang.github.io/categories/Linux/Nginx/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://architectang.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>PTES渗透测试执行标准</title>
    <link href="https://architectang.github.io/2018/09/17/PTES%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%89%A7%E8%A1%8C%E6%A0%87%E5%87%86/"/>
    <id>https://architectang.github.io/2018/09/17/PTES渗透测试执行标准/</id>
    <published>2018-09-17T02:57:50.000Z</published>
    <updated>2019-07-19T11:57:34.727Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h5 id="渗透测试注意事项："><a href="#渗透测试注意事项：" class="headerlink" title="渗透测试注意事项："></a>渗透测试注意事项：</h5><p>1、不要进行恶意攻击</p><p>2、不要做傻事</p><p>3、在没有获得书面授权时，不要攻击任何目标</p><p>4、考虑清楚攻击将会带来的后果</p><p>4、如果干了非法的事情，记得天网恢恢疏而不漏</p><p><a href="http://www.pentest-standard.org/" target="_blank" rel="noopener">参考官方对于渗透测试执行标准描述（PTES）</a></p><a id="more"></a><p><img src="https://www.aqniu.com/wp-content/uploads/2017/09/Tips-to-Use-Penetration-Testing-App-Developer-Magazine_c80f71bi.jpg" alt></p><h5 id="一：前期交互阶段"><a href="#一：前期交互阶段" class="headerlink" title="一：前期交互阶段"></a>一：前期交互阶段</h5><p>在前期交互阶段，渗透测试团队与客户组织进行交互讨论，最重要的是确定渗透测试的范围、目标、限制条件以及合同细节</p><p>该阶段通常涉及收集客户需求，准备测试计划、定义测试范围与边界、定义业务目标、项目管理与规划等活动</p><h5 id="二：情报收集阶段"><a href="#二：情报收集阶段" class="headerlink" title="二：情报收集阶段"></a>二：情报收集阶段</h5><p>在目标范围确定之后，将进入情报搜集（Information Gathering）阶段，渗透团队可以利用各种信息来源与搜集技术方法，尝试更多关于组织网络拓扑、系统配置与安全防御措施的信息。</p><p>渗透测试者可以使用情报搜集方法包括公开来源信息查询、google Hacking 、社会工程学、网络踩点、扫描探测、被动监听、服务查点等。而对目标系统的情报探查能力是渗透者一项非常重要的技能，情报搜集是否充分在很大程度上决定了渗透测的成败，因为如果你遗漏关键的情报信息，你将可能在后面的阶段一无所获。</p><h5 id="三：威胁建模阶段"><a href="#三：威胁建模阶段" class="headerlink" title="三：威胁建模阶段"></a>三：威胁建模阶段</h5><p>在搜集到充分的情报信息之后，渗透测试团队的成员们停下敲击键盘，大家聚到一起针对获取的信息进行威胁建模（Threat Modeling）与攻击规划。这是渗透测试过程中非常重要，但很容易被忽视的一个关键点。<br>通过团队共同的缜密情报分析与攻击思路头脑风暴，可以从大量的信息情报中理清头绪，确定出最可行的攻击通道。<br>四：漏洞分析阶段<br>在确定出最可行的攻击通道之后，接下来需要考虑该如何取得目标系统的访问控制权，即漏洞分析（Vulnerability Analysis）阶段。<br>在该阶段，渗透测试者需要综合分析前几个阶段获取并汇总的情报信息，特别是安全漏洞扫描结果、服务查点信息等，通过搜索可获取的渗透代码资源，找出可以实施渗透攻击的攻击点，并在实验环境中进行验证。在该阶段，高水平的渗透测试团队还会针对攻击通道上的一些关键系统与服务进行安全漏洞探测与挖掘，期望找出可被利用的未知安全漏洞，并开发出渗透代码，从而打开攻击通道上的关键路径。</p><h5 id="五：渗透攻击阶段"><a href="#五：渗透攻击阶段" class="headerlink" title="五：渗透攻击阶段"></a>五：渗透攻击阶段</h5><p>渗透攻击（Exploitation）是渗透测试过程中最具有魅力的环节。在此环节中，渗透测试团队需要利用他们所找出的目标系统安全漏洞，来真正入侵系统当中，获得访问控制权。<br>渗透攻击可以利用公开渠道可获取的渗透代码，但一般在实际应用场景中，渗透测试者还需要充分地考虑目标系统特性来定制渗透攻击，并需要挫败目标网络与系统中实施的安全防御措施，才能成功达成渗透目的。在黑盒测试中，渗透测试者还需要考虑对目标系统检测机制的逃逸，从而避免造成目标组织安全响应团队的警觉和发现</p><h5 id="六：后渗透攻击阶段"><a href="#六：后渗透攻击阶段" class="headerlink" title="六：后渗透攻击阶段"></a>六：后渗透攻击阶段</h5><p>后渗透攻击（Post Exploitation）是整个渗透测试过程中最能够体现渗透测试团队创造力与技术能力的环节。前面的环节可以说都是在按部就班地完成非常普遍的目标，而在这个环节中，需要渗透测试团队根据目标组织的业务经营模式、保护资产形式与安全防御计划的不同特点，自主设计出攻击目标，识别关键基础设施，并寻找客户组织最具价值和尝试安全保护的信息和资产，最终达成能够对客户组织造成最重要业务影响的攻击途径。<br>在不同的渗透测试场景中，这些攻击目标与途径可能是千变万化的，而设置是否准确并且可行，也取决于团队自身的创新意识、知识范畴、实际经验和技术能力。</p><h5 id="七：报告阶段"><a href="#七：报告阶段" class="headerlink" title="七：报告阶段"></a>七：报告阶段</h5><p>渗透测试过程最终向客户组织提交，取得认可并成功获得合同付款的就是一份渗透测试报告（Reporting）。这份报告凝聚了之前所有阶段之中渗透测试团队所获取的关键情报信息、探测和发掘出的系统安全漏洞、成功渗透攻击的过程，以及造成业务影响后果的攻击途径，同时还要站在防御者的角度上，帮助他们分析安全防御体系中的薄弱环节、存在的问题，以及修补与升级技术方案。</p><h5 id="八：渗透术语："><a href="#八：渗透术语：" class="headerlink" title="八：渗透术语："></a>八：渗透术语：</h5><p>渗透攻击（Exploit）</p><p>攻击者利用安全漏洞，所进行的攻击行为，常见的渗透攻击技术包括缓冲区溢出、web应用程序漏洞攻击（SQL注入）、利用配置错误等</p><p>攻击载荷（Payload）</p><p>目标系统在被渗透攻击之后执行的代码</p><p>Shellcode</p><p>在渗透攻击时作为攻击载荷运行的一组机器指令，通常用汇编语言编写</p><p>模块（Module）</p><p>一段软件代码组件</p><p>监听器（Listener）</p><p>用来等待连入网络链接的组件</p><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --&gt;&lt;h5 id=&quot;渗透测试注意事项：&quot;&gt;&lt;a href=&quot;#渗透测试注意事项：&quot; class=&quot;headerlink&quot; title=&quot;渗透测试注意事项：&quot;&gt;&lt;/a&gt;渗透测试注意事项：&lt;/h5&gt;&lt;p&gt;1、不要进行恶意攻击&lt;/p&gt;&lt;p&gt;2、不要做傻事&lt;/p&gt;&lt;p&gt;3、在没有获得书面授权时，不要攻击任何目标&lt;/p&gt;&lt;p&gt;4、考虑清楚攻击将会带来的后果&lt;/p&gt;&lt;p&gt;4、如果干了非法的事情，记得天网恢恢疏而不漏&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.pentest-standard.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考官方对于渗透测试执行标准描述（PTES）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="https://architectang.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
      <category term="渗透测试" scheme="https://architectang.github.io/categories/%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="安全" scheme="https://architectang.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="渗透测试" scheme="https://architectang.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>docker 仓库harbor搭建</title>
    <link href="https://architectang.github.io/2018/09/12/docker-%E4%BB%93%E5%BA%93harbor%E6%90%AD%E5%BB%BA/"/>
    <id>https://architectang.github.io/2018/09/12/docker-仓库harbor搭建/</id>
    <published>2018-09-12T09:14:30.000Z</published>
    <updated>2019-07-21T06:17:54.392Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h5 id="一、初始化"><a href="#一、初始化" class="headerlink" title="一、初始化"></a>一、初始化</h5><p>在正式安装harbor之前，需要对OS环境进行初始化</p><h6 id="1-1-升级OS内核，具体内核升级步骤可以自己了解下"><a href="#1-1-升级OS内核，具体内核升级步骤可以自己了解下" class="headerlink" title="1.1 升级OS内核，具体内核升级步骤可以自己了解下"></a>1.1 升级OS内核，具体内核升级步骤可以自己了解下</h6><h6 id="1-2-安装yum源"><a href="#1-2-安装yum源" class="headerlink" title="1.2 安装yum源"></a>1.2 安装yum源</h6><p>因为需要安装相关的以来软件，所以需要安装yum源，安装前先将原先的yum备份</p><pre><code>[root@harbor yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak[root@harbor yum.repos.d]# vim CentOS-Base.repo[base]name=CentOS-$releasever – Base – 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=osbaseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever – Updates – 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updatesbaseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#additional packages that may be useful[extras]name=CentOS-$releasever – Extras – 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extrasbaseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever – Plus – 163.combaseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/gpgcheck=1enabled=0gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</code></pre><p><img src="https://i.loli.net/2019/07/12/5d2850a00566f24895.png" alt="epel.png"></p><h6 id="1-3-安装阿里云epel源"><a href="#1-3-安装阿里云epel源" class="headerlink" title="1.3 安装阿里云epel源"></a>1.3 安装阿里云epel源</h6><pre><code>wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</code></pre><p><img src="https://i.loli.net/2019/07/12/5d28510e95a7b40843.png" alt="安装epel.png"></p><h6 id="1-4-安装docker"><a href="#1-4-安装docker" class="headerlink" title="1.4 安装docker"></a>1.4 安装docker</h6><pre><code>yum -y install docker</code></pre><p>启动docker并查看docker版本<br><img src="https://i.loli.net/2019/07/12/5d2851689228260891.png" alt="安装docker.png"></p><h6 id="1-5-安装docker-compose"><a href="#1-5-安装docker-compose" class="headerlink" title="1.5 安装docker-compose"></a>1.5 安装docker-compose</h6><pre><code>yum -y install certbot libevent-devel gcc libffi-devel python-devel openssl-devel python2-pip</code></pre><p>使用pip的方式进行安装，命令如下</p><pre><code>pip install -U docker-compose</code></pre><p><img src="https://i.loli.net/2019/07/12/5d2851bd5d99095382.png" alt="dockercompose.png"><br>查看安装的版本</p><pre><code>docker-compose version</code></pre><p><img src="https://i.loli.net/2019/07/12/5d2851ed6e9fd60328.png" alt="查看安装.png"></p><h5 id="二、下载安装harbor，选择自己需要的版本"><a href="#二、下载安装harbor，选择自己需要的版本" class="headerlink" title="二、下载安装harbor，选择自己需要的版本"></a>二、下载安装harbor，选择自己需要的版本</h5><p>官网地址：<a href="http://harbor.orientsoft.cn/" target="_blank" rel="noopener">http://harbor.orientsoft.cn/</a><br><img src="https://i.loli.net/2019/07/12/5d2852421d18d60335.png" alt="Harbor.png"></p><h6 id="2-1-修改Harbor配置文件，修改服务地址"><a href="#2-1-修改Harbor配置文件，修改服务地址" class="headerlink" title="2.1 修改Harbor配置文件，修改服务地址"></a>2.1 修改Harbor配置文件，修改服务地址</h6><pre><code>[root@harbor ~]# lsanaconda-ks.cfg  harbor-offline-installer-v1.4.0.tgz[root@harbor ~]# tar xf harbor-offline-installer-v1.4.0.tgz [root@harbor ~]# lsanaconda-ks.cfg  harbor  harbor-offline-installer-v1.4.0.tgz[root@harbor ~]# mv harbor /usr/local/[root@harbor ~]# vim harbor.cfg</code></pre><p>修改hostname为主机的IP（没有域名的情况下）<br><img src="https://i.loli.net/2019/07/12/5d2852fc2cd6988291.png" alt="修改hostsname.png"></p><h6 id="2-2-修改harbor的默认admin密码（默认密码为Harbor12345）"><a href="#2-2-修改harbor的默认admin密码（默认密码为Harbor12345）" class="headerlink" title="2.2 修改harbor的默认admin密码（默认密码为Harbor12345）"></a>2.2 修改harbor的默认admin密码（默认密码为Harbor12345）</h6><p><img src="https://i.loli.net/2019/07/12/5d28535b2963447635.png" alt="修改Harbor默认密码.png"></p><h6 id="2-3-安装harbor"><a href="#2-3-安装harbor" class="headerlink" title="2.3 安装harbor"></a>2.3 安装harbor</h6><p><img src="https://i.loli.net/2019/07/12/5d2853818460889055.png" alt="安装.png"><br>步骤一会下载相关的docker镜像，这个过程根据各自的网络情况不同花费的时间也不同，相关的docker镜像如下：</p><pre><code>docker images</code></pre><p><img src="https://i.loli.net/2019/07/12/5d2853b91656a11429.png" alt="dockerimages.png"></p><h6 id="2-4-查看容器，可以看到没有Notary与Clair相关服务；也可使用”docker-ps”；"><a href="#2-4-查看容器，可以看到没有Notary与Clair相关服务；也可使用”docker-ps”；" class="headerlink" title="2.4 查看容器，可以看到没有Notary与Clair相关服务；也可使用”docker ps”；"></a>2.4 查看容器，可以看到没有Notary与Clair相关服务；也可使用”docker ps”；</h6><p>“docker-compose ps”需要在”docker-compose.yml”文件所在目录执行相关操作</p><pre><code>[root@harbor harbor]# docker-compose ps</code></pre><p><img src="https://i.loli.net/2019/07/12/5d2853fe445b964442.png" alt="dockerps.png"></p><h5 id="三、安装后配置"><a href="#三、安装后配置" class="headerlink" title="三、安装后配置"></a>三、安装后配置</h5><h6 id="3-1-访问harbor-ui-（注意服务器的防火墙和selinux，可以关闭或者放行相关端口）admin-默认密码"><a href="#3-1-访问harbor-ui-（注意服务器的防火墙和selinux，可以关闭或者放行相关端口）admin-默认密码" class="headerlink" title="3.1 访问harbor ui  （注意服务器的防火墙和selinux，可以关闭或者放行相关端口）admin/默认密码"></a>3.1 访问harbor ui （注意服务器的防火墙和selinux，可以关闭或者放行相关端口）admin/默认密码</h6><p><img src="https://i.loli.net/2019/07/12/5d28543a3a18690521.png" alt="登陆.png"><br>harbor安装完成<br><img src="https://i.loli.net/2019/07/12/5d285467ed7a348734.png" alt="登陆2.png"></p><h6 id="3-2-harbor-使用docker-login报错的问题"><a href="#3-2-harbor-使用docker-login报错的问题" class="headerlink" title="3.2 harbor 使用docker login报错的问题"></a>3.2 harbor 使用docker login报错的问题</h6><p><img src="https://i.loli.net/2019/07/12/5d28549b523cf57301.png" alt="登陆报错.png"><br>从harbor安装文档中可以看到<a href="https://github.com/vmware/harbor/blob/master/docs/installation_guide.md" target="_blank" rel="noopener">https://github.com/vmware/harbor/blob/master/docs/installation_guide.md</a><br><img src="https://i.loli.net/2019/07/12/5d2854e03c93357954.png" alt="报错排查.png"><br>在Harbor主机和客户机都对这个文件进行设置/etc/docker/daemon.json：</p><pre><code>{ &quot;insecure-registries&quot;:[&quot;192.168.33.10&quot;] }</code></pre><p><img src="https://i.loli.net/2019/07/12/5d28551d6227692895.png" alt="报错解决.png"></p><h5 id="四、简单使用"><a href="#四、简单使用" class="headerlink" title="四、简单使用"></a>四、简单使用</h5><h6 id="4-1-向harbor上推拉镜象"><a href="#4-1-向harbor上推拉镜象" class="headerlink" title="4.1 向harbor上推拉镜象"></a>4.1 向harbor上推拉镜象</h6><p>给docker.io/tomcat这个镜像打上tag</p><pre><code>[root@harbor ~]# docker tag docker.io/tomcat 172.31.8.25/library/tomcat2</code></pre><p><img src="https://i.loli.net/2019/07/12/5d28555f2525562448.png" alt="镜像推送.png"></p><h6 id="4-2-推送至harbor"><a href="#4-2-推送至harbor" class="headerlink" title="4.2 推送至harbor"></a>4.2 推送至harbor</h6><pre><code>[root@harbor ~]# docker push 172.31.8.25/library/tomcat2</code></pre><p><img src="https://i.loli.net/2019/07/12/5d28558b0c6d544922.png" alt="推送.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>(二)、Ansible在使用过程中出现的错误解决方法</title>
    <link href="https://architectang.github.io/2018/09/02/%E4%BA%8C-%E3%80%81Ansible%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://architectang.github.io/2018/09/02/二-、Ansible在使用过程中出现的错误解决方法/</id>
    <published>2018-09-02T04:47:00.000Z</published>
    <updated>2019-05-16T11:56:43.681Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h4 id="1-安装完成后允许命令出错"><a href="#1-安装完成后允许命令出错" class="headerlink" title="1.安装完成后允许命令出错"></a>1.安装完成后允许命令出错</h4><pre><code>Traceback (most recent call last):File &quot;/usr/bin/ansible&quot;, line 197, in &lt;module&gt;        (runner, results) = cli.run(options, args)File &quot;/usr/bin/ansible&quot;, line 163, in run        extra_vars=extra_vars,File &quot;/usr/lib/python2.6/site-packages/ansible/runner/__init__.py&quot;, line 233, in __init__        cmd = subprocess.Popen([&apos;ssh&apos;,&apos;-o&apos;,&apos;ControlPersist&apos;], stdout=subprocess.PIPE, stderr=subprocess.PIPE)File &quot;/usr/lib64/python2.6/subprocess.py&quot;, line 639, in __init__        errread, errwrite)File &quot;/usr/lib64/python2.6/subprocess.py&quot;, line 1228, in _execute_child        raise child_exceptionOSError: [Errno 2] No such file or directory</code></pre><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>yum -y install openssh-clients</p><h4 id="2-出现Error-ansible-requires-a-json-module-none-found"><a href="#2-出现Error-ansible-requires-a-json-module-none-found" class="headerlink" title="2.出现Error: ansible requires a json module, none found!"></a>2.出现Error: ansible requires a json module, none found!</h4><pre><code>SSH password:10.0.1.110 | FAILED &gt;&gt; {&quot;failed&quot;: true,&quot;msg&quot;: &quot;Error: ansible requires a json module, nonefound!&quot;,&quot;parsed&quot;: false}</code></pre><h5 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h5><p>python版本过低，可以升级python或者python-simplejson</p><h4 id="3-安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）"><a href="#3-安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）" class="headerlink" title="3.安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）"></a>3.安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）</h4><pre><code>FAILED =&gt; Using a SSH password insteadof a key is not possible because Host Key checking is enabled and sshpass doesnot support this.  Please add this host&apos;sfingerprint to your known_hosts file to manage this host.</code></pre><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>在ansible 服务器上使用ssh 登陆下/etc/ansible/hosts 里面配置的服务器。然后再次使用ansible 去管理就不会报上面的错误了！<br>但这样大批量登陆就麻烦来。因为默认ansible是使用key验证的，如果使用密码登陆的服务器，使用ansible的话，要不修改ansible.cfg配置文件<br>的ask_pass = True给取消注释，要不就在运行命令时候加上-k，这个意思是-k, –ask-pass ask for SSH password。再修改：</p><p>host_key_checking= False即可</p><h4 id="4-如果客户端不在know-hosts里将会报错"><a href="#4-如果客户端不在know-hosts里将会报错" class="headerlink" title="4.如果客户端不在know_hosts里将会报错"></a>4.如果客户端不在know_hosts里将会报错</h4><pre><code>paramiko: The authenticity of host &apos;192.168.24.15&apos;can&apos;t be established.The ssh-rsa key fingerprint is397c139fd4b0d763fcffaee346a4bf6b.Are you sure you want to continueconnecting (yes/no)?</code></pre><h5 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h5><p>需要修改ansible.cfg的#host_key_checking= False取消注释</p><h3 id="5-出现FAILED-gt-FAILED-not-a-valid-DSA-private-key-file"><a href="#5-出现FAILED-gt-FAILED-not-a-valid-DSA-private-key-file" class="headerlink" title="5.出现FAILED =&gt; FAILED: not a valid DSA private key file"></a>5.出现FAILED =&gt; FAILED: not a valid DSA private key file</h3><h5 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h5><p>需要你在最后命令内添加参数-k</p><h4 id="6-openssh升级后无法登录报错"><a href="#6-openssh升级后无法登录报错" class="headerlink" title="6.openssh升级后无法登录报错"></a>6.openssh升级后无法登录报错</h4><pre><code>PAM unable todlopen(/lib64/security/pam_stack.so): /lib64/security/pam_stack.so: cannot openshared objectfile: No such file or directory</code></pre><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>sshrpm 升级后会修改/etc/pam.d/sshd 文件。需要升级前备份此文件最后还原即可登录。</p><h4 id="7-第一次系统初始化运行生成本机ansible用户key时报错"><a href="#7-第一次系统初始化运行生成本机ansible用户key时报错" class="headerlink" title="7.第一次系统初始化运行生成本机ansible用户key时报错"></a>7.第一次系统初始化运行生成本机ansible用户key时报错</h4><pre><code>failed: [127.0.0.1] =&gt;{&quot;checksum&quot;: &quot;f5f2f20fc0774be961fffb951a50023e31abe920&quot;,&quot;failed&quot;: true}msg: Aborting, target uses selinux but pythonbindings (libselinux-python) aren&apos;t installed!FATAL: all hosts have already failed –aborting</code></pre><h5 id="解决办法-3"><a href="#解决办法-3" class="headerlink" title="解决办法"></a>解决办法</h5><p>yum -y install libselinux-python</p><p>参考: <a href="http://blog.csdn.net/longxibendi/article/details/46989735" target="_blank" rel="noopener">http://blog.csdn.net/longxibendi/article/details/46989735</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="自动化" scheme="https://architectang.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="自动化" scheme="https://architectang.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Ansible</title>
    <link href="https://architectang.github.io/2018/09/01/Ansible/"/>
    <id>https://architectang.github.io/2018/09/01/Ansible/</id>
    <published>2018-09-01T09:26:09.000Z</published>
    <updated>2019-05-17T06:29:45.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><p>1、ansible介绍：</p><p>Ansible是一款基于Python开发的自动化运维工具，主要是实现批量系统配置、批量程序部署、批量运行命令、批量执行任务等等诸多功能。</p><p>Ansible是一款灵活的开源工具，能够很大程度简化运维中的配置管理与流程控制方式，它利用推送方式对客户系统加以配置，这样所有工作都可在主服务器端完成。<br>Asible是基于模块工作的，其本身没有批量部署的能力，Ansible<del>~</del>一款运维自动化的软件！<br><a id="more"></a><br>1.1特性</p><p>(1)、no agents：不需要在被管控主机上安装任何客户端；</p><p>(2)、no server：无服务器端，使用时直接运行命令即可；</p><p>(3)、modules in any languages：基于模块工作，可使用任意语言开发模块；</p><p>(4)、yaml，not code：使用yaml语言定制剧本playbook；</p><p>(5)、ssh by default：基于SSH工作；</p><p>(6)、strong multi-tier solution：可实现多级指挥。</p><p><img src="/upload/201809/工作特性.jpg" alt="工作特性"></p><p>1.1 优点</p><p>(1)、轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</p><p>(2)、批量任务执行可以写成脚本，而且不用分发到远程就可以执行；</p><p>(3)、使用python编写，维护更简单，ruby语法过于复杂；</p><p>(4)、支持sudo。</p><p><img src="/upload/201809/工作机制.png" alt="工作机制"></p><p>2、ansible安装</p><p>安装epel 源：<br>rpm -ivh <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</a></p><p>安装ansible ：<br>yum install ansible -y</p><p>ssh-keygen 生成秘钥文件,如果不想输入密码可以一直回车</p><p>ssh-keygen -t rsa</p><p>cd /root/.ssh/ &amp;&amp; ll ./*</p><p>配置ansible 的hosts 文件：</p><p>vim /etc/ansible/hosts</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;1、ansible介绍：&lt;/p&gt;&lt;p&gt;Ansible是一款基于Python开发的自动化运维工具，主要是实现批量系统配置、批量程序部署、批量运行命令、批量执行任务等等诸多功能。&lt;/p&gt;&lt;p&gt;Ansible是一款灵活的开源工具，能够很大程度简化运维中的配置管理与流程控制方式，它利用推送方式对客户系统加以配置，这样所有工作都可在主服务器端完成。&lt;br&gt;Asible是基于模块工作的，其本身没有批量部署的能力，Ansible&lt;del&gt;~&lt;/del&gt;一款运维自动化的软件！&lt;br&gt;
    
    </summary>
    
      <category term="自动化" scheme="https://architectang.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="自动化" scheme="https://architectang.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>solr6+tomcat8+zookeeper 环境部署</title>
    <link href="https://architectang.github.io/2018/08/22/solr6+tomcat8+zookeeper%20%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <id>https://architectang.github.io/2018/08/22/solr6+tomcat8+zookeeper 环境部署/</id>
    <published>2018-08-22T01:20:50.000Z</published>
    <updated>2019-07-14T18:40:58.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><p>安装概述：</p><p>以下是部署环境：</p><p>系统环境为：</p><p>三台系统为Centos 6.8 的服务器</p><p>主机IP：10.6.11.19 10.6.11.23 10.6.11.22</p><p>软件环境为：</p><p>tomcat 8.5.24</p><p>jdk1.8.0_162</p><p>solr6.6.3</p><p>zookeepr-3.4.10</p><p>tomcat安装不多说，配置java环境即可启动，出现以下画面就说明tomcat服务已经部署完成</p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328195223983-641651017.png" alt></p><p>将solr6部署到tomcat 8 容器内（仅以单节点安装为例，三个节点的安装步骤是一样的）</p><pre><code>cp -r /home/tomcat/software/solr-6.6.3/server/solr-webapp/webapp /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solrcp -r /home/tomcat/software/solr-6.6.3/server/lib/metrics* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/rm -f /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/metrics-jetty9-3.2.2.jarcp -r /home/tomcat/software/solr-6.6.3/server/lib/ext/* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/cp -r /home/tomcat/software/solr-6.6.3/dist/solr-dataimporthandler-* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/libcp -r /home/tomcat/software/solr-6.6.3/dist/solr-clustering-6.6.3.jar /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/libmkdir /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/classescp -r /home/tomcat/software/solr-6.6.3/server/resources/log4j.properties /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/classes</code></pre><p>创建solrhome目录</p><p>mkdir /home/tomcat/apache-tomcat-8.5.24-solr/solrhome</p><p>cp -r /home/tomcat/software/solr-6.6.3/server/solr/* /home/tomcat/apache-tomcat-8.5.24-solr/solrhome/</p><p>修改web.xml文件，配置solrhome目录和solr访问权限</p><p>vim /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/web.xml</p><p>找到solr/home 根据自己的实际情况配置solr路径</p><pre><code>&lt;env-entry&gt;&lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;&lt;env-entry-value&gt;/home/tomcat/apache-tomcat-8.5.24-solr/solrhome&lt;/env-entry-value&gt;&lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;&lt;/env-entry&gt;</code></pre><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328205305280-636337399.png" alt></p><p>配置访问权限，注释下图红圈部分内容</p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328205537011-610781005.png" alt></p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328205630839-1475446582.png" alt></p><p>修改tomcat server.xml文件，配置服务访问端口</p><p>vim /home/tomcat/apache-tomcat-8.5.24-solr/conf/server.xml</p><pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;            maxHttpHeaderSize=&quot;8192&quot;            connectionTimeout=&quot;20000&quot;            maxThreads=&quot;150&quot;            maxSpareThreads=&quot;75&quot;            redirectPort=&quot;8443&quot; /&gt;    &lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</code></pre><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328205753674-2093690073.png" alt></p><p>修改solr配置文件 host设置为本机IP，port设置和tomcat端口一致，均为8080</p><p>vim /home/tomcat/apache-tomcat-8.5.24-solr/solrhome/solr.xml</p><pre><code>&lt;solr&gt;    &lt;solrcloud&gt;        &lt;str name=&quot;host&quot;&gt;${host:10.6.11.19}&lt;/str&gt;        &lt;int name=&quot;hostPort&quot;&gt;${jetty.port:8080}&lt;/int&gt;        &lt;str name=&quot;hostContext&quot;&gt;${hostContext:solr}&lt;/str&gt;        &lt;bool name=&quot;genericCoreNodeNames&quot;&gt;${genericCoreNodeNames:true}&lt;/bool&gt;        &lt;int name=&quot;zkClientTimeout&quot;&gt;${zkClientTimeout:30000}&lt;/int&gt;        &lt;int name=&quot;distribUpdateSoTimeout&quot;&gt;${distribUpdateSoTimeout:600000}&lt;/int&gt;        &lt;int name=&quot;distribUpdateConnTimeout&quot;&gt;${distribUpdateConnTimeout:60000}&lt;/int&gt;        &lt;str name=&quot;zkCredentialsProvider&quot;&gt;${zkCredentialsProvider:org.apache.solr.common.cloud.DefaultZkCredentialsProvider}&lt;/str&gt;        &lt;str name=&quot;zkACLProvider&quot;&gt;${zkACLProvider:org.apache.solr.common.cloud.DefaultZkACLProvider}&lt;/str&gt;    &lt;/solrcloud&gt;    &lt;shardHandlerFactory name=&quot;shardHandlerFactory&quot;        class=&quot;HttpShardHandlerFactory&quot;&gt;        &lt;int name=&quot;socketTimeout&quot;&gt;${socketTimeout:600000}&lt;/int&gt;        &lt;int name=&quot;connTimeout&quot;&gt;${connTimeout:60000}&lt;/int&gt;    &lt;/shardHandlerFactory&gt;    &lt;/solr&gt;</code></pre><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328210119163-1720093871.png" alt></p><p>重启tomcat 服务，验证安装</p><p>访问地址：<a href="http://IP:8080/solr/#/" target="_blank" rel="noopener">http://IP:8080/solr/#/</a></p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328210304797-69359330.png" alt></p><p>出现以上页面，solr就已成功部署到tomcat容器内创建</p><p>根据需求创建分片,使用以下命令进行创建：</p><pre><code>http://IP:8080/solr/admin/collections?action=CREATE&amp;name=分片名称&amp;numShards=分片数&amp;replicationFactor=副本数&amp;maxShardsPerNode=节点数&amp;collection.configName=conf目录名称</code></pre><p>例如：</p><pre><code>http://10.6.11.19:8080/solr/admin/collections?action=CREATE&amp;name=user&amp;numShards=2&amp;replicationFactor=3&amp;maxShardsPerNode=3&amp;collection.configName=user</code></pre><p>出现以下参数即说明分片创建成功</p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328211655638-132166093.png" alt></p><p>访问<a href="http://IP:8080/solr/#/~cloud" target="_blank" rel="noopener">http://IP:8080/solr/#/~cloud</a> 验证分片</p><p><img src="https://img2018.cnblogs.com/blog/1571891/201903/1571891-20190328211547176-697804153.png" alt><br>使用此命令创建了两个分片，三个副本<br>一般只可以创建两个副本，增加&amp;maxShardsPerNode=3&amp;collection.configName=user 参数突破副本创建限制</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="搜索" scheme="https://architectang.github.io/categories/Linux/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="solr" scheme="https://architectang.github.io/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>tomcat 入门(安装配置篇)</title>
    <link href="https://architectang.github.io/2018/07/09/tomcat-%E5%85%A5%E9%97%A8(%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AF%87)/"/>
    <id>https://architectang.github.io/2018/07/09/tomcat-入门(安装配置篇)/</id>
    <published>2018-07-09T12:35:17.000Z</published>
    <updated>2019-07-21T06:17:18.714Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h6 id="tomcat简介"><a href="#tomcat简介" class="headerlink" title="tomcat简介"></a>tomcat简介</h6><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，它早期的名称为catalina，后来由Apache、Sun 和其他一些公司及个人共同开发而成，并更名为Tomcat。Tomcat 是一个小型的轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选，因为Tomcat 技术先进、性能稳定，成为目前比较流行的Web 应用服务器。Tomcat是应用（java）服务器，它只是一个servlet容器，是Apache的扩展，但它是独立运行的。目前最新的版本为Tomcat 8.0.24 Released。</p><p>Tomcat不是一个完整意义上的Jave EE服务器，它甚至都没有提供对哪怕是一个主要Java EE API的实现；但由于遵守apache开源协议，tomcat却又为众多的java应用程序服务器嵌入自己的产品中构建商业的java应用程序服务器，如JBoss和JOnAS。尽管Tomcat对Jave EE API的实现并不完整，然而很企业也在渐渐抛弃使用传统的Java EE技术（如EJB）转而采用一些开源组件来构建复杂的应用。这些开源组件如Structs、Spring和Hibernate，而Tomcat能够对这些组件实现完美的支持。</p><p><a href="http://www.ttlsa.com/tomcat/tomcat-install-and-configure/" target="_blank" rel="noopener">详细请参考-运维生存时间</a></p><h6 id="1、安装环境"><a href="#1、安装环境" class="headerlink" title="1、安装环境:"></a>1、安装环境:</h6><p>Centos 7 tomcat版本: apache-tomcat-8.5.42.tar java版本: java8</p><p><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">官方网站</a></p><p><a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">下载tomcat8</a></p><h6 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h6><p>上传至Linux 服务器</p><p>创建tomcat安装目录</p><pre><code>mkdir /tomcat</code></pre><p>解压tomcat、jdk</p><pre><code>[root@node1 tomcat]# ll总用量 178712-rw-r--r--. 1 root root   9711748 7月   9 10:55 apache-tomcat-8.5.42.tar.gz-rw-r--r--. 1 root root 173281904 7月   9 10:55 jdk-8u51-linux-x64.tar.gz[root@node1 tomcat]# tar xf jdk-8u51-linux-x64.tar.gz [root@node1 tomcat]# tar xf apache-tomcat-8.5.42.tar.gz [root@node1 tomcat]# </code></pre><p><img src="https://i.loli.net/2019/07/09/5d2401ef70aba45222.png" alt="软件列表"></p><h6 id="3、启动脚本配置"><a href="#3、启动脚本配置" class="headerlink" title="3、启动脚本配置"></a>3、启动脚本配置</h6><pre><code>#!/bin/bashsource /etc/sysconfig/i18nexport JAVA_HOME=/tomcat/jdk1.8.0_51export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH   --配置启动javaexport CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jarexport TOMCAT_HOME=/tomcat/apache-tomcat-8.5.42/export PATH=$PATH:$TOMCAT_HOME/bin#export JAVA_OPTS=&quot;$JAVA_OPTS -Xms10000m -Xmx10000m -Xmn4000m -XX:PermSize=256m -XX:MaxPermSize=512m&quot;    -配置程序内存PROG=&quot;tomcat&quot;IP_ADDR=$(/sbin/ifconfig eth0 | grep &quot;inet addr&quot; | awk &apos;{print $2}&apos; | awk -F &quot;:&quot; &apos;{print $2}&apos;)tomcat_start()  ---启动tomcat{        rm -fr /tomcat/apache-tomcat-8.5.42/work/*     ----删除缓存        rm -fr /tomcat/apache-tomcat-8.5.42/temp/*     ----删除临时缓存        echo  $&quot;Starting $IP_ADDR $PROG: &quot;        cd /tomcat/apache-tomcat-8.5.42/bin/        ./startup.sh        echo &quot;tomcat 8 starting......&quot;}tomcat_log()    ---查看程序日志{        echo -n $&quot;ShowLoging $IP_ADDR $PROG log: &quot;        tail -n200 -f /tomcat/apache-tomcat-8.5.42/logs/catalina.out}tomcat_stop()  ---停止tomcat{    echo $&quot;Stopping $IP_ADDR $PROG: &quot;        kill $(ps -ef | grep java | grep -v &quot;grep&quot; | grep &quot;apache-tomcat&quot; |awk -F &apos; &apos; &apos;{print $2}&apos;)        sleep 12        TOMCAT_STATUS1=$(ps -ef | grep java | grep -v &quot;grep&quot;| grep &quot;apache-tomcat&quot;)        if [ -n &quot;$TOMCAT_STATUS1&quot; ];then                echo &quot;Run Kill -9&quot;                kill -9 $(ps -ef | grep java | grep -v &quot;grep&quot; | grep &quot;apache-tomcat&quot; |awk -F &quot; &quot; &apos;{print $2}&apos;)                sleep 2        fi        TOMCAT_STATUS2=$(ps -ef | grep java | grep -v &quot;grep&quot;| grep &quot;apache-tomcat&quot; )        if [ -z &quot;$TOMCAT_STATUS2&quot; ];then                echo &quot;Tomcat Stop ok&quot;        else                exit 1        fi}tomcat_status()   ---查看tomcat程序状态{        ps -ef | grep java | grep -v &quot;grep&quot;| grep &quot;tomcat&quot;}case &quot;$1&quot; instart)        tomcat_start;        ;;stop)        tomcat_stop;        ;;restart)        tomcat_stop;        tomcat_start;        ;;status)                tomcat_status;                ;;log)        tomcat_log;                ;;*)        echo $&quot;Usage: $prog {start | stop | restart | log | status}&quot;        exit 1esac</code></pre><p>tomcat 需要jdk才能运行，上面解压以后我是在tomcat启动脚本里面配置的jdk目录，也可以定义在系统全局变量里面，但是我不会这么做，因为我们的环境经常是运行多个实例且JDK版本要求不同，如果安装多个jdk会造成全局冲突</p><p>全局变量定义方式:</p><pre><code>vim /etc/profile写入以下内容:export JAVA_HOME=/jboss/jdk1.8.0_51export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport JRE_HOME=$JAVA_HOME/jreexport PATH=$PATH:$JAVA_HOME/binsource /etc/profile -- 生效配置验证java[root@node1 ~]# java -versionjava version &quot;1.8.0_51&quot;Java(TM) SE Runtime Environment (build 1.8.0_51-b16)Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)[root@node1 ~]# </code></pre><p><img src="https://i.loli.net/2019/07/09/5d2411d062f9884358.png" alt="jdk.png"></p><h6 id="4、启动tomcat"><a href="#4、启动tomcat" class="headerlink" title="4、启动tomcat"></a>4、启动tomcat</h6><pre><code>[root@node1 ~]# ./tomcat.sh start   ---启动服务Starting  tomcat: Using CATALINA_BASE:   /tomcat/apache-tomcat-8.5.42Using CATALINA_HOME:   /tomcat/apache-tomcat-8.5.42Using CATALINA_TMPDIR: /tomcat/apache-tomcat-8.5.42/tempUsing JRE_HOME:        /jboss/jdk1.8.0_51/jreUsing CLASSPATH:       /tomcat/apache-tomcat-8.5.42/bin/bootstrap.jar:/tomcat/apache-tomcat-8.5.42/bin/tomcat-juli.jarTomcat started.tomcat 8 starting......[root@node1 ~]# ./tomcat.sh statusroot     24103     1  0 11:39 ?        00:00:04 /jboss/jdk1.8.0_51/jre/bin/java -Djava.util.logging.config.file=/tomcat/apache-tomcat-8.5.42/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Xms1000m -Xmx1000m -Xmn400m -XX:PermSize=256m -XX:MaxPermSize=512m -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /tomcat/apache-tomcat-8.5.42/bin/bootstrap.jar:/tomcat/apache-tomcat-8.5.42/bin/tomcat-juli.jar -Dcatalina.base=/tomcat/apache-tomcat-8.5.42 -Dcatalina.home=/tomcat/apache-tomcat-8.5.42 -Djava.io.tmpdir=/tomcat/apache-tomcat-8.5.42/temp org.apache.catalina.startup.Bootstrap start    09-Jul-2019 11:39:42.759 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.5.4209-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Jun 4 2019 20:29:04 UTC09-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.5.42.009-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux09-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-327.el7.x86_6409-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd6409-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /jboss/jdk1.8.0_51/jre09-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_51-b1609-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation09-Jul-2019 11:39:42.763 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /tomcat/apache-tomcat-8.5.4209-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /tomcat/apache-tomcat-8.5.4209-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/tomcat/apache-tomcat-8.5.42/conf/logging.properties09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xms1000m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xmx1000m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xmn400m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -XX:PermSize=256m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -XX:MaxPermSize=512m09-Jul-2019 11:39:42.764 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=204809-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources09-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=002709-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=09-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/tomcat/apache-tomcat-8.5.4209-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/tomcat/apache-tomcat-8.5.4209-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/tomcat/apache-tomcat-8.5.42/temp09-Jul-2019 11:39:42.765 信息 [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib]09-Jul-2019 11:39:43.048 信息 [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;http-nio-8080&quot;]09-Jul-2019 11:39:43.071 信息 [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read09-Jul-2019 11:39:43.095 信息 [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;ajp-nio-8009&quot;]09-Jul-2019 11:39:43.113 信息 [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read09-Jul-2019 11:39:43.124 信息 [main] org.apache.catalina.startup.Catalina.load Initialization processed in 1109 ms09-Jul-2019 11:39:43.158 信息 [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]09-Jul-2019 11:39:43.158 信息 [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.4209-Jul-2019 11:39:43.207 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/ROOT]09-Jul-2019 11:44:19.656 警告 [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [276,003] milliseconds.09-Jul-2019 11:44:19.697 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/ROOT] has finished in [276,491] ms09-Jul-2019 11:44:19.697 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/docs]09-Jul-2019 11:44:19.739 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/docs] has finished in [42] ms09-Jul-2019 11:44:19.739 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/examples]09-Jul-2019 11:44:20.212 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/examples] has finished in [473] ms09-Jul-2019 11:44:20.213 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/host-manager]09-Jul-2019 11:44:20.266 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/host-manager] has finished in [53] ms09-Jul-2019 11:44:20.266 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/tomcat/apache-tomcat-8.5.42/webapps/manager]09-Jul-2019 11:44:20.293 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/tomcat/apache-tomcat-8.5.42/webapps/manager] has finished in [27] ms09-Jul-2019 11:44:20.314 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-nio-8080&quot;]09-Jul-2019 11:44:20.342 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;ajp-nio-8009&quot;]09-Jul-2019 11:44:20.344 信息 [main] org.apache.catalina.startup.Catalina.start Server startup in 277219 ms    ----看到此输出，程序就已经正常启动</code></pre><p>通过浏览器访问tomcat服务,tomcat 默认端口号为8080</p><pre><code>http://ipaddr:8080</code></pre><p><img src="https://i.loli.net/2019/07/09/5d240e566144292606.png" alt="tomcat.png"><br>tomcat端口可在/conf/server.xml文件中修改</p><pre><code>67    Define a non-SSL/TLS HTTP/1.1 Connector on port 8080 68    --&gt; 69    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;    --将8080修改为80或其他需要的端口 70               connectionTimeout=&quot;20000&quot; 71               redirectPort=&quot;8443&quot; /&gt; 72    &lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</code></pre><p><img src="https://i.loli.net/2019/07/09/5d2413ad1c50b94868.png" alt="8080.png"><br>tomcat已安装完毕</p><h6 id="5、tomcat目录结构说明"><a href="#5、tomcat目录结构说明" class="headerlink" title="5、tomcat目录结构说明"></a>5、tomcat目录结构说明</h6><p><img src="https://i.loli.net/2019/07/09/5d240ec19f9ee56826.png" alt="目录结构.png"></p><pre><code>bin             -- 程序启动目录conf            -- 配置文件目录lib                -- 库文件目录logs            -- 日志文件目录temp            -- 临时缓存目录webapps            -- web 应用家目录work            -- 工作缓存目录</code></pre><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="Apache" scheme="https://architectang.github.io/categories/Linux/Apache/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="Apache" scheme="https://architectang.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>clamav Linux杀毒软件</title>
    <link href="https://architectang.github.io/2018/06/10/clamav%20Linux-%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6/"/>
    <id>https://architectang.github.io/2018/06/10/clamav Linux-杀毒软件/</id>
    <published>2018-06-10T07:24:56.000Z</published>
    <updated>2019-07-20T10:25:45.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><h5 id="一、clamav简介"><a href="#一、clamav简介" class="headerlink" title="一、clamav简介"></a>一、clamav简介</h5><p>ClamAV是一个C语言开发的开源病毒扫描工具用于检测木马/病毒/恶意软件等。可以在线更新病毒库，Linux系统的病毒较少，但是并不意味着病毒免疫，尤其是对于诸如邮件或者归档文件中夹杂的病毒往往更加难以防范，而ClamAV则能起到不少作用。<br><a href="http://www.clamav.net" target="_blank" rel="noopener">官网上关于clamav的解释很简单，就是一款用于木马、病毒、恶意软件以及其他恶意威胁的杀毒软件(点击此处跳转到官网)</a></p><p><a href="http://www.clamav.net/downloads" target="_blank" rel="noopener">官网下载地址</a></p><h6 id="更能特性："><a href="#更能特性：" class="headerlink" title="更能特性："></a>更能特性：</h6><p>1、主要用途 邮件网关的病毒扫描，内建支持多种邮件格式</p><p>2、高性能 提供多线程的扫描进程</p><p>3、命令行 提供密令行扫描方式</p><p>4、扫描对象 可以对要发送的邮件或者文件进行扫描</p><p>5、文件格式 支持多种文件格式</p><p>6、病毒库更新频度 一天多次病毒库的更新</p><p>7、归档文件 支持扫描多种归档文件,比如Zip, RAR, Dmg, Tar, Gzip, Bzip2, OLE2, Cabinet, CHM, BinHex, SIS等</p><p>8、文档 支持流行的文档文件，比如： MS Office文件，MacOffice文件, HTML, Flash, RTF，PDF</p><h6 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h6><p>CENTOS/RHEL</p><pre><code>yum -y install clamav</code></pre><p>Ubuntu/Debian</p><pre><code>apt-get install clamav    </code></pre><h5 id="二、安装杀毒软件"><a href="#二、安装杀毒软件" class="headerlink" title="二、安装杀毒软件"></a>二、安装杀毒软件</h5><pre><code>yum -y install clamav</code></pre><p>更新数据库</p><pre><code>freshclam</code></pre><p><img src="https://i.loli.net/2019/07/20/5d32e1b20615863780.png" alt="更新数据库.png"><br>病毒库文件</p><pre><code>/var/lib/clamav/daily.cvd/var/lib/clamav/main.cvd</code></pre><p>添加定时任务，设置自动更新:每两个小时自动更新</p><pre><code>crontab -e0  */2 * * * root /usr/share/clamav/freshclam-sleep</code></pre><h5 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h5><pre><code>clamscan是病毒扫描命令，以下是一些常用参数：clamscan      ---不加参数的使用：扫描当前目录下的文件clamscan -V   ---查看clamAV的版本clamscan -r   ---递归扫描子文件夹clamscan -i   ---仅仅显示被感染的文件clamscan -o   ---跳过显示状态ok的文件clamscan --remove       ---检测到有病毒时，直接删除clamscan --no-summary   ---不显示统计信息clamscan -l scan.log    ---将扫描日志写入scan.log文件                                         ---以上命令都可以在末尾添加文件夹，来扫描指定目录，如clamscan -r -i /home  --remove  -l scan.log   ---递归扫描/home/目录下的所有文件，只显示病毒文件，并同时删除</code></pre><p>示例：</p><pre><code>clamscan -l scan.log</code></pre><p><img src="https://i.loli.net/2019/07/20/5d32e3b169d8085122.png" alt="scanlog.png"></p><p>执行完以后会有详细的扫描信息</p><p><img src="https://i.loli.net/2019/07/20/5d32e7c7a53a630074.png" alt="扫描结果.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="安全" scheme="https://architectang.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
      <category term="系统病毒扫描" scheme="https://architectang.github.io/categories/%E5%AE%89%E5%85%A8/%E7%B3%BB%E7%BB%9F%E7%97%85%E6%AF%92%E6%89%AB%E6%8F%8F/"/>
    
    
      <category term="安全" scheme="https://architectang.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="系统杀毒" scheme="https://architectang.github.io/tags/%E7%B3%BB%E7%BB%9F%E6%9D%80%E6%AF%92/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统安全检查（shell）</title>
    <link href="https://architectang.github.io/2018/04/22/Linux%20%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%EF%BC%88shell%EF%BC%89/"/>
    <id>https://architectang.github.io/2018/04/22/Linux 系统安全检查（shell）/</id>
    <published>2018-04-22T01:14:09.000Z</published>
    <updated>2019-07-19T11:57:03.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Jul 29 2019 22:38:09 GMT+0800 (中国标准时间) --><p>脚本内容:</p><pre><code>#!/bin/bashecho &quot;         (__)&quot;echo &quot;         (oo)&quot;echo &quot;   /------\/ &quot;echo &quot;  / |    ||  &quot;echo &quot; *  /\---/\  &quot;echo &quot;   ~~   ~~   &quot;echo &quot;Are You Ready?&quot;read keyecho &quot;警告：本脚本只作为日常巡检使用，不会对服务器做任何修改，管理员可以根据此报告进行相应的设置。&quot;echo ------------------------------------------------------------------------echo &quot;查看系统时间&quot;DATE=`date`echo &quot;Date is $DATE&quot;echo ------------------------------------------------------------------------echo &quot;进行系统时间同步&quot;ntpdate time.nist.govecho ------------------------开始进行检查----------------------echo &quot;检查时间为&quot;DATE=`date`echo &quot;Date is $DATE&quot;echo ------------------------主机基本信息检查-----------------------echo &quot;系统版本（Centos或Rehead）&quot;cat /etc/redhat-releaseecho --------------------------------------------------------------------------echo &quot;系统位数（32位或64位）&quot;getconf LONG_BITecho -------------------------检查IP信息-----------------------------------------echo &quot;本机的ip地址是：&quot;ifconfig | grep --color &quot;\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}&quot;echo -------------------------检查系统用户信息---------------------------------------awk -F&quot;:&quot; &apos;{if($2!~/^!|^*/){print &quot;(&quot;$1&quot;)&quot; &quot; 是一个未被锁定的账户，请管理员检查是否需要锁定它或者删除它。&quot;}}&apos; /etc/shadowecho --------------------------------------------------------------------------more /etc/login.defs | grep -E &quot;PASS_MAX_DAYS&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos;  &apos;{if($2!=90){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;天，请管理员改成90天。&quot;}}&apos;echo --------------------------------------------------------------------------more /etc/login.defs | grep -E &quot;PASS_MIN_LEN&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos;  &apos;{if($2!=6){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;个字符，请管理员改成6个字符。&quot;}}&apos;echo --------------------------------------------------------------------------more /etc/login.defs | grep -E &quot;PASS_WARN_AGE&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos;  &apos;{if($2!=10){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;天，请管理员将口令到期警告天数改成10天。&quot;}}&apos;echo --------------------------------------------------------------------------grep TMOUT /etc/profile /etc/bashrc &gt; /dev/null|| echo &quot;未设置登录超时限制，请设置之，设置方法：在/etc/profile或者/etc/bashrc里面添加TMOUT=600参数&quot;echo ------------------------检查服务运行情况-----------------------------------if ps -elf |grep xinet |grep -v &quot;grep xinet&quot;;thenecho &quot;xinetd 服务正在运行，请检查是否可以把xinnetd服务关闭&quot;elseecho &quot;xinetd 服务未开启&quot;fiecho --------------------------------------------------------------------------echo &quot;查看系统密码文件修改时间&quot;ls -ltr /etc/passwdecho --------------------------------------------------------------------------echo  &quot;查看是否开启了ssh服务&quot;if service sshd status | grep -E &quot;listening on|active \(running\)&quot;; thenecho &quot;SSH服务已开启&quot;elseecho &quot;SSH服务未开启&quot;fiecho --------------------------------------------------------------------------echo &quot;查看是否开启了TELNET服务&quot;if more /etc/xinetd.d/telnetd 2&gt;&amp;1|grep -E &quot;disable=no&quot;; thenecho  &quot;TELNET服务已开启 &quot;elseecho  &quot;TELNET服务未开启 &quot;fiecho --------------------------------------------------------------------------echo  &quot;查看系统SSH远程访问设置策略(host.deny拒绝列表)&quot;if more /etc/hosts.deny | grep -E &quot;sshd: &quot;;more /etc/hosts.deny | grep -E &quot;sshd&quot;; thenecho  &quot;远程访问策略已设置 &quot;elseecho  &quot;远程访问策略未设置 &quot;fiecho --------------------------------------------------------------------------echo  &quot;查看系统SSH远程访问设置策略(hosts.allow允许列表)&quot;if more /etc/hosts.allow | grep -E &quot;sshd: &quot;;more /etc/hosts.allow | grep -E &quot;sshd&quot;; thenecho  &quot;远程访问策略已设置 &quot;elseecho  &quot;远程访问策略未设置 &quot;fiecho &quot;当hosts.allow和 host.deny相冲突时，以hosts.allow设置为准。&quot;echo -------------------------------------------------------------------------echo &quot;查看shell是否设置超时锁定策略&quot;if more /etc/profile | grep -E &quot;TIMEOUT= &quot;; thenecho  &quot;系统设置了超时锁定策略 &quot;elseecho  &quot;未设置超时锁定策略 &quot;fiecho -------------------------------------------------------------------------echo &quot;查看syslog日志审计服务是否开启&quot;if service syslog status | egrep &quot; active \(running&quot;;thenecho &quot;syslog服务已开启&quot;elseecho &quot;syslog服务未开启，建议通过service syslog start开启日志审计功能&quot;fiecho -------------------------------------------------------------------------echo &quot;查看syslog日志是否开启外发&quot;if more /etc/rsyslog.conf | egrep &quot;@...\.|@..\.|@.\.|\*.\* @...\.|\*\.\* @..\.|\*\.\* @.\.&quot;;thenecho &quot;客户端syslog日志已开启外发&quot;elseecho &quot;客户端syslog日志未开启外发&quot;fiecho -------------------------------------------------------------------------echo &quot;查看passwd文件中有哪些特权用户&quot;awk -F: &apos;$3==0 {print $1}&apos; /etc/passwdecho ------------------------------------------------------------------------echo &quot;查看系统中是否存在空口令账户&quot;awk -F: &apos;($2==&quot;!!&quot;) {print $1}&apos; /etc/shadowecho &quot;该结果不适用于Ubuntu系统&quot;echo ------------------------------------------------------------------------echo &quot;查看系统中root用户外连情况&quot;lsof -u root |egrep &quot;ESTABLISHED|SYN_SENT|LISTENING&quot;echo ----------------------------状态解释------------------------------echo &quot;ESTABLISHED的意思是建立连接。表示两台机器正在通信。&quot;echo &quot;LISTENING的&quot;echo &quot;SYN_SENT状态表示请求连接&quot;echo ------------------------------------------------------------------------echo &quot;查看系统中root用户TCP连接情况&quot;lsof -u root |egrep &quot;TCP&quot;echo ------------------------------------------------------------------------echo &quot;查看系统中存在哪些非系统默认用户&quot;echo &quot;root:x:“该值大于500为新创建用户，小于或等于500为系统初始用户”&quot;more /etc/passwd |awk -F &quot;:&quot; &apos;{if($3&gt;500){print &quot;/etc/passwd里面的&quot;$1 &quot;的值为&quot;$3&quot;，请管理员确认该账户是否正常。&quot;}}&apos;echo ------------------------------------------------------------------------echo &quot;检查系统守护进程&quot;more /etc/xinetd.d/rsync | grep -v &quot;^#&quot;echo ------------------------------------------------------------------------echo &quot;检查系统是否存在入侵行为&quot;more /var/log/secure |grep refusedecho ------------------------------------------------------------------------echo &quot;-----------------------检查系统是否存在PHP脚本后门---------------------&quot;if find / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rn 1&gt;/dev/null 2&gt;&amp;1;thenecho &quot;检测到PHP脚本后门&quot;find / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rnfind / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rn |awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/echo &quot;后门样本已拷贝到/tmp/目录&quot;elseecho &quot;未检测到PHP脚本后门&quot;fiecho ------------------------------------------------------------------------echo &quot;-----------------------检查系统是否存在JSP脚本后门---------------------&quot;find / -type f -name *.jsp | xargs egrep -l &quot;InputStreamReader\(this.is\)|W_SESSION_ATTRIBUTE|strFileManag|getHostAddress|wscript.shell|gethostbyname|cmd.exe|documents and settings|system32|serv-u|提权|jspspy|后门&quot; |sort -n|uniq -c |sort -rn 2&gt;&amp;1find / -type f -name *.jsp | xargs egrep -l &quot;InputStreamReader\(this.is\)|W_SESSION_ATTRIBUTE|strFileManag|getHostAddress|wscript.shell|gethostbyname|cmd.exe|documents and settings|system32|serv-u|提权|jspspy|后门&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/  2&gt;&amp;1 echo ------------------------------------------------------------------------echo &quot;----------------------检查系统是否存在HTML恶意代码---------------------&quot;if find / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; 1&gt;/dev/null 2&gt;&amp;1;thenecho &quot;发现HTML恶意代码&quot;find / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; |sort -n|uniq -c |sort -rnfind / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/echo &quot;后门样本已拷贝到/tmp/目录&quot;elseecho &quot;未检测到HTML恶意代码&quot;fiecho &quot;----------------------检查系统是否存在perl恶意程序----------------------&quot;if find / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot; 1&gt;/dev/null 2&gt;&amp;1;thenecho &quot;发现perl恶意程序&quot;find / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot;|sort -n|uniq -c |sort -rnfind / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot;|sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/echo &quot;可疑样本已拷贝到/tmp/目录&quot;elseecho &quot;未检测到perl恶意程序&quot;fiecho &quot;----------------------检查系统是否存在Python恶意程序----------------------&quot;find / -type f -name *.py | xargs egrep -l &quot;execCmd|cat /etc/issue|getAppProc|exploitdb&quot; |sort -n|uniq -c |sort -rnfind / -type f -name *.py | xargs egrep -l &quot;execCmd|cat /etc/issue|getAppProc|exploitdb&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/echo ------------------------------------------------------------------------echo &quot;-----------------------检查系统是否存在恶意程序---------------------&quot;find / -type f -perm -111  |xargs egrep &quot;UpdateProcessER12CUpdateGatesE6C|CmdMsg\.cpp|MiniHttpHelper.cpp|y4&apos;r3 1uCky k1d\!|execve@@GLIBC_2.0|initfini.c|ptmalloc_unlock_all2|_IO_wide_data_2|system@@GLIBC_2.0|socket@@GLIBC_2.0|gettimeofday@@GLIBC_2.0|execl@@GLIBC_2.2.5|WwW.SoQoR.NeT|2.6.17-2.6.24.1.c|Local Root Exploit|close@@GLIBC_2.0|syscall\(\__NR\_vmsplice,|Linux vmsplice Local Root Exploit|It looks like the exploit failed|getting root shell&quot; 2&gt;/dev/nullecho ------------------------------------------------------------------------echo &quot;检查网络连接和监听端口&quot;netstat -an echo &quot;--------------------------路由表、网络连接、接口信息--------------&quot;netstat -rn echo &quot;------------------------查看网卡详细信息--------------------------&quot;ifconfig -a echo ------------------------------------------------------------------------echo &quot;查看正常情况下登录到本机的所有用户的历史记录&quot;lastecho ------------------------------------------------------------------------echo &quot;检查系统中core文件是否开启&quot;ulimit -cecho &quot;core是unix系统的内核。当你的程序出现内存越界的时候,操作系统会中止你的进程,并将当前内存状态倒出到core文件中,以便进一步分析，如果返回结果为0，则是关闭了此功能，系统不会生成core文件&quot;echo ------------------------------------------------------------------------echo &quot;检查系统中关键文件修改时间&quot;ls -ltr /bin/ls /bin/login /etc/passwd /bin/ps /usr/bin/top /etc/shadow|awk &apos;{print &quot;文件名：&quot;$8&quot;  &quot;&quot;最后修改时间：&quot;$6&quot; &quot;$7}&apos;echo &quot;ls文件：是存储ls命令的功能函数，被删除以后，就无法执行ls命令，黑客可利用篡改ls文件来执行后门或其他程序。login文件：login是控制用户登录的文件，一旦被篡改或删除，系统将无法切换用户或登陆用户user/bin/passwd是一个命令，可以为用户添加、更改密码，但是，用户的密码并不保存在/etc/passwd当中，而是保存在了/etc/shadow当中etc/passwd是一个文件，主要是保存用户信息。sbin/portmap是文件转换服务，缺少该文件后，无法使用磁盘挂载、转换类型等功能。bin/ps 进程查看命令功能支持文件，文件损坏或被更改后，无法正常使用ps命令。usr/bin/top  top命令支持文件，是Linux下常用的性能分析工具,能够实时显示系统中各个进程的资源占用状况。etc/shadow shadow 是 /etc/passwd 的影子文件，密码存放在该文件当中，并且只有root用户可读。&quot;echo --------------------------------------------------------------------------echo &quot;-------------------查看系统日志文件是否存在--------------------&quot;log=/var/log/sysloglog2=/var/log/messagesif [ -e &quot;$log&quot; ]; thenecho  &quot;syslog日志文件存在！ &quot;elseecho  &quot;/var/log/syslog日志文件不存在！ &quot;fiif [ -e &quot;$log2&quot; ]; thenecho  &quot;/var/log/messages日志文件存在！ &quot;elseecho  &quot;/var/log/messages日志文件不存在！ &quot;fiecho --------------------------------------------------------------------------echo &quot;检查系统文件完整性2(MD5检查)&quot;echo &quot;该项会获取部分关键文件的MD5值并入库，默认保存在/etc/md5db中&quot;echo &quot;如果第一次执行，则会提示md5sum: /sbin/portmap: 没有那个文件或目录&quot;echo &quot;第二次重复检查时，则会对MD5DB中的MD5值进行匹配，来判断文件是否被更改过&quot;file=&quot;/etc/md5db&quot;if [ -e &quot;$file&quot; ]; then md5sum -c /etc/md5db 2&gt;&amp;1; else md5sum /etc/passwd &gt;&gt;/etc/md5dbmd5sum /etc/shadow &gt;&gt;/etc/md5dbmd5sum /etc/group &gt;&gt;/etc/md5dbmd5sum /usr/bin/passwd &gt;&gt;/etc/md5dbmd5sum /sbin/portmap&gt;&gt;/etc/md5dbmd5sum /bin/login &gt;&gt;/etc/md5dbmd5sum /bin/ls &gt;&gt;/etc/md5dbmd5sum /bin/ps &gt;&gt;/etc/md5dbmd5sum /usr/bin/top &gt;&gt;/etc/md5db;fiecho ----------------------------------------------------------------------echo &quot;------------------------主机性能检查--------------------------------&quot;echo &quot;CPU检查&quot;dmesg | grep -i cpuecho -----------------------------------------------------------------------more /proc/cpuinfoecho -----------------------------------------------------------------------echo &quot;内存状态检查&quot;vmstat 2 5echo -----------------------------------------------------------------------more /proc/meminfoecho -----------------------------------------------------------------------free -mecho -----------------------------------------------------------------------echo &quot;文件系统使用情况&quot;df -hecho -----------------------------------------------------------------------echo &quot;网卡使用情况&quot;lspci -tvecho ----------------------------------------------------------------------echo &quot;查看僵尸进程&quot;ps -ef | grep zombieecho ----------------------------------------------------------------------echo &quot;耗CPU最多的进程&quot;ps auxf |sort -nr -k 3 |head -5echo ----------------------------------------------------------------------echo &quot;耗内存最多的进程&quot;ps auxf |sort -nr -k 4 |head -5echo ----------------------------------------------------------------------echo ---------------------------------------------------------------------echo &quot;COPY RIGHT &quot;echo &quot;QQ：&quot;echo ----------------------结束时间为-------------------------------------DATE=`date`echo &quot;Date is $DATE&quot;echo ----------------------------------------------------------------------</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://architectang.github.io/categories/Linux/"/>
    
      <category term="shell" scheme="https://architectang.github.io/categories/Linux/shell/"/>
    
    
      <category term="Linux" scheme="https://architectang.github.io/tags/Linux/"/>
    
      <category term="shell" scheme="https://architectang.github.io/tags/shell/"/>
    
  </entry>
  
</feed>
