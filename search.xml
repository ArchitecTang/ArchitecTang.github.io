<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Rabbitmq 集群安装]]></title>
    <url>%2F2019%2F07%2F02%2FRabbitmq-%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[一、软件下载：下载Erlang 百度云提取码: 864m 下载Rabbitmq 源码包 百度云提取码: qwih 二、安装环境:node1 172.31.8.8 system Centos 7 node2 172.31.8.13 system Centos 7 node3 172.31.8.107 system Centos 7 node4 172.31.8.75 system Centos 7 软件版本： Erlang 21.3 rabbitmq 3.7.7 三、单点安装(以下操作需要在其他四个节点重复执行)1、分别编辑四台机器的/etc/hosts 文件，增加以下内容 172.31.8.8 node1 172.31.8.13 node2 172.31.8.107 node3 172.31.8.75 node4 2、安装依赖包 yum install -y *epel* gcc-c++ unixODBC unixODBC-devel openssl-devel ncurses-devel 3、编译安装 Erlang [root@node1 ~]# tar xf otp_src_21.3.tar.gz [root@node1 ~]# cd otp_src_21.3 [root@node1 otp_src_21.3]# ./configure --prefix=/usr/local/bin/erlang --without-javac [root@node1 otp_src_21.3]# make &amp;&amp; make install [root@node1 otp_src_21.3]# echo &quot;export PATH=$PATH:/usr/local/bin/erlang/bin:/usr/local/bin/rabbitmq_server-3.6.5/sbin&quot; &gt;&gt; /etc/profile [root@node1 otp_src_21.3]# source /etc/profile 查看erlang 是否安装成功，出现以下输出即证明erlang已经安装成功 4、安装Rabbitmq [root@node1 ~]# tar xf rabbitmq-server-generic-unix-3.7.7.tar [root@node2 ~]# mv rabbitmq_server-3.7.7 /usr/local/rabbitmq-3.7.7 [root@node2 ~]# cd /usr/local/rabbitmq-3.7.7/ [root@node1 ~]# echo &quot;export PATH=$PATH:/usr/local/rabbitmq-3.7.7/sbin&quot; &gt;&gt; /etc/profile [root@node1 ~]# source /etc/profile [root@node1 ~]# rabbitmq-plugins enable rabbitmq_management ---打开管理页面插件 [root@node1 ~]# rabbitmq-server -detached --后台启动服务 [root@node1 ~]# rabbitmqctl add_user admin 123456 --增加用户名admin，密码123456 [root@node1 ~]# rabbitmqctl set_permissions -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; [root@node1 ~]# rabbitmqctl set_user_tags admin administrator --设置用户admin为管理员 打开web页面，出现以下页面即安装成功 node1node2 四、部署集群:1、 修改 .erlang.cookie文件，node1、node4节点内容改为一致 [root@node1 ~]# chmod 400 .erlang.cookie --设置.erlang.cookie文件权限,为了防止添加集群失败四个节点均需要调整为一致 [root@node1 ~]# scp .erlang.cookie root@172.31.8.13:/root/ [root@node1 ~]# scp .erlang.cookie root@172.31.8.107:/root/ [root@node1 ~]# scp .erlang.cookie root@172.31.8.75:/root/ 添加集群失败报错示例: 出现此信息可根据提示进行排查2、 替换完.erlang.cookie文件，需要重启各个节点的rabbitmq服务 node1 [root@node1 ~]# kill -9 PID [root@node1 ~]# rabbitmq-server -detached node2 [root@node2 ~]# kill -9 PID [root@node2 ~]# rabbitmq-server -detached node3 [root@node3 ~]# kill -9 PID [root@node3 ~]# rabbitmq-server -detached node4 [root@node4 ~]# kill -9 PID [root@node5 ~]# rabbitmq-server -detached 3、添加节点到集群，将node1节点作为主节点 在 node2 节点执行以下命令： [root@node2 ~]# rabbitmqctl stop_app [root@node4 ~]# rabbitmqctl join_cluster rabbit@node1 --默认为disc节点，如果需要指定节点角色，可以添加--ram/--disc参数 [root@node4 ~]# rabbitmqctl start_app [root@node4 ~]# rabbitmqctl cluster_status 以上命令在在node3、4节点重复执行 执行结果:打开web管理页面查看状态 Rabbitmq集群已经安装完毕，四个节点均运行正常]]></content>
      <categories>
        <category>Linux</category>
        <category>Rabbitmq</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[solr6+tomcat8+zookeeper 环境部署]]></title>
    <url>%2F2019%2F05%2F22%2Fsolr6%2Btomcat8%2Bzookeeper%20%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[安装概述： 以下是部署环境： 系统环境为： 三台系统为Centos 6.8 的服务器 主机IP：10.6.11.19 10.6.11.23 10.6.11.22 软件环境为： tomcat 8.5.24 jdk1.8.0_162 solr6.6.3 zookeepr-3.4.10 tomcat安装不多说，配置java环境即可启动，出现以下画面就说明tomcat服务已经部署完成 将solr6部署到tomcat 8 容器内（仅以单节点安装为例，三个节点的安装步骤是一样的） cp -r /home/tomcat/software/solr-6.6.3/server/solr-webapp/webapp /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr cp -r /home/tomcat/software/solr-6.6.3/server/lib/metrics* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/ rm -f /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/metrics-jetty9-3.2.2.jar cp -r /home/tomcat/software/solr-6.6.3/server/lib/ext/* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib/ cp -r /home/tomcat/software/solr-6.6.3/dist/solr-dataimporthandler-* /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib cp -r /home/tomcat/software/solr-6.6.3/dist/solr-clustering-6.6.3.jar /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/lib mkdir /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/classes cp -r /home/tomcat/software/solr-6.6.3/server/resources/log4j.properties /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/classes 创建solrhome目录 mkdir /home/tomcat/apache-tomcat-8.5.24-solr/solrhome cp -r /home/tomcat/software/solr-6.6.3/server/solr/* /home/tomcat/apache-tomcat-8.5.24-solr/solrhome/ 修改web.xml文件，配置solrhome目录和solr访问权限 vim /home/tomcat/apache-tomcat-8.5.24-solr/webapps/solr/WEB-INF/web.xml 找到solr/home 根据自己的实际情况配置solr路径 &lt;env-entry&gt; &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt; &lt;env-entry-value&gt;/home/tomcat/apache-tomcat-8.5.24-solr/solrhome&lt;/env-entry-value&gt; &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt; &lt;/env-entry&gt; 配置访问权限，注释下图红圈部分内容 修改tomcat server.xml文件，配置服务访问端口 vim /home/tomcat/apache-tomcat-8.5.24-solr/conf/server.xml &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; maxHttpHeaderSize=&quot;8192&quot; connectionTimeout=&quot;20000&quot; maxThreads=&quot;150&quot; maxSpareThreads=&quot;75&quot; redirectPort=&quot;8443&quot; /&gt; &lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt; 修改solr配置文件 host设置为本机IP，port设置和tomcat端口一致，均为8080 vim /home/tomcat/apache-tomcat-8.5.24-solr/solrhome/solr.xml &lt;solr&gt; &lt;solrcloud&gt; &lt;str name=&quot;host&quot;&gt;${host:10.6.11.19}&lt;/str&gt; &lt;int name=&quot;hostPort&quot;&gt;${jetty.port:8080}&lt;/int&gt; &lt;str name=&quot;hostContext&quot;&gt;${hostContext:solr}&lt;/str&gt; &lt;bool name=&quot;genericCoreNodeNames&quot;&gt;${genericCoreNodeNames:true}&lt;/bool&gt; &lt;int name=&quot;zkClientTimeout&quot;&gt;${zkClientTimeout:30000}&lt;/int&gt; &lt;int name=&quot;distribUpdateSoTimeout&quot;&gt;${distribUpdateSoTimeout:600000}&lt;/int&gt; &lt;int name=&quot;distribUpdateConnTimeout&quot;&gt;${distribUpdateConnTimeout:60000}&lt;/int&gt; &lt;str name=&quot;zkCredentialsProvider&quot;&gt;${zkCredentialsProvider:org.apache.solr.common.cloud.DefaultZkCredentialsProvider}&lt;/str&gt; &lt;str name=&quot;zkACLProvider&quot;&gt;${zkACLProvider:org.apache.solr.common.cloud.DefaultZkACLProvider}&lt;/str&gt; &lt;/solrcloud&gt; &lt;shardHandlerFactory name=&quot;shardHandlerFactory&quot; class=&quot;HttpShardHandlerFactory&quot;&gt; &lt;int name=&quot;socketTimeout&quot;&gt;${socketTimeout:600000}&lt;/int&gt; &lt;int name=&quot;connTimeout&quot;&gt;${connTimeout:60000}&lt;/int&gt; &lt;/shardHandlerFactory&gt; &lt;/solr&gt; 重启tomcat 服务，验证安装 访问地址：http://IP:8080/solr/#/ 出现以上页面，solr就已成功部署到tomcat容器内创建 根据需求创建分片,使用以下命令进行创建： http://IP:8080/solr/admin/collections?action=CREATE&amp;name=分片名称&amp;numShards=分片数&amp;replicationFactor=副本数&amp;maxShardsPerNode=节点数&amp;collection.configName=conf目录名称 例如： http://10.6.11.19:8080/solr/admin/collections?action=CREATE&amp;name=user&amp;numShards=2&amp;replicationFactor=3&amp;maxShardsPerNode=3&amp;collection.configName=user 出现以下参数即说明分片创建成功 访问http://IP:8080/solr/#/~cloud 验证分片 使用此命令创建了两个分片，三个副本一般只可以创建两个副本，增加&amp;maxShardsPerNode=3&amp;collection.configName=user 参数突破副本创建限制]]></content>
      <categories>
        <category>Linux</category>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>solr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 系统安全检查（shell）]]></title>
    <url>%2F2019%2F05%2F22%2FLinux%20%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%EF%BC%88shell%EF%BC%89%2F</url>
    <content type="text"><![CDATA[脚本内容: #!/bin/bash echo &quot; (__)&quot; echo &quot; (oo)&quot; echo &quot; /------\/ &quot; echo &quot; / | || &quot; echo &quot; * /\---/\ &quot; echo &quot; ~~ ~~ &quot; echo &quot;Are You Ready?&quot; read key echo &quot;警告：本脚本只作为日常巡检使用，不会对服务器做任何修改，管理员可以根据此报告进行相应的设置。&quot; echo ------------------------------------------------------------------------ echo &quot;查看系统时间&quot; DATE=`date` echo &quot;Date is $DATE&quot; echo ------------------------------------------------------------------------ echo &quot;进行系统时间同步&quot; ntpdate time.nist.gov echo ------------------------开始进行检查---------------------- echo &quot;检查时间为&quot; DATE=`date` echo &quot;Date is $DATE&quot; echo ------------------------主机基本信息检查----------------------- echo &quot;系统版本（Centos或Rehead）&quot; cat /etc/redhat-release echo -------------------------------------------------------------------------- echo &quot;系统位数（32位或64位）&quot; getconf LONG_BIT echo -------------------------检查IP信息----------------------------------------- echo &quot;本机的ip地址是：&quot; ifconfig | grep --color &quot;\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}&quot; echo -------------------------检查系统用户信息--------------------------------------- awk -F&quot;:&quot; &apos;{if($2!~/^!|^*/){print &quot;(&quot;$1&quot;)&quot; &quot; 是一个未被锁定的账户，请管理员检查是否需要锁定它或者删除它。&quot;}}&apos; /etc/shadow echo -------------------------------------------------------------------------- more /etc/login.defs | grep -E &quot;PASS_MAX_DAYS&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos; &apos;{if($2!=90){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;天，请管理员改成90天。&quot;}}&apos; echo -------------------------------------------------------------------------- more /etc/login.defs | grep -E &quot;PASS_MIN_LEN&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos; &apos;{if($2!=6){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;个字符，请管理员改成6个字符。&quot;}}&apos; echo -------------------------------------------------------------------------- more /etc/login.defs | grep -E &quot;PASS_WARN_AGE&quot; | grep -v &quot;#&quot; |awk -F&apos; &apos; &apos;{if($2!=10){print &quot;/etc/login.defs里面的&quot;$1 &quot;设置的是&quot;$2&quot;天，请管理员将口令到期警告天数改成10天。&quot;}}&apos; echo -------------------------------------------------------------------------- grep TMOUT /etc/profile /etc/bashrc &gt; /dev/null|| echo &quot;未设置登录超时限制，请设置之，设置方法：在/etc/profile或者/etc/bashrc里面添加TMOUT=600参数&quot; echo ------------------------检查服务运行情况----------------------------------- if ps -elf |grep xinet |grep -v &quot;grep xinet&quot;;then echo &quot;xinetd 服务正在运行，请检查是否可以把xinnetd服务关闭&quot; else echo &quot;xinetd 服务未开启&quot; fi echo -------------------------------------------------------------------------- echo &quot;查看系统密码文件修改时间&quot; ls -ltr /etc/passwd echo -------------------------------------------------------------------------- echo &quot;查看是否开启了ssh服务&quot; if service sshd status | grep -E &quot;listening on|active \(running\)&quot;; then echo &quot;SSH服务已开启&quot; else echo &quot;SSH服务未开启&quot; fi echo -------------------------------------------------------------------------- echo &quot;查看是否开启了TELNET服务&quot; if more /etc/xinetd.d/telnetd 2&gt;&amp;1|grep -E &quot;disable=no&quot;; then echo &quot;TELNET服务已开启 &quot; else echo &quot;TELNET服务未开启 &quot; fi echo -------------------------------------------------------------------------- echo &quot;查看系统SSH远程访问设置策略(host.deny拒绝列表)&quot; if more /etc/hosts.deny | grep -E &quot;sshd: &quot;;more /etc/hosts.deny | grep -E &quot;sshd&quot;; then echo &quot;远程访问策略已设置 &quot; else echo &quot;远程访问策略未设置 &quot; fi echo -------------------------------------------------------------------------- echo &quot;查看系统SSH远程访问设置策略(hosts.allow允许列表)&quot; if more /etc/hosts.allow | grep -E &quot;sshd: &quot;;more /etc/hosts.allow | grep -E &quot;sshd&quot;; then echo &quot;远程访问策略已设置 &quot; else echo &quot;远程访问策略未设置 &quot; fi echo &quot;当hosts.allow和 host.deny相冲突时，以hosts.allow设置为准。&quot; echo ------------------------------------------------------------------------- echo &quot;查看shell是否设置超时锁定策略&quot; if more /etc/profile | grep -E &quot;TIMEOUT= &quot;; then echo &quot;系统设置了超时锁定策略 &quot; else echo &quot;未设置超时锁定策略 &quot; fi echo ------------------------------------------------------------------------- echo &quot;查看syslog日志审计服务是否开启&quot; if service syslog status | egrep &quot; active \(running&quot;;then echo &quot;syslog服务已开启&quot; else echo &quot;syslog服务未开启，建议通过service syslog start开启日志审计功能&quot; fi echo ------------------------------------------------------------------------- echo &quot;查看syslog日志是否开启外发&quot; if more /etc/rsyslog.conf | egrep &quot;@...\.|@..\.|@.\.|\*.\* @...\.|\*\.\* @..\.|\*\.\* @.\.&quot;;then echo &quot;客户端syslog日志已开启外发&quot; else echo &quot;客户端syslog日志未开启外发&quot; fi echo ------------------------------------------------------------------------- echo &quot;查看passwd文件中有哪些特权用户&quot; awk -F: &apos;$3==0 {print $1}&apos; /etc/passwd echo ------------------------------------------------------------------------ echo &quot;查看系统中是否存在空口令账户&quot; awk -F: &apos;($2==&quot;!!&quot;) {print $1}&apos; /etc/shadow echo &quot;该结果不适用于Ubuntu系统&quot; echo ------------------------------------------------------------------------ echo &quot;查看系统中root用户外连情况&quot; lsof -u root |egrep &quot;ESTABLISHED|SYN_SENT|LISTENING&quot; echo ----------------------------状态解释------------------------------ echo &quot;ESTABLISHED的意思是建立连接。表示两台机器正在通信。&quot; echo &quot;LISTENING的&quot; echo &quot;SYN_SENT状态表示请求连接&quot; echo ------------------------------------------------------------------------ echo &quot;查看系统中root用户TCP连接情况&quot; lsof -u root |egrep &quot;TCP&quot; echo ------------------------------------------------------------------------ echo &quot;查看系统中存在哪些非系统默认用户&quot; echo &quot;root:x:“该值大于500为新创建用户，小于或等于500为系统初始用户”&quot; more /etc/passwd |awk -F &quot;:&quot; &apos;{if($3&gt;500){print &quot;/etc/passwd里面的&quot;$1 &quot;的值为&quot;$3&quot;，请管理员确认该账户是否正常。&quot;}}&apos; echo ------------------------------------------------------------------------ echo &quot;检查系统守护进程&quot; more /etc/xinetd.d/rsync | grep -v &quot;^#&quot; echo ------------------------------------------------------------------------ echo &quot;检查系统是否存在入侵行为&quot; more /var/log/secure |grep refused echo ------------------------------------------------------------------------ echo &quot;-----------------------检查系统是否存在PHP脚本后门---------------------&quot; if find / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rn 1&gt;/dev/null 2&gt;&amp;1;then echo &quot;检测到PHP脚本后门&quot; find / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rn find / -type f -name *.php | xargs egrep -l &quot;mysql_query\($query, $dbconn\)|专用网马|udf.dll|class PHPzip\{|ZIP压缩程序 荒野无灯修改版|$writabledb|AnonymousUserName|eval\(|Root_CSS\(\)|黑狼PHP木马|eval\(gzuncompress\(base64_decode|if\(empty\($_SESSION|$shellname|$work_dir |PHP木马|Array\(&quot;$filename&quot;| eval\($_POST\[|class packdir|disk_total_space|wscript.shell|cmd.exe|shell.application|documents and settings|system32|serv-u|提权|phpspy|后门&quot; |sort -n|uniq -c |sort -rn |awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/ echo &quot;后门样本已拷贝到/tmp/目录&quot; else echo &quot;未检测到PHP脚本后门&quot; fi echo ------------------------------------------------------------------------ echo &quot;-----------------------检查系统是否存在JSP脚本后门---------------------&quot; find / -type f -name *.jsp | xargs egrep -l &quot;InputStreamReader\(this.is\)|W_SESSION_ATTRIBUTE|strFileManag|getHostAddress|wscript.shell|gethostbyname|cmd.exe|documents and settings|system32|serv-u|提权|jspspy|后门&quot; |sort -n|uniq -c |sort -rn 2&gt;&amp;1 find / -type f -name *.jsp | xargs egrep -l &quot;InputStreamReader\(this.is\)|W_SESSION_ATTRIBUTE|strFileManag|getHostAddress|wscript.shell|gethostbyname|cmd.exe|documents and settings|system32|serv-u|提权|jspspy|后门&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/ 2&gt;&amp;1 echo ------------------------------------------------------------------------ echo &quot;----------------------检查系统是否存在HTML恶意代码---------------------&quot; if find / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; 1&gt;/dev/null 2&gt;&amp;1;then echo &quot;发现HTML恶意代码&quot; find / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; |sort -n|uniq -c |sort -rn find / -type f -name *.html | xargs egrep -l &quot;WriteData|svchost.exe|DropPath|wsh.Run|WindowBomb|a1.createInstance|CurrentVersion|myEncString|DropFileName|a = prototype;|204.351.440.495.232.315.444.550.64.330&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/ echo &quot;后门样本已拷贝到/tmp/目录&quot; else echo &quot;未检测到HTML恶意代码&quot; fi echo &quot;----------------------检查系统是否存在perl恶意程序----------------------&quot; if find / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot; 1&gt;/dev/null 2&gt;&amp;1;then echo &quot;发现perl恶意程序&quot; find / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot;|sort -n|uniq -c |sort -rn find / -type f -name *.pl | xargs egrep -l &quot;SHELLPASSWORD|shcmd|backdoor|setsockopt|IO::Socket::INET;&quot;|sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/ echo &quot;可疑样本已拷贝到/tmp/目录&quot; else echo &quot;未检测到perl恶意程序&quot; fi echo &quot;----------------------检查系统是否存在Python恶意程序----------------------&quot; find / -type f -name *.py | xargs egrep -l &quot;execCmd|cat /etc/issue|getAppProc|exploitdb&quot; |sort -n|uniq -c |sort -rn find / -type f -name *.py | xargs egrep -l &quot;execCmd|cat /etc/issue|getAppProc|exploitdb&quot; |sort -n|uniq -c |sort -rn| awk &apos;{print $2}&apos; | xargs -I{} cp {} /tmp/ echo ------------------------------------------------------------------------ echo &quot;-----------------------检查系统是否存在恶意程序---------------------&quot; find / -type f -perm -111 |xargs egrep &quot;UpdateProcessER12CUpdateGatesE6C|CmdMsg\.cpp|MiniHttpHelper.cpp|y4&apos;r3 1uCky k1d\!|execve@@GLIBC_2.0|initfini.c|ptmalloc_unlock_all2|_IO_wide_data_2|system@@GLIBC_2.0|socket@@GLIBC_2.0|gettimeofday@@GLIBC_2.0|execl@@GLIBC_2.2.5|WwW.SoQoR.NeT|2.6.17-2.6.24.1.c|Local Root Exploit|close@@GLIBC_2.0|syscall\(\__NR\_vmsplice,|Linux vmsplice Local Root Exploit|It looks like the exploit failed|getting root shell&quot; 2&gt;/dev/null echo ------------------------------------------------------------------------ echo &quot;检查网络连接和监听端口&quot; netstat -an echo &quot;--------------------------路由表、网络连接、接口信息--------------&quot; netstat -rn echo &quot;------------------------查看网卡详细信息--------------------------&quot; ifconfig -a echo ------------------------------------------------------------------------ echo &quot;查看正常情况下登录到本机的所有用户的历史记录&quot; last echo ------------------------------------------------------------------------ echo &quot;检查系统中core文件是否开启&quot; ulimit -c echo &quot;core是unix系统的内核。当你的程序出现内存越界的时候,操作系统会中止你的进程,并将当前内存状态倒出到core文件中,以便进一步分析，如果返回结果为0，则是关闭了此功能，系统不会生成core文件&quot; echo ------------------------------------------------------------------------ echo &quot;检查系统中关键文件修改时间&quot; ls -ltr /bin/ls /bin/login /etc/passwd /bin/ps /usr/bin/top /etc/shadow|awk &apos;{print &quot;文件名：&quot;$8&quot; &quot;&quot;最后修改时间：&quot;$6&quot; &quot;$7}&apos; echo &quot;ls文件：是存储ls命令的功能函数，被删除以后，就无法执行ls命令，黑客可利用篡改ls文件来执行后门或其他程序。 login文件：login是控制用户登录的文件，一旦被篡改或删除，系统将无法切换用户或登陆用户 user/bin/passwd是一个命令，可以为用户添加、更改密码，但是，用户的密码并不保存在/etc/passwd当中，而是保存在了/etc/shadow当中 etc/passwd是一个文件，主要是保存用户信息。 sbin/portmap是文件转换服务，缺少该文件后，无法使用磁盘挂载、转换类型等功能。 bin/ps 进程查看命令功能支持文件，文件损坏或被更改后，无法正常使用ps命令。 usr/bin/top top命令支持文件，是Linux下常用的性能分析工具,能够实时显示系统中各个进程的资源占用状况。 etc/shadow shadow 是 /etc/passwd 的影子文件，密码存放在该文件当中，并且只有root用户可读。&quot; echo -------------------------------------------------------------------------- echo &quot;-------------------查看系统日志文件是否存在--------------------&quot; log=/var/log/syslog log2=/var/log/messages if [ -e &quot;$log&quot; ]; then echo &quot;syslog日志文件存在！ &quot; else echo &quot;/var/log/syslog日志文件不存在！ &quot; fi if [ -e &quot;$log2&quot; ]; then echo &quot;/var/log/messages日志文件存在！ &quot; else echo &quot;/var/log/messages日志文件不存在！ &quot; fi echo -------------------------------------------------------------------------- echo &quot;检查系统文件完整性2(MD5检查)&quot; echo &quot;该项会获取部分关键文件的MD5值并入库，默认保存在/etc/md5db中&quot; echo &quot;如果第一次执行，则会提示md5sum: /sbin/portmap: 没有那个文件或目录&quot; echo &quot;第二次重复检查时，则会对MD5DB中的MD5值进行匹配，来判断文件是否被更改过&quot; file=&quot;/etc/md5db&quot; if [ -e &quot;$file&quot; ]; then md5sum -c /etc/md5db 2&gt;&amp;1; else md5sum /etc/passwd &gt;&gt;/etc/md5db md5sum /etc/shadow &gt;&gt;/etc/md5db md5sum /etc/group &gt;&gt;/etc/md5db md5sum /usr/bin/passwd &gt;&gt;/etc/md5db md5sum /sbin/portmap&gt;&gt;/etc/md5db md5sum /bin/login &gt;&gt;/etc/md5db md5sum /bin/ls &gt;&gt;/etc/md5db md5sum /bin/ps &gt;&gt;/etc/md5db md5sum /usr/bin/top &gt;&gt;/etc/md5db; fi echo ---------------------------------------------------------------------- echo &quot;------------------------主机性能检查--------------------------------&quot; echo &quot;CPU检查&quot; dmesg | grep -i cpu echo ----------------------------------------------------------------------- more /proc/cpuinfo echo ----------------------------------------------------------------------- echo &quot;内存状态检查&quot; vmstat 2 5 echo ----------------------------------------------------------------------- more /proc/meminfo echo ----------------------------------------------------------------------- free -m echo ----------------------------------------------------------------------- echo &quot;文件系统使用情况&quot; df -h echo ----------------------------------------------------------------------- echo &quot;网卡使用情况&quot; lspci -tv echo ---------------------------------------------------------------------- echo &quot;查看僵尸进程&quot; ps -ef | grep zombie echo ---------------------------------------------------------------------- echo &quot;耗CPU最多的进程&quot; ps auxf |sort -nr -k 3 |head -5 echo ---------------------------------------------------------------------- echo &quot;耗内存最多的进程&quot; ps auxf |sort -nr -k 4 |head -5 echo ---------------------------------------------------------------------- echo --------------------------------------------------------------------- echo &quot;COPY RIGHT &quot; echo &quot;QQ：&quot; echo ----------------------结束时间为------------------------------------- DATE=`date` echo &quot;Date is $DATE&quot; echo ----------------------------------------------------------------------]]></content>
      <categories>
        <category>Linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jira 安装]]></title>
    <url>%2F2019%2F05%2F21%2Fjira%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[一、jira环境需求system： Linux memory： 2GB Mysql数据库 Jdk jdk-8u92-linux-x64.rpm Jira atlassian-jira-6.4.12-x64 Jira + 数据库连接插件mysql-connector-java-5.1.36-bin 部署前机器的内存至少为2GB.否则会出现如下错误： 二、安装部署部署前配置 关闭iptables和selinux service iptables stop &amp;&amp; setenforce 0 2.1 jdk安装 查看版本号 jdk安装完毕 2.2 安装mysql数据库（如果有的可以跳过安装这一步）采用的是yum安装 yum install http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm yum install Percona-Server-server-56 初始化mysql数据库，创建账户并赋予链接权限 创建jira库和jira用户 create database jiradb character set utf8; grant select,insert,update,delete,create,drop,alter,index on jiradb.* to &apos;jira&apos;@&apos;localhost&apos; identified by &apos;jira&apos;; flush privileges; 退出，使用jira账户进行登陆测试 mysql –ujira –p 下载mysql-connector-java-5.1.39.tar.gz 连接 2.3 安装jira 上传jira文件 Chmod +x ./ Jira web访问端口为8080 由于jira默认是不支持使用mysql数据库的，如果用mysql的话就得把链接插件放到以下目录，并重启jira 上传mysql – jira 连接插件 cd /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/ 上传文件 cd /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/ 上传中文语言包 删除 cd /var/atlassian/application-data/jira/ 打开浏览器，开始设置向导 连接数据库 选择模式 装的过程中需要在官网获取试用序列号，然后进行破解！！]]></content>
      <categories>
        <category>Linux</category>
        <category>jira</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>jira</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zimbra 邮箱系统安装]]></title>
    <url>%2F2019%2F05%2F21%2Fzimbra%20%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1、Zimbra介绍Zimbra与众不同的特点是其“Zimlet”网络服务提供了更多的电子邮件功能。例如，人们可以简单地用鼠标点击电子邮件程序中的航班信息以检查航班的状况。用户还可以在电子邮件中跟踪FedEx公司的投递情况并且获得地图、股票和其它信息。Zimbra的核心产品是Zimbra协作套件（Zimbra Collaboration Suite，简称ZCS）。除了它的核心功能是电子邮件和日程安排服务器，当然还包括许多其它的功能，就象是下一代的微软Exchange。在电子邮件和日程安排之外，它还提供文档存储和编辑、即时消息以及一个利用获奖技术开发的全功能的管理控制台。ZCS同时也提供移动设备的支持，以及与部署于Windows、Linux或apple操作系统中的桌面程序的同步功能。(来自百度百科)注:Zimbra安装时，须在linux系统上，系统内存至少一个GB，5G磁盘空间；否则安装过程会很长，且会因为内存和磁盘空间不够而导致安装失败 2、安装配置DNS1、安装配置DNS配置vim /etc/named.conf #修改一下内容 配置 vim /etc/named.rfc1912.zones #添加以下内容 配置正向解析文件解析文件 cd /var/named cp named.localhost tzh.com.zone vim tzh.com.zone 配置反向解析文件 #添加以下内容 vim 10.90.10.zone 启动bind service named start 解析 nslookup www.tzh.com nslookup mail.tzh.com 3、安装zimbra3.1、停止系统默认邮件服务 Chkconfig postfix off &amp;&amp; /etc/init.d/postfix stop 3.2、关闭iptables和selinux setenforce 0 &amp;&amp; service iptables stop &amp;&amp; chkconfig iptables off 3.3、设置hosts文件 #添加以下内容 3.4、 安装 点击显/隐内容 [root@tzh zcs-8.6.0_GA_1153.RHEL6_64.20141215151155]# ./install.shOperations logged to /tmp/install.log.29747Checking for existing installation… zimbra-ldap…NOT FOUND zimbra-logger…NOT FOUND zimbra-mta…NOT FOUND zimbra-dnscache…NOT FOUND zimbra-snmp…NOT FOUND zimbra-store…NOT FOUND zimbra-apache…NOT FOUND zimbra-spell…NOT FOUND zimbra-convertd…NOT FOUND zimbra-memcached…NOT FOUND zimbra-proxy…NOT FOUND zimbra-archiving…NOT FOUND zimbra-core…NOT FOUNDPLEASE READ THIS AGREEMENT CAREFULLY BEFORE USING THE SOFTWARE.ZIMBRA, INC. (“ZIMBRA”) WILL ONLY LICENSE THIS SOFTWARE TO YOU IF YOUFIRST ACCEPT THE TERMS OF THIS AGREEMENT. BY DOWNLOADING OR INSTALLINGTHE SOFTWARE, OR USING THE PRODUCT, YOU ARE CONSENTING TO BE BOUND BYTHIS AGREEMENT. IF YOU DO NOT AGREE TO ALL OF THE TERMS OF THISAGREEMENT, THEN DO NOT DOWNLOAD, INSTALL OR USE THE PRODUCT.License Terms for the Zimbra Collaboration Suite:http://www.zimbra.com/license/zimbra-public-eula-2-5.htmlDo you agree with the terms of the software license agreement? [N] yChecking for prerequisites… FOUND: NPTL FOUND: nc-1.84-24 FOUND: sudo-1.8.6p3-19 FOUND: libidn-1.18-2 FOUND: gmp-4.3.1-7 FOUND: libaio-0.3.107-10 FOUND: libstdc++-4.4.7-16 FOUND: unzip-6.0-2Checking for suggested prerequisites… FOUND: perl-5.10.1 FOUND: sysstat FOUND: sqlitePrerequisite check complete.Checking for installable packagesFound zimbra-coreFound zimbra-ldapFound zimbra-loggerFound zimbra-mtaFound zimbra-dnscacheFound zimbra-snmpFound zimbra-storeFound zimbra-apacheFound zimbra-spellFound zimbra-memcachedFound zimbra-proxySelect the packages to installInstall zimbra-ldap [Y] yInstall zimbra-logger [Y] yInstall zimbra-mta [Y] yInstall zimbra-dnscache [Y] yInstall zimbra-snmp [Y] yInstall zimbra-store [Y] yInstall zimbra-apache [Y]Install zimbra-spell [Y] yInstall zimbra-memcached [Y] yInstall zimbra-proxy [Y] yChecking required space for zimbra-coreChecking space for zimbra-storeChecking required packages for zimbra-storezimbra-store package check complete.Installing: zimbra-core zimbra-ldap zimbra-logger zimbra-mta zimbra-dnscache zimbra-snmp zimbra-store zimbra-apache zimbra-spell zimbra-memcached zimbra-proxyThe system will be modified. Continue? [N] yRemoving /opt/zimbraRemoving zimbra crontab entry…done.Cleaning up zimbra init scripts…done.Cleaning up /etc/ld.so.conf…done.Cleaning up /etc/prelink.conf…done.Cleaning up /etc/security/limits.conf…done.Finished removing Zimbra Collaboration Server.Installing packageszimbra-core……zimbra-core-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm… zimbra-ldap……zimbra-ldap-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-logger……zimbra-logger-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-mta……zimbra-mta-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-dnscache……zimbra-dnscache-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-snmp……zimbra-snmp-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-store……zimbra-store-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-apache……zimbra-apache-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-spell……zimbra-spell-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-memcached……zimbra-memcached-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…done zimbra-proxy……zimbra-proxy-8.6.0_GA_1153.RHEL6_64-20141215151155.x86_64.rpm…doneOperations logged to /tmp/zmsetup06292016-184521.logInstalling LDAP configuration database…done.Setting defaults… MX: mail.user-mail.net (54.227.254.216) MX: mail.user-mail.net (54.225.221.198) Interface: 10.90.10.190 Interface: 127.0.0.1 Interface: ::1 54.225.221.198 54.227.254.216 54.227.254.216 54.225.221.198 54.225.221.198 54.227.254.216DNS ERROR - none of the MX records for mail.tzh.comresolve to this hostChange domain name? [Yes] ndone.Checking for port conflictsMain menu1) Common Configuration:2) zimbra-ldap: Enabled3) zimbra-logger: Enabled4) zimbra-mta: Enabled5) zimbra-dnscache: Enabled6) zimbra-snmp: Enabled7) zimbra-store: Enabled +Create Admin User: yes +Admin user to create: admin@mail.tzh.com*** +Admin Password UNSET +Anti-virus quarantine user: virus-quarantine.iv8_lcko@mail.tzh.com +Enable automated spam training: yes +Spam training user: spam.f8aglxrf@mail.tzh.com +Non-spam(Ham) training user: ham.ugur2xpeby@mail.tzh.com +SMTP host: mail.tzh.com +Web server HTTP port: 8080 +Web server HTTPS port: 8443 +Web server mode: https +IMAP server port: 7143 +IMAP server SSL port: 7993 +POP server port: 7110 +POP server SSL port: 7995 +Use spell check server: yes +Spell server URL: http://mail.tzh.com:7780/aspell.php +Enable version update checks: TRUE +Enable version update notifications: TRUE +Version update notification email: admin@mail.tzh.com +Version update source email: admin@mail.tzh.com +Install mailstore (service webapp): yes +Install UI (zimbra,zimbraAdmin webapps): yes8) zimbra-spell: Enabled9) zimbra-proxy: Enabled10) Default Class of Service Configuration:s) Save config to filex) Expand menuq) QuitAddress unconfigured () items (? - help) 7Store configuration1) Status: Enabled2) Create Admin User: yes3) Admin user to create: admin@mail.tzh.com 4) Admin Password UNSET5) Anti-virus quarantine user: virus-quarantine.iv8_lcko@mail.tzh.com6) Enable automated spam training: yes7) Spam training user: spam.f8aglxrf@mail.tzh.com8) Non-spam(Ham) training user: ham.ugur2xpeby@mail.tzh.com9) SMTP host: mail.tzh.com10) Web server HTTP port: 808011) Web server HTTPS port: 844312) Web server mode: https13) IMAP server port: 714314) IMAP server SSL port: 799315) POP server port: 711016) POP server SSL port: 799517) Use spell check server: yes18) Spell server URL: http://mail.tzh.com:7780/aspell.php19) Enable version update checks: TRUE20) Enable version update notifications: TRUE21) Version update notification email: admin@mail.tzh.com22) Version update source email: admin@mail.tzh.com23) Install mailstore (service webapp): yes24) Install UI (zimbra,zimbraAdmin webapps): yesSelect, or ‘r’ for previous menu [r] 4Password for admin@mail.tzh.com (min 6 characters): [1mrCHrfp] 558842Store configuration1) Status: Enabled2) Create Admin User: yes3) Admin user to create: admin@mail.tzh.com4) Admin Password set5) Anti-virus quarantine user: virus-quarantine.iv8_lcko@mail.tzh.com6) Enable automated spam training: yes7) Spam training user: spam.f8aglxrf@mail.tzh.com8) Non-spam(Ham) training user: ham.ugur2xpeby@mail.tzh.com9) SMTP host: mail.tzh.com10) Web server HTTP port: 808011) Web server HTTPS port: 844312) Web server mode: https13) IMAP server port: 714314) IMAP server SSL port: 799315) POP server port: 711016) POP server SSL port: 799517) Use spell check server: yes18) Spell server URL: http://mail.tzh.com:7780/aspell.php19) Enable version update checks: TRUE20) Enable version update notifications: TRUE21) Version update notification email: admin@mail.tzh.com22) Version update source email: admin@mail.tzh.com23) Install mailstore (service webapp): yes24) Install UI (zimbra,zimbraAdmin webapps): yesSelect, or ‘r’ for previous menu [r] rMain menu1) Common Configuration:2) zimbra-ldap: Enabled3) zimbra-logger: Disabled4) zimbra-mta: Enabled5) zimbra-dnscache: Enabled6) zimbra-snmp: Enabled7) zimbra-store: Enabled8) zimbra-spell: Enabled9) zimbra-proxy: Enabled10) Default Class of Service Configuration:s) Save config to filex) Expand menuq) QuitSelect from menu, or press ‘a’ to apply config (? - help) aSave configuration data to a file? [Yes] ySave config in file: [/opt/zimbra/config.39633]Saving config in /opt/zimbra/config.39633…done.The system will be modified - continue? [No] yOperations logged to /tmp/zmsetup06292016-184521.logSetting local config values…done.Initializing core config…Setting up CA…done.Deploying CA to /opt/zimbra/conf/ca …done.Creating SSL zimbra-store certificate…done.Creating new zimbra-ldap SSL certificate…done.Creating new zimbra-mta SSL certificate…done.Creating new zimbra-proxy SSL certificate…done.Installing mailboxd SSL certificates…done.Installing MTA SSL certificates…done.Installing LDAP SSL certificate…done.Installing Proxy SSL certificate…done.Initializing ldap…done.Setting replication password…done.Setting Postfix password…done.Setting amavis password…done.Setting nginx password…done.Setting BES searcher password…done.Creating server entry for mail.tzh.com…done.Setting Zimbra IP Mode…done.Saving CA in ldap …done.Saving SSL Certificate in ldap …done.Setting spell check URL…done.Setting service ports on mail.tzh.com…done.Setting zimbraFeatureTasksEnabled=TRUE…done.Setting zimbraFeatureBriefcasesEnabled=TRUE…done.Setting Master DNS IP address(es)…done.Setting DNS cache tcp lookup preference…done.Setting DNS cache udp lookup preference…done.Setting DNS tcp upstream preference…done.Setting TimeZone Preference…done.Initializing mta config…done.Setting services on mail.tzh.com…done.Adding mail.tzh.com to zimbraMailHostPool in default COS…done.Creating domain mail.tzh.com…done.Setting default domain name…done.Creating domain mail.tzh.com…already exists.Creating admin account admin@mail.tzh.com…done.Creating root alias…done.Creating postmaster alias…done.Creating user spam.f8aglxrf@mail.tzh.com…done.Creating user ham.ugur2xpeby@mail.tzh.com…done.Creating user virus-quarantine.iv8_lcko@mail.tzh.com…done.Setting spam training and Anti-virus quarantine accounts…done.Initializing store sql database…done.Setting zimbraSmtpHostname for mail.tzh.com…done.Configuring SNMP…done.Setting up syslog.conf…done.Starting servers…Installing common zimlets… com_zimbra_ymemoticons…done. com_zimbra_clientuploader…done. com_zimbra_webex…done. com_zimbra_proxy_config…done. com_zimbra_srchhighlighter…done. com_zimbra_bulkprovision…done. com_zimbra_viewmail…done. com_zimbra_date…done. com_zimbra_attachcontacts…done. com_zimbra_mailarchive…done. com_zimbra_cert_manager…done. com_zimbra_url…done. com_zimbra_adminversioncheck…done. com_zimbra_attachmail…done. com_zimbra_tooltip…done. com_zimbra_email…done. com_zimbra_phone…done.Finished installing common zimlets.Restarting mailboxd…done.Creating galsync account for default domain…done.You have the option of notifying Zimbra of your installation.This helps us to track the uptake of the Zimbra Collaboration Server.The only information that will be transmitted is: The VERSION of zcs installed (8.6.0_GA_1153_RHEL6_64) The ADMIN EMAIL ADDRESS created (admin@mail.tzh.com)Notify Zimbra of your installation? [Yes] yesNotifying Zimbra of installation via http://www.zimbra.com/cgi-bin/notify.cgi?VER=8.6.0_GA_1153_RHEL6_64&amp;MAIL=admin@mail.tzh.comNotification completeSetting up zimbra crontab…done.Moving /tmp/zmsetup06292016-184521.log to /opt/zimbra/logConfiguration complete - press return to exit 3.5、重启zimbra 点击显/隐内容 [root@tzh zcs-8.6.0_GA_1153.RHEL6_64.20141215151155]# /etc/init.d/zimbra restartHost mail.tzh.com Stopping vmware-ha…skipped. /opt/zimbra/bin/zmhactl missing or not executable. Stopping zmconfigd…Done. Stopping zimlet webapp…Done. Stopping zimbraAdmin webapp…Done. Stopping zimbra webapp…Done. Stopping service webapp…Done. Stopping stats…Done. Stopping mta…Done. Stopping spell…Done. Stopping snmp…Done. Stopping cbpolicyd…Done. Stopping archiving…Done. Stopping opendkim…Done. Stopping amavis…Done. Stopping antivirus…Done. Stopping antispam…Done. Stopping proxy…Done. Stopping memcached…Done. Stopping mailbox…Done. Stopping logger…Done. Stopping dnscache…Done. Stopping ldap…Done.Host mail.tzh.com Starting ldap…Done.略~~~ 4、服务发件测试4.1 登陆测试 创建一个账户，进行邮件发送测试 账户创建 登陆网页客户端进行邮件发送测试 注：上图时间为周三（6月29）下午17：29是因为我在本地搭建的虚拟机，时间没有同步因为域名问题，以及DNS在内网的虚拟机上，收取邮件是无法收取的，需要做公网解析，所以暂不进行邮件收取测试]]></content>
      <categories>
        <category>Linux</category>
        <category>zimbra</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zimbra</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix 缓存数据清理]]></title>
    <url>%2F2019%2F05%2F17%2FZabbix-%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86%2F</url>
    <content type="text"><![CDATA[zabbix监控运行一段时间以后，会留下大量的历史监控数据，zabbix数据库一直在增大；可能会造成系统性能下降，查看历史数据室查询速度缓慢。 zabbix里面最大的表就是history和history_uint两个表，而且zabbix里面的时间是使用的时间戳方式记录，所以可以根据时间戳来删除历史数据一、关闭zabbix、http服务 pkill -9 zabbix service httpd stop 二、清理zabbix历史数据 1、查看数据库目录文件 [root@zabbix-server zabbix]# cd /var/lib/mysql/zabbix/ [root@zabbix-server zabbix]# ls -lh | grep G total 177G -rw-r----- 1 mysql mysql 1.7G Dec 24 13:49 events.ibd -rw-r----- 1 mysql mysql 60G Dec 24 13:49 history.ibd -rw-r----- 1 mysql mysql 2.4G Dec 24 13:49 history_str.ibd -rw-r----- 1 mysql mysql 99G Dec 24 13:49 history_uint.ibd -rw-r----- 1 mysql mysql 4.6G Dec 24 13:02 trends.ibd -rw-r----- 1 mysql mysql 9.5G Dec 24 13:49 trends_uint.ibd [root@zabbix-server zabbix]# 生成Unix时间戳。时间定为2018年2月1日（暂定是保存18年2月以后的监控数据） [root@zabbix-server zabbix]# date +%s -d &quot;Feb 1, 2018 00:00:00&quot; #执行此命令以后会生成一个ID 1517414400 #这是生成的ID 2、数据备份 [root@zabbix-server zabbix]#mysql -uroot -p zabbix &gt; /root/mysqlback/zabbix.sql #需要创建mysqlback目录 3、 登录数据库 [root@zabbix-server zabbix]# mysql -uroot -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 7 Server version: 5.5.60-MariaDB MariaDB Server Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement. MariaDB [(none)]&gt; use zabbix; #选择zabbix数据库 执行sql查看指定日期之前的数据大小： SELECT table_schema as `Database`,table_name AS `Table`,round(((data_length + index_length) / 1024 / 1024 / 1024), 2) `Size in MB`FROM information_schema.TABLES where CREATE_TIME &lt; &apos;2018-02-01 00:00:00&apos; and table_name=&apos;history.ibd&apos;; 根据需要修改日期和查询的表名称(如果查询出来的结果是0.0，需要将sql中的三个1024删除一个，以G为单位显示) 4、 执行以下命令，清理指定时间之前的数据、对zabbix数据库执行以下sql delete from history where clock &lt; 1517414400; optimize table history; delete from history_uint where clock &lt; 1517414400; optimize table history_uint; delete from trends where clock &lt; 1517414400; optimize table trends; delete from trends_uint where clock &lt; 1517414400; optimize table trends_uint; 注意：sql中的ID是生成Unix时间戳的ID号,需要改为自己生成的ID号三、启动服务 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf #zabbix server /usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf #zabbix agent service httpd start ===============================分===========隔==========符=================================== 1、使用truncate命令清空zabbix 所有监控数据 ------------------------------------------------------- truncate table history; optimize table history; ------------------------------------------------------- truncate table history_str; optimize table history_str; ------------------------------------------------------- truncate table history_uint; optimize table history_uint; ------------------------------------------------------- truncate table trends; optimize table trends; ------------------------------------------------------- truncate table trends_uint; optimize table trends_uint; ------------------------------------------------------- truncate table events; optimize table events; ------------------------------------------------------- 注意：这些命令会把zabbix所有的监控数据清空，操作前注意备份数据库 truncate是删除了表，然后根据表结构重新建立，delete删除的是记录的数据没有修改表 truncate执行删除比较快，但是在事务处理安全性方面不如delete,如果我们执行truncat的表正在处理事务，这个命令退出并会产生错误信息]]></content>
      <categories>
        <category>Linux</category>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 故障恢复]]></title>
    <url>%2F2019%2F05%2F17%2FRedis-%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D%2F</url>
    <content type="text"><![CDATA[案例一、ResponseError: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk.Commands that may modify the data set are disabled. Please check Redis logs for details about the error.Redis被配置为保存数据库快照，但它目前不能持久化到硬盘。用来修改集合数据的命令不能用。请查看Redis日志的详细错误信息。原因：强制关闭redis快照导致不能持久化 解决方案：将：stop-writes-on-bgsave-error 设置为 no]]></content>
      <categories>
        <category>Linux</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量ping存活主机]]></title>
    <url>%2F2019%2F05%2F17%2F%E6%89%B9%E9%87%8Fping%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[创建一个ip.txt文件，把需要测试IP地址写入文档 创建一个ping.sh 的shell 脚本，并修改ip.txt 文件路径 #!/bin/bash for ips in `cat /root/manager/script/ip.txt` do result=`ping -w 2 -c 3 ${ips} | grep packet | awk -F&quot; &quot; &apos;{print $6}&apos;| awk -F&quot;%&quot; &apos;{print $1}&apos;| awk -F&apos; &apos; &apos;{print $1}&apos;` if [ $result -eq 0 ]; then echo &quot;&quot;${ips}&quot; is ok !&quot; else echo &quot;&quot;${ips}&quot; is not connected .....&quot; fi done 给脚本执行权限 chmod +x ping.sh 执行脚本 [root@k8s-node1 script]# ./ping.sh 172.31.8.101 is ok ! 172.31.8.192 is ok ! 172.31.8.42 is ok ! 172.31.8.176 is ok ! 172.31.8.45 is ok ! [root@k8s-node1 script]#]]></content>
      <categories>
        <category>Linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PTES渗透测试执行标准]]></title>
    <url>%2F2019%2F05%2F17%2FPTES%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%89%A7%E8%A1%8C%E6%A0%87%E5%87%86%2F</url>
    <content type="text"><![CDATA[渗透测试注意事项：1、不要进行恶意攻击 2、不要做傻事 3、在没有获得书面授权时，不要攻击任何目标 4、考虑清楚攻击将会带来的后果 4、如果干了非法的事情，记得天网恢恢疏而不漏 参考官方对于渗透测试执行标准描述（PTES） 一：前期交互阶段在前期交互阶段，渗透测试团队与客户组织进行交互讨论，最重要的是确定渗透测试的范围、目标、限制条件以及合同细节 该阶段通常涉及收集客户需求，准备测试计划、定义测试范围与边界、定义业务目标、项目管理与规划等活动 二：情报收集阶段在目标范围确定之后，将进入情报搜集（Information Gathering）阶段，渗透团队可以利用各种信息来源与搜集技术方法，尝试更多关于组织网络拓扑、系统配置与安全防御措施的信息。 渗透测试者可以使用情报搜集方法包括公开来源信息查询、google Hacking 、社会工程学、网络踩点、扫描探测、被动监听、服务查点等。而对目标系统的情报探查能力是渗透者一项非常重要的技能，情报搜集是否充分在很大程度上决定了渗透测的成败，因为如果你遗漏关键的情报信息，你将可能在后面的阶段一无所获。 三：威胁建模阶段在搜集到充分的情报信息之后，渗透测试团队的成员们停下敲击键盘，大家聚到一起针对获取的信息进行威胁建模（Threat Modeling）与攻击规划。这是渗透测试过程中非常重要，但很容易被忽视的一个关键点。通过团队共同的缜密情报分析与攻击思路头脑风暴，可以从大量的信息情报中理清头绪，确定出最可行的攻击通道。四：漏洞分析阶段在确定出最可行的攻击通道之后，接下来需要考虑该如何取得目标系统的访问控制权，即漏洞分析（Vulnerability Analysis）阶段。在该阶段，渗透测试者需要综合分析前几个阶段获取并汇总的情报信息，特别是安全漏洞扫描结果、服务查点信息等，通过搜索可获取的渗透代码资源，找出可以实施渗透攻击的攻击点，并在实验环境中进行验证。在该阶段，高水平的渗透测试团队还会针对攻击通道上的一些关键系统与服务进行安全漏洞探测与挖掘，期望找出可被利用的未知安全漏洞，并开发出渗透代码，从而打开攻击通道上的关键路径。 五：渗透攻击阶段渗透攻击（Exploitation）是渗透测试过程中最具有魅力的环节。在此环节中，渗透测试团队需要利用他们所找出的目标系统安全漏洞，来真正入侵系统当中，获得访问控制权。渗透攻击可以利用公开渠道可获取的渗透代码，但一般在实际应用场景中，渗透测试者还需要充分地考虑目标系统特性来定制渗透攻击，并需要挫败目标网络与系统中实施的安全防御措施，才能成功达成渗透目的。在黑盒测试中，渗透测试者还需要考虑对目标系统检测机制的逃逸，从而避免造成目标组织安全响应团队的警觉和发现 六：后渗透攻击阶段后渗透攻击（Post Exploitation）是整个渗透测试过程中最能够体现渗透测试团队创造力与技术能力的环节。前面的环节可以说都是在按部就班地完成非常普遍的目标，而在这个环节中，需要渗透测试团队根据目标组织的业务经营模式、保护资产形式与安全防御计划的不同特点，自主设计出攻击目标，识别关键基础设施，并寻找客户组织最具价值和尝试安全保护的信息和资产，最终达成能够对客户组织造成最重要业务影响的攻击途径。在不同的渗透测试场景中，这些攻击目标与途径可能是千变万化的，而设置是否准确并且可行，也取决于团队自身的创新意识、知识范畴、实际经验和技术能力。 七：报告阶段渗透测试过程最终向客户组织提交，取得认可并成功获得合同付款的就是一份渗透测试报告（Reporting）。这份报告凝聚了之前所有阶段之中渗透测试团队所获取的关键情报信息、探测和发掘出的系统安全漏洞、成功渗透攻击的过程，以及造成业务影响后果的攻击途径，同时还要站在防御者的角度上，帮助他们分析安全防御体系中的薄弱环节、存在的问题，以及修补与升级技术方案。 八：渗透术语：渗透攻击（Exploit） 攻击者利用安全漏洞，所进行的攻击行为，常见的渗透攻击技术包括缓冲区溢出、web应用程序漏洞攻击（SQL注入）、利用配置错误等 攻击载荷（Payload） 目标系统在被渗透攻击之后执行的代码 Shellcode 在渗透攻击时作为攻击载荷运行的一组机器指令，通常用汇编语言编写 模块（Module） 一段软件代码组件 监听器（Listener） 用来等待连入网络链接的组件]]></content>
      <categories>
        <category>信息安全</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>信息安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(二)、Ansible在使用过程中出现的错误解决方法]]></title>
    <url>%2F2018%2F09%2F02%2F%E4%BA%8C-%E3%80%81Ansible%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.安装完成后允许命令出错Traceback (most recent call last): File &quot;/usr/bin/ansible&quot;, line 197, in &lt;module&gt; (runner, results) = cli.run(options, args) File &quot;/usr/bin/ansible&quot;, line 163, in run extra_vars=extra_vars, File &quot;/usr/lib/python2.6/site-packages/ansible/runner/__init__.py&quot;, line 233, in __init__ cmd = subprocess.Popen([&apos;ssh&apos;,&apos;-o&apos;,&apos;ControlPersist&apos;], stdout=subprocess.PIPE, stderr=subprocess.PIPE) File &quot;/usr/lib64/python2.6/subprocess.py&quot;, line 639, in __init__ errread, errwrite) File &quot;/usr/lib64/python2.6/subprocess.py&quot;, line 1228, in _execute_child raise child_exception OSError: [Errno 2] No such file or directory 解决办法yum -y install openssh-clients 2.出现Error: ansible requires a json module, none found!SSH password: 10.0.1.110 | FAILED &gt;&gt; { &quot;failed&quot;: true, &quot;msg&quot;: &quot;Error: ansible requires a json module, nonefound!&quot;, &quot;parsed&quot;: false } 解决办法python版本过低，可以升级python或者python-simplejson 3.安装完成后链接客户端报错（配图为我在使用ansible推送文件到客户端的时候遇到的，这个客户端是第一次推送）FAILED =&gt; Using a SSH password insteadof a key is not possible because Host Key checking is enabled and sshpass doesnot support this. Please add this host&apos;sfingerprint to your known_hosts file to manage this host. 解决办法：在ansible 服务器上使用ssh 登陆下/etc/ansible/hosts 里面配置的服务器。然后再次使用ansible 去管理就不会报上面的错误了！但这样大批量登陆就麻烦来。因为默认ansible是使用key验证的，如果使用密码登陆的服务器，使用ansible的话，要不修改ansible.cfg配置文件的ask_pass = True给取消注释，要不就在运行命令时候加上-k，这个意思是-k, –ask-pass ask for SSH password。再修改： host_key_checking= False即可 4.如果客户端不在know_hosts里将会报错paramiko: The authenticity of host &apos;192.168.24.15&apos;can&apos;t be established. The ssh-rsa key fingerprint is397c139fd4b0d763fcffaee346a4bf6b. Are you sure you want to continueconnecting (yes/no)? 解决办法需要修改ansible.cfg的#host_key_checking= False取消注释 5.出现FAILED =&gt; FAILED: not a valid DSA private key file解决办法：需要你在最后命令内添加参数-k 6.openssh升级后无法登录报错PAM unable todlopen(/lib64/security/pam_stack.so): /lib64/security/pam_stack.so: cannot openshared object file: No such file or directory 解决方法：sshrpm 升级后会修改/etc/pam.d/sshd 文件。需要升级前备份此文件最后还原即可登录。 7.第一次系统初始化运行生成本机ansible用户key时报错failed: [127.0.0.1] =&gt;{&quot;checksum&quot;: &quot;f5f2f20fc0774be961fffb951a50023e31abe920&quot;,&quot;failed&quot;: true} msg: Aborting, target uses selinux but pythonbindings (libselinux-python) aren&apos;t installed! FATAL: all hosts have already failed –aborting 解决办法yum -y install libselinux-python 参考: http://blog.csdn.net/longxibendi/article/details/46989735]]></content>
      <categories>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible]]></title>
    <url>%2F2018%2F09%2F01%2FAnsible%2F</url>
    <content type="text"><![CDATA[1、ansible介绍： Ansible是一款基于Python开发的自动化运维工具，主要是实现批量系统配置、批量程序部署、批量运行命令、批量执行任务等等诸多功能。 Ansible是一款灵活的开源工具，能够很大程度简化运维中的配置管理与流程控制方式，它利用推送方式对客户系统加以配置，这样所有工作都可在主服务器端完成。Asible是基于模块工作的，其本身没有批量部署的能力，Ansible~一款运维自动化的软件！1.1特性 (1)、no agents：不需要在被管控主机上安装任何客户端； (2)、no server：无服务器端，使用时直接运行命令即可； (3)、modules in any languages：基于模块工作，可使用任意语言开发模块； (4)、yaml，not code：使用yaml语言定制剧本playbook； (5)、ssh by default：基于SSH工作； (6)、strong multi-tier solution：可实现多级指挥。 1.1 优点 (1)、轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可； (2)、批量任务执行可以写成脚本，而且不用分发到远程就可以执行； (3)、使用python编写，维护更简单，ruby语法过于复杂； (4)、支持sudo。 2、ansible安装 安装epel 源：rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm 安装ansible ：yum install ansible -y ssh-keygen 生成秘钥文件,如果不想输入密码可以一直回车 ssh-keygen -t rsa cd /root/.ssh/ &amp;&amp; ll ./* 配置ansible 的hosts 文件： vim /etc/ansible/hosts]]></content>
      <categories>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
</search>
